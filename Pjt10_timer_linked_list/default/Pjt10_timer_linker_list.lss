
Pjt10_timer_linker_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800200  00001436  000014ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008002b0  008002b0  0000157a  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  0000268c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000270  00000000  00000000  000029c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023c8  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113a  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013cf  00000000  00000000  0000613a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000062c  00000000  00000000  0000750c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fa  00000000  00000000  00007b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018c6  00000000  00000000  00008232  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00009af8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e3       	ldi	r30, 0x36	; 54
      fc:	f4 e1       	ldi	r31, 0x14	; 20
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3b       	cpi	r26, 0xB0	; 176
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	a0 eb       	ldi	r26, 0xB0	; 176
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a9 34       	cpi	r26, 0x49	; 73
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 a2 04 	call	0x944	; 0x944 <main>
     124:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri= fo = ro = 0;
     12c:	10 92 fb 02 	sts	0x02FB, r1
     130:	10 92 fa 02 	sts	0x02FA, r1
     134:	10 92 f9 02 	sts	0x02F9, r1
     138:	10 92 f8 02 	sts	0x02F8, r1
     13c:	10 92 fd 02 	sts	0x02FD, r1
     140:	10 92 fc 02 	sts	0x02FC, r1
     144:	10 92 b7 02 	sts	0x02B7, r1
     148:	10 92 b6 02 	sts	0x02B6, r1
}
     14c:	08 95       	ret

0000014e <qi_insert>:

int qi_insert(char ch)
{
     14e:	48 2f       	mov	r20, r24
	if ((ri+1) % QI_SIZE == fi)
     150:	20 91 fc 02 	lds	r18, 0x02FC
     154:	30 91 fd 02 	lds	r19, 0x02FD
     158:	2f 5f       	subi	r18, 0xFF	; 255
     15a:	3f 4f       	sbci	r19, 0xFF	; 255
     15c:	c9 01       	movw	r24, r18
     15e:	60 e4       	ldi	r22, 0x40	; 64
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	0e 94 06 05 	call	0xa0c	; 0xa0c <__divmodhi4>
     166:	9c 01       	movw	r18, r24
     168:	80 91 b6 02 	lds	r24, 0x02B6
     16c:	90 91 b7 02 	lds	r25, 0x02B7
     170:	28 17       	cp	r18, r24
     172:	39 07       	cpc	r19, r25
     174:	59 f0       	breq	.+22     	; 0x18c <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     176:	30 93 fd 02 	sts	0x02FD, r19
     17a:	20 93 fc 02 	sts	0x02FC, r18
	qi[ri] = ch;
     17e:	22 50       	subi	r18, 0x02	; 2
     180:	3d 4f       	sbci	r19, 0xFD	; 253
     182:	f9 01       	movw	r30, r18
     184:	40 83       	st	Z, r20
	return 1;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri+1) % QI_SIZE == fi)
		return 0;
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     190:	08 95       	ret

00000192 <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     192:	80 91 b6 02 	lds	r24, 0x02B6
     196:	90 91 b7 02 	lds	r25, 0x02B7
     19a:	20 91 fc 02 	lds	r18, 0x02FC
     19e:	30 91 fd 02 	lds	r19, 0x02FD
     1a2:	28 17       	cp	r18, r24
     1a4:	39 07       	cpc	r19, r25
     1a6:	79 f0       	breq	.+30     	; 0x1c6 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     1a8:	01 96       	adiw	r24, 0x01	; 1
     1aa:	60 e4       	ldi	r22, 0x40	; 64
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	0e 94 06 05 	call	0xa0c	; 0xa0c <__divmodhi4>
     1b2:	90 93 b7 02 	sts	0x02B7, r25
     1b6:	80 93 b6 02 	sts	0x02B6, r24
	return (qi[fi]);
     1ba:	82 50       	subi	r24, 0x02	; 2
     1bc:	9d 4f       	sbci	r25, 0xFD	; 253
     1be:	fc 01       	movw	r30, r24
     1c0:	80 81       	ld	r24, Z
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return 0;
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return (qi[fi]);
}
     1ca:	08 95       	ret

000001cc <qo_insert>:

int qo_insert(char ch)
{
     1cc:	48 2f       	mov	r20, r24
	if ((ro+1) % QO_SIZE == fo)
     1ce:	20 91 fa 02 	lds	r18, 0x02FA
     1d2:	30 91 fb 02 	lds	r19, 0x02FB
     1d6:	2f 5f       	subi	r18, 0xFF	; 255
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	c9 01       	movw	r24, r18
     1dc:	60 e4       	ldi	r22, 0x40	; 64
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	0e 94 06 05 	call	0xa0c	; 0xa0c <__divmodhi4>
     1e4:	9c 01       	movw	r18, r24
     1e6:	80 91 f8 02 	lds	r24, 0x02F8
     1ea:	90 91 f9 02 	lds	r25, 0x02F9
     1ee:	28 17       	cp	r18, r24
     1f0:	39 07       	cpc	r19, r25
     1f2:	59 f0       	breq	.+22     	; 0x20a <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     1f4:	30 93 fb 02 	sts	0x02FB, r19
     1f8:	20 93 fa 02 	sts	0x02FA, r18
	qo[ro] = ch;
     1fc:	28 54       	subi	r18, 0x48	; 72
     1fe:	3d 4f       	sbci	r19, 0xFD	; 253
     200:	f9 01       	movw	r30, r18
     202:	40 83       	st	Z, r20
	return 1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	08 95       	ret
}

int qo_insert(char ch)
{
	if ((ro+1) % QO_SIZE == fo)
		return 0;
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     20e:	08 95       	ret

00000210 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     210:	80 91 f8 02 	lds	r24, 0x02F8
     214:	90 91 f9 02 	lds	r25, 0x02F9
     218:	20 91 fa 02 	lds	r18, 0x02FA
     21c:	30 91 fb 02 	lds	r19, 0x02FB
     220:	28 17       	cp	r18, r24
     222:	39 07       	cpc	r19, r25
     224:	79 f0       	breq	.+30     	; 0x244 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	60 e4       	ldi	r22, 0x40	; 64
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	0e 94 06 05 	call	0xa0c	; 0xa0c <__divmodhi4>
     230:	90 93 f9 02 	sts	0x02F9, r25
     234:	80 93 f8 02 	sts	0x02F8, r24
	return (qo[fo]);
     238:	88 54       	subi	r24, 0x48	; 72
     23a:	9d 4f       	sbci	r25, 0xFD	; 253
     23c:	fc 01       	movw	r30, r24
     23e:	80 81       	ld	r24, Z
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return (qo[fo]);
}
     248:	08 95       	ret

0000024a <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     24a:	8e e0       	ldi	r24, 0x0E	; 14
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <malloc>
	return tp;
}
     252:	08 95       	ret

00000254 <insert_timer>:

struct timer *Thead = NULL;

void insert_timer(struct task *tskp, int ms) {
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	f8 2e       	mov	r15, r24
     262:	e9 2e       	mov	r14, r25
     264:	8b 01       	movw	r16, r22
	int	total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     266:	0e 94 25 01 	call	0x24a	; 0x24a <get_timer>
     26a:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     26c:	dc 01       	movw	r26, r24
     26e:	12 96       	adiw	r26, 0x02	; 2
     270:	ef 2d       	mov	r30, r15
     272:	fe 2d       	mov	r31, r14
     274:	8a e0       	ldi	r24, 0x0A	; 10
     276:	01 90       	ld	r0, Z+
     278:	0d 92       	st	X+, r0
     27a:	81 50       	subi	r24, 0x01	; 1
     27c:	e1 f7       	brne	.-8      	; 0x276 <insert_timer+0x22>
	tp->time = ms;
     27e:	19 83       	std	Y+1, r17	; 0x01
     280:	08 83       	st	Y, r16

	if (Thead == NULL) {
     282:	e0 91 b0 02 	lds	r30, 0x02B0
     286:	f0 91 b1 02 	lds	r31, 0x02B1
     28a:	30 97       	sbiw	r30, 0x00	; 0
     28c:	29 f4       	brne	.+10     	; 0x298 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     28e:	d0 93 b1 02 	sts	0x02B1, r29
     292:	c0 93 b0 02 	sts	0x02B0, r28
     296:	2f c0       	rjmp	.+94     	; 0x2f6 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if (Thead == NULL) {
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	01 c0       	rjmp	.+2      	; 0x2a4 <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     2a2:	fd 01       	movw	r30, r26
		total += cp->time;
     2a4:	80 81       	ld	r24, Z
     2a6:	91 81       	ldd	r25, Z+1	; 0x01
     2a8:	28 0f       	add	r18, r24
     2aa:	39 1f       	adc	r19, r25
		if (total >= ms)
     2ac:	20 17       	cp	r18, r16
     2ae:	31 07       	cpc	r19, r17
     2b0:	34 f4       	brge	.+12     	; 0x2be <insert_timer+0x6a>
	if (Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     2b2:	a4 85       	ldd	r26, Z+12	; 0x0c
     2b4:	b5 85       	ldd	r27, Z+13	; 0x0d
     2b6:	af 01       	movw	r20, r30
     2b8:	10 97       	sbiw	r26, 0x00	; 0
     2ba:	99 f7       	brne	.-26     	; 0x2a2 <insert_timer+0x4e>
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms)
     2be:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}
	if (pp == NULL) {
     2c0:	41 15       	cp	r20, r1
     2c2:	51 05       	cpc	r21, r1
     2c4:	79 f4       	brne	.+30     	; 0x2e4 <insert_timer+0x90>
		cp->time -= tp->time;
     2c6:	8d 91       	ld	r24, X+
     2c8:	9c 91       	ld	r25, X
     2ca:	11 97       	sbiw	r26, 0x01	; 1
     2cc:	80 1b       	sub	r24, r16
     2ce:	91 0b       	sbc	r25, r17
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	9c 93       	st	X, r25
     2d4:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     2d6:	bd 87       	std	Y+13, r27	; 0x0d
     2d8:	ac 87       	std	Y+12, r26	; 0x0c
     2da:	d0 93 b1 02 	sts	0x02B1, r29
     2de:	c0 93 b0 02 	sts	0x02B0, r28
     2e2:	24 c0       	rjmp	.+72     	; 0x32c <insert_timer+0xd8>
	}
	else if (cp == NULL) {
     2e4:	10 97       	sbiw	r26, 0x00	; 0
     2e6:	51 f4       	brne	.+20     	; 0x2fc <insert_timer+0xa8>
		tp->time -= total;
     2e8:	02 1b       	sub	r16, r18
     2ea:	13 0b       	sbc	r17, r19
     2ec:	19 83       	std	Y+1, r17	; 0x01
     2ee:	08 83       	st	Y, r16
		pp->link = tp;
     2f0:	fa 01       	movw	r30, r20
     2f2:	d5 87       	std	Z+13, r29	; 0x0d
     2f4:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     2f6:	1d 86       	std	Y+13, r1	; 0x0d
     2f8:	1c 86       	std	Y+12, r1	; 0x0c
     2fa:	18 c0       	rjmp	.+48     	; 0x32c <insert_timer+0xd8>
	}
	else {
		total -= cp->time;
     2fc:	8d 91       	ld	r24, X+
     2fe:	9c 91       	ld	r25, X
     300:	11 97       	sbiw	r26, 0x01	; 1
     302:	b9 01       	movw	r22, r18
     304:	68 1b       	sub	r22, r24
     306:	79 0b       	sbc	r23, r25
		tp->time -= total;
     308:	98 01       	movw	r18, r16
     30a:	26 1b       	sub	r18, r22
     30c:	37 0b       	sbc	r19, r23
     30e:	39 83       	std	Y+1, r19	; 0x01
     310:	28 83       	st	Y, r18
		cp->time -= tp->time;
     312:	8d 91       	ld	r24, X+
     314:	9c 91       	ld	r25, X
     316:	11 97       	sbiw	r26, 0x01	; 1
     318:	82 1b       	sub	r24, r18
     31a:	93 0b       	sbc	r25, r19
     31c:	11 96       	adiw	r26, 0x01	; 1
     31e:	9c 93       	st	X, r25
     320:	8e 93       	st	-X, r24
		pp->link = tp;
     322:	fa 01       	movw	r30, r20
     324:	d5 87       	std	Z+13, r29	; 0x0d
     326:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     328:	bd 87       	std	Y+13, r27	; 0x0d
     32a:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	08 95       	ret

0000033a <tour_timer>:
void tour_timer()
{
     33a:	ef 92       	push	r14
     33c:	ff 92       	push	r15
     33e:	0f 93       	push	r16
     340:	1f 93       	push	r17
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
	struct timer *cp;
	int		total = 0;

	printf("\n");
     346:	8a e0       	ldi	r24, 0x0A	; 10
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <putchar>
	for(cp = Thead; cp != NULL; cp = cp -> link) {
     34e:	c0 91 b0 02 	lds	r28, 0x02B0
     352:	d0 91 b1 02 	lds	r29, 0x02B1
	}
}
void tour_timer()
{
	struct timer *cp;
	int		total = 0;
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp -> link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	e8 2e       	mov	r14, r24
     35e:	82 e0       	ldi	r24, 0x02	; 2
     360:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int		total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp -> link) {
     362:	20 c0       	rjmp	.+64     	; 0x3a4 <tour_timer+0x6a>
		total += cp->time;
     364:	88 81       	ld	r24, Y
     366:	99 81       	ldd	r25, Y+1	; 0x01
     368:	08 0f       	add	r16, r24
     36a:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     36c:	00 d0       	rcall	.+0      	; 0x36e <tour_timer+0x34>
     36e:	00 d0       	rcall	.+0      	; 0x370 <tour_timer+0x36>
     370:	ed b7       	in	r30, 0x3d	; 61
     372:	fe b7       	in	r31, 0x3e	; 62
     374:	31 96       	adiw	r30, 0x01	; 1
     376:	ad b7       	in	r26, 0x3d	; 61
     378:	be b7       	in	r27, 0x3e	; 62
     37a:	12 96       	adiw	r26, 0x02	; 2
     37c:	fc 92       	st	X, r15
     37e:	ee 92       	st	-X, r14
     380:	11 97       	sbiw	r26, 0x01	; 1
     382:	93 83       	std	Z+3, r25	; 0x03
     384:	82 83       	std	Z+2, r24	; 0x02
     386:	15 83       	std	Z+5, r17	; 0x05
     388:	04 83       	std	Z+4, r16	; 0x04
     38a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <printf>
{
	struct timer *cp;
	int		total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp -> link) {
     38e:	0c 84       	ldd	r0, Y+12	; 0x0c
     390:	dd 85       	ldd	r29, Y+13	; 0x0d
     392:	c0 2d       	mov	r28, r0
     394:	8d b7       	in	r24, 0x3d	; 61
     396:	9e b7       	in	r25, 0x3e	; 62
     398:	06 96       	adiw	r24, 0x06	; 6
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	9e bf       	out	0x3e, r25	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	8d bf       	out	0x3d, r24	; 61
     3a4:	20 97       	sbiw	r28, 0x00	; 0
     3a6:	f1 f6       	brne	.-68     	; 0x364 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     3a8:	8a e0       	ldi	r24, 0x0A	; 10
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 fd 06 	call	0xdfa	; 0xdfa <putchar>
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	ef 90       	pop	r14
     3bc:	08 95       	ret

000003be <free_timer>:

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     3be:	09 c0       	rjmp	.+18     	; 0x3d2 <free_timer+0x14>
		cp = Thead;
		Thead = cp -> link;
     3c0:	fc 01       	movw	r30, r24
     3c2:	24 85       	ldd	r18, Z+12	; 0x0c
     3c4:	35 85       	ldd	r19, Z+13	; 0x0d
     3c6:	30 93 b1 02 	sts	0x02B1, r19
     3ca:	20 93 b0 02 	sts	0x02B0, r18
		free(cp);
     3ce:	0e 94 c3 05 	call	0xb86	; 0xb86 <free>
}

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     3d2:	80 91 b0 02 	lds	r24, 0x02B0
     3d6:	90 91 b1 02 	lds	r25, 0x02B1
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	89 f7       	brne	.-30     	; 0x3c0 <free_timer+0x2>
		cp = Thead;
		Thead = cp -> link;
		free(cp);
	}
}
     3de:	08 95       	ret

000003e0 <app_timer>:

void app_timer(char *ap)
{
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	62 97       	sbiw	r28, 0x12	; 18
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf( ">> ");
     3f8:	0b e0       	ldi	r16, 0x0B	; 11
     3fa:	12 e0       	ldi	r17, 0x02	; 2
     3fc:	0f 92       	push	r0
     3fe:	0f 92       	push	r0
     400:	ed b7       	in	r30, 0x3d	; 61
     402:	fe b7       	in	r31, 0x3e	; 62
     404:	12 83       	std	Z+2, r17	; 0x02
     406:	01 83       	std	Z+1, r16	; 0x01
     408:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) ==0)
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	40 91 43 03 	lds	r20, 0x0343
     414:	50 91 44 03 	lds	r21, 0x0344
     418:	ce 01       	movw	r24, r28
     41a:	01 96       	adiw	r24, 0x01	; 1
     41c:	68 e0       	ldi	r22, 0x08	; 8
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fgets>
     424:	00 97       	sbiw	r24, 0x00	; 0
     426:	61 f0       	breq	.+24     	; 0x440 <app_timer+0x60>
     428:	ce 01       	movw	r24, r28
     42a:	01 96       	adiw	r24, 0x01	; 1
     42c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <atoi>
     430:	bc 01       	movw	r22, r24
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	29 f0       	breq	.+10     	; 0x440 <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     436:	ce 01       	movw	r24, r28
     438:	09 96       	adiw	r24, 0x09	; 9
     43a:	0e 94 2a 01 	call	0x254	; 0x254 <insert_timer>
	}
     43e:	de cf       	rjmp	.-68     	; 0x3fc <app_timer+0x1c>
	tour_timer();
     440:	0e 94 9d 01 	call	0x33a	; 0x33a <tour_timer>
	free_timer();
     444:	0e 94 df 01 	call	0x3be	; 0x3be <free_timer>
}
     448:	62 96       	adiw	r28, 0x12	; 18
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	de bf       	out	0x3e, r29	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	cd bf       	out	0x3d, r28	; 61
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	08 95       	ret

0000045e <__vector_27>:
	printf( "logout, good bye !!!\n");
	while(1); return 0;
}

ISR(USART0_TX_vect)
{
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	0b b6       	in	r0, 0x3b	; 59
     468:	0f 92       	push	r0
     46a:	11 24       	eor	r1, r1
     46c:	2f 93       	push	r18
     46e:	3f 93       	push	r19
     470:	4f 93       	push	r20
     472:	5f 93       	push	r21
     474:	6f 93       	push	r22
     476:	7f 93       	push	r23
     478:	8f 93       	push	r24
     47a:	9f 93       	push	r25
     47c:	af 93       	push	r26
     47e:	bf 93       	push	r27
     480:	ef 93       	push	r30
     482:	ff 93       	push	r31
	char	ch;

	if((ch = qo_delete()) == 0)
     484:	0e 94 08 01 	call	0x210	; 0x210 <qo_delete>
     488:	88 23       	and	r24, r24
     48a:	19 f4       	brne	.+6      	; 0x492 <__vector_27+0x34>
		uart_busy = 0;
     48c:	10 92 3e 03 	sts	0x033E, r1
     490:	02 c0       	rjmp	.+4      	; 0x496 <__vector_27+0x38>
	else
		UDR0 = ch;
     492:	80 93 c6 00 	sts	0x00C6, r24
}
     496:	ff 91       	pop	r31
     498:	ef 91       	pop	r30
     49a:	bf 91       	pop	r27
     49c:	af 91       	pop	r26
     49e:	9f 91       	pop	r25
     4a0:	8f 91       	pop	r24
     4a2:	7f 91       	pop	r23
     4a4:	6f 91       	pop	r22
     4a6:	5f 91       	pop	r21
     4a8:	4f 91       	pop	r20
     4aa:	3f 91       	pop	r19
     4ac:	2f 91       	pop	r18
     4ae:	0f 90       	pop	r0
     4b0:	0b be       	out	0x3b, r0	; 59
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <__vector_25>:

ISR(USART0_RX_vect)
{
     4bc:	1f 92       	push	r1
     4be:	0f 92       	push	r0
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	0f 92       	push	r0
     4c4:	0b b6       	in	r0, 0x3b	; 59
     4c6:	0f 92       	push	r0
     4c8:	11 24       	eor	r1, r1
     4ca:	2f 93       	push	r18
     4cc:	3f 93       	push	r19
     4ce:	4f 93       	push	r20
     4d0:	5f 93       	push	r21
     4d2:	6f 93       	push	r22
     4d4:	7f 93       	push	r23
     4d6:	8f 93       	push	r24
     4d8:	9f 93       	push	r25
     4da:	af 93       	push	r26
     4dc:	bf 93       	push	r27
     4de:	cf 93       	push	r28
     4e0:	ef 93       	push	r30
     4e2:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     4e4:	c0 91 c6 00 	lds	r28, 0x00C6
	if ( ch != E0T) {
     4e8:	c4 30       	cpi	r28, 0x04	; 4
     4ea:	31 f0       	breq	.+12     	; 0x4f8 <__vector_25+0x3c>
		if(ch == '\r') ch = '\n';
     4ec:	cd 30       	cpi	r28, 0x0D	; 13
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <__vector_25+0x36>
     4f0:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     4f2:	8c 2f       	mov	r24, r28
     4f4:	0e 94 56 03 	call	0x6ac	; 0x6ac <uart_echo>
	}
	qi_insert(ch);
     4f8:	8c 2f       	mov	r24, r28
     4fa:	0e 94 a7 00 	call	0x14e	; 0x14e <qi_insert>
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	cf 91       	pop	r28
     504:	bf 91       	pop	r27
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	7f 91       	pop	r23
     50e:	6f 91       	pop	r22
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	0f 90       	pop	r0
     51a:	0b be       	out	0x3b, r0	; 59
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <is_prime>:

int is_prime(int n) {
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	fc 01       	movw	r30, r24
	int i;
	for( i = 2; i <= n/2; i++)
     52c:	62 e0       	ldi	r22, 0x02	; 2
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	0e 94 06 05 	call	0xa0c	; 0xa0c <__divmodhi4>
     534:	eb 01       	movw	r28, r22
     536:	22 e0       	ldi	r18, 0x02	; 2
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	08 c0       	rjmp	.+16     	; 0x54c <is_prime+0x26>
		if((n%i) == 0)
     53c:	cf 01       	movw	r24, r30
     53e:	b9 01       	movw	r22, r18
     540:	0e 94 06 05 	call	0xa0c	; 0xa0c <__divmodhi4>
     544:	00 97       	sbiw	r24, 0x00	; 0
     546:	41 f0       	breq	.+16     	; 0x558 <is_prime+0x32>
	qi_insert(ch);
}

int is_prime(int n) {
	int i;
	for( i = 2; i <= n/2; i++)
     548:	2f 5f       	subi	r18, 0xFF	; 255
     54a:	3f 4f       	sbci	r19, 0xFF	; 255
     54c:	c2 17       	cp	r28, r18
     54e:	d3 07       	cpc	r29, r19
     550:	ac f7       	brge	.-22     	; 0x53c <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	02 c0       	rjmp	.+4      	; 0x55c <is_prime+0x36>

int is_prime(int n) {
	int i;
	for( i = 2; i <= n/2; i++)
		if((n%i) == 0)
			return 0;
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <app_prime>:

void app_prime(char *ap)
{
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     572:	00 97       	sbiw	r24, 0x00	; 0
     574:	21 f0       	breq	.+8      	; 0x57e <app_prime+0x1c>
     576:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <atoi>
     57a:	7c 01       	movw	r14, r24
     57c:	04 c0       	rjmp	.+8      	; 0x586 <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     57e:	90 ed       	ldi	r25, 0xD0	; 208
     580:	e9 2e       	mov	r14, r25
     582:	97 e0       	ldi	r25, 0x07	; 7
     584:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     586:	c2 e0       	ldi	r28, 0x02	; 2
     588:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     58a:	00 e0       	ldi	r16, 0x00	; 0
     58c:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
		if(is_prime(n)) {
			count++;
			printf( "%d is a prime. " "number !!!\n", n);
     58e:	8f e0       	ldi	r24, 0x0F	; 15
     590:	c8 2e       	mov	r12, r24
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     596:	16 c0       	rjmp	.+44     	; 0x5c4 <app_prime+0x62>
		if(is_prime(n)) {
     598:	ce 01       	movw	r24, r28
     59a:	0e 94 93 02 	call	0x526	; 0x526 <is_prime>
     59e:	00 97       	sbiw	r24, 0x00	; 0
     5a0:	81 f0       	breq	.+32     	; 0x5c2 <app_prime+0x60>
			count++;
     5a2:	0f 5f       	subi	r16, 0xFF	; 255
     5a4:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime. " "number !!!\n", n);
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <app_prime+0x46>
     5a8:	0f 92       	push	r0
     5aa:	ed b7       	in	r30, 0x3d	; 61
     5ac:	fe b7       	in	r31, 0x3e	; 62
     5ae:	d2 82       	std	Z+2, r13	; 0x02
     5b0:	c1 82       	std	Z+1, r12	; 0x01
     5b2:	d4 83       	std	Z+4, r29	; 0x04
     5b4:	c3 83       	std	Z+3, r28	; 0x03
     5b6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <printf>
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     5c2:	21 96       	adiw	r28, 0x01	; 1
     5c4:	ec 16       	cp	r14, r28
     5c6:	fd 06       	cpc	r15, r29
     5c8:	3c f7       	brge	.-50     	; 0x598 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf( "%d is a prime. " "number !!!\n", n);
		}
	}
	printf("count = %d \n", count);
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <app_prime+0x6a>
     5cc:	0f 92       	push	r0
     5ce:	8a e2       	ldi	r24, 0x2A	; 42
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	ed b7       	in	r30, 0x3d	; 61
     5d4:	fe b7       	in	r31, 0x3e	; 62
     5d6:	92 83       	std	Z+2, r25	; 0x02
     5d8:	81 83       	std	Z+1, r24	; 0x01
     5da:	14 83       	std	Z+4, r17	; 0x04
     5dc:	03 83       	std	Z+3, r16	; 0x03
     5de:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <printf>
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
}
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	df 90       	pop	r13
     5f8:	cf 90       	pop	r12
     5fa:	08 95       	ret

000005fc <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     5fc:	f8 94       	cli
		ch = qi_delete();
     5fe:	0e 94 c9 00 	call	0x192	; 0x192 <qi_delete>
		sei();
     602:	78 94       	sei
	} while (ch == 0);
     604:	88 23       	and	r24, r24
     606:	d1 f3       	breq	.-12     	; 0x5fc <uart_getchar>

	if (ch == E0T) return -1;
     608:	84 30       	cpi	r24, 0x04	; 4
     60a:	11 f0       	breq	.+4      	; 0x610 <uart_getchar+0x14>
	else			return (ch);
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	9f ef       	ldi	r25, 0xFF	; 255
	else			return (ch);
}
     614:	08 95       	ret

00000616 <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     616:	cf 93       	push	r28
     618:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     61a:	8a 30       	cpi	r24, 0x0A	; 10
     61c:	19 f4       	brne	.+6      	; 0x624 <uart_putchar+0xe>
     61e:	8d e0       	ldi	r24, 0x0D	; 13
     620:	0e 94 0b 03 	call	0x616	; 0x616 <uart_putchar>

	cli();
     624:	f8 94       	cli
	if(!uart_busy) {
     626:	80 91 3e 03 	lds	r24, 0x033E
     62a:	88 23       	and	r24, r24
     62c:	61 f4       	brne	.+24     	; 0x646 <uart_putchar+0x30>
		UDR0 = ch;
     62e:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	80 93 3e 03 	sts	0x033E, r24
     638:	0b c0       	rjmp	.+22     	; 0x650 <uart_putchar+0x3a>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     63a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63c:	81 e2       	ldi	r24, 0x21	; 33
     63e:	8a 95       	dec	r24
     640:	f1 f7       	brne	.-4      	; 0x63e <uart_putchar+0x28>
     642:	00 00       	nop
			_delay_us(100);
			cli();
     644:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     646:	8c 2f       	mov	r24, r28
     648:	0e 94 e6 00 	call	0x1cc	; 0x1cc <qo_insert>
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	a9 f3       	breq	.-22     	; 0x63a <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     650:	78 94       	sei
	return 1;
}
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <uart_init>:
FILE Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     65a:	82 e8       	ldi	r24, 0x82	; 130
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	90 93 44 03 	sts	0x0344, r25
     662:	80 93 43 03 	sts	0x0343, r24
     666:	80 e9       	ldi	r24, 0x90	; 144
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	90 93 46 03 	sts	0x0346, r25
     66e:	80 93 45 03 	sts	0x0345, r24
	q_init();
     672:	0e 94 96 00 	call	0x12c	; 0x12c <q_init>
	uart_busy = 0;
     676:	10 92 3e 03 	sts	0x033E, r1

	UBRR0H = 0x00; UBRR0L = 0x07;
     67a:	10 92 c5 00 	sts	0x00C5, r1
     67e:	87 e0       	ldi	r24, 0x07	; 7
     680:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     684:	e0 ec       	ldi	r30, 0xC0	; 192
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	80 81       	ld	r24, Z
     68a:	82 60       	ori	r24, 0x02	; 2
     68c:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     68e:	e1 ec       	ldi	r30, 0xC1	; 193
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	88 60       	ori	r24, 0x08	; 8
     696:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     698:	80 81       	ld	r24, Z
     69a:	80 64       	ori	r24, 0x40	; 64
     69c:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     69e:	80 81       	ld	r24, Z
     6a0:	80 61       	ori	r24, 0x10	; 16
     6a2:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     6a4:	80 81       	ld	r24, Z
     6a6:	80 68       	ori	r24, 0x80	; 128
     6a8:	80 83       	st	Z, r24
}
     6aa:	08 95       	ret

000006ac <uart_echo>:
	if (ch == E0T) return -1;
	else			return (ch);
}

void uart_echo(char ch)
{
     6ac:	cf 93       	push	r28
     6ae:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     6b0:	8a 30       	cpi	r24, 0x0A	; 10
     6b2:	19 f4       	brne	.+6      	; 0x6ba <uart_echo+0xe>
     6b4:	8d e0       	ldi	r24, 0x0D	; 13
     6b6:	0e 94 56 03 	call	0x6ac	; 0x6ac <uart_echo>
	if (!uart_busy) {
     6ba:	80 91 3e 03 	lds	r24, 0x033E
     6be:	88 23       	and	r24, r24
     6c0:	31 f4       	brne	.+12     	; 0x6ce <uart_echo+0x22>
		UDR0 = ch;
     6c2:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 3e 03 	sts	0x033E, r24
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     6ce:	8c 2f       	mov	r24, r28
     6d0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <qo_insert>
}
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     6d8:	84 e0       	ldi	r24, 0x04	; 4
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <malloc>
	return(cp);
}
     6e0:	08 95       	ret

000006e2 <free_node>:

void free_node(struct node *np)
{
	free(np);
     6e2:	0e 94 c3 05 	call	0xb86	; 0xb86 <free>
}
     6e6:	08 95       	ret

000006e8 <insert_node_head>:

void insert_node_head(struct node *np)
{
     6e8:	fc 01       	movw	r30, r24
	if(!Head) {
     6ea:	80 91 b2 02 	lds	r24, 0x02B2
     6ee:	90 91 b3 02 	lds	r25, 0x02B3
     6f2:	00 97       	sbiw	r24, 0x00	; 0
     6f4:	39 f4       	brne	.+14     	; 0x704 <insert_node_head+0x1c>
		Head = np;
     6f6:	f0 93 b3 02 	sts	0x02B3, r31
     6fa:	e0 93 b2 02 	sts	0x02B2, r30
		np -> link = NULL;
     6fe:	13 82       	std	Z+3, r1	; 0x03
     700:	12 82       	std	Z+2, r1	; 0x02
     702:	08 95       	ret
	}
	else {
		np -> link = Head;
     704:	93 83       	std	Z+3, r25	; 0x03
     706:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     708:	f0 93 b3 02 	sts	0x02B3, r31
     70c:	e0 93 b2 02 	sts	0x02B2, r30
     710:	08 95       	ret

00000712 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     712:	e0 91 b2 02 	lds	r30, 0x02B2
     716:	f0 91 b3 02 	lds	r31, 0x02B3
     71a:	30 97       	sbiw	r30, 0x00	; 0
     71c:	31 f4       	brne	.+12     	; 0x72a <insert_node_tail+0x18>
		Head = np;
     71e:	90 93 b3 02 	sts	0x02B3, r25
     722:	80 93 b2 02 	sts	0x02B2, r24
     726:	08 c0       	rjmp	.+16     	; 0x738 <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     728:	f9 01       	movw	r30, r18
     72a:	22 81       	ldd	r18, Z+2	; 0x02
     72c:	33 81       	ldd	r19, Z+3	; 0x03
     72e:	21 15       	cp	r18, r1
     730:	31 05       	cpc	r19, r1
     732:	d1 f7       	brne	.-12     	; 0x728 <insert_node_tail+0x16>
		cp -> link = np;
     734:	93 83       	std	Z+3, r25	; 0x03
     736:	82 83       	std	Z+2, r24	; 0x02
	}
	np -> link = NULL;
     738:	fc 01       	movw	r30, r24
     73a:	13 82       	std	Z+3, r1	; 0x03
     73c:	12 82       	std	Z+2, r1	; 0x02
}
     73e:	08 95       	ret

00000740 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     746:	20 91 b2 02 	lds	r18, 0x02B2
     74a:	30 91 b3 02 	lds	r19, 0x02B3
     74e:	21 15       	cp	r18, r1
     750:	31 05       	cpc	r19, r1
     752:	31 f0       	breq	.+12     	; 0x760 <insert_node_ascn+0x20>
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     754:	40 81       	ld	r20, Z
     756:	51 81       	ldd	r21, Z+1	; 0x01
     758:	d9 01       	movw	r26, r18
     75a:	c0 e0       	ldi	r28, 0x00	; 0
     75c:	d0 e0       	ldi	r29, 0x00	; 0
     75e:	0f c0       	rjmp	.+30     	; 0x77e <insert_node_ascn+0x3e>

void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     760:	90 93 b3 02 	sts	0x02B3, r25
     764:	80 93 b2 02 	sts	0x02B2, r24
		np -> link = NULL;
     768:	13 82       	std	Z+3, r1	; 0x03
     76a:	12 82       	std	Z+2, r1	; 0x02
     76c:	1d c0       	rjmp	.+58     	; 0x7a8 <insert_node_ascn+0x68>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
		pp = cp, cp = cp->link);
     76e:	12 96       	adiw	r26, 0x02	; 2
     770:	8d 91       	ld	r24, X+
     772:	9c 91       	ld	r25, X
     774:	13 97       	sbiw	r26, 0x03	; 3
	if(!Head) {
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     776:	ed 01       	movw	r28, r26
     778:	00 97       	sbiw	r24, 0x00	; 0
     77a:	39 f0       	breq	.+14     	; 0x78a <insert_node_ascn+0x4a>
		pp = cp, cp = cp->link);
     77c:	dc 01       	movw	r26, r24
	if(!Head) {
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     77e:	8d 91       	ld	r24, X+
     780:	9c 91       	ld	r25, X
     782:	11 97       	sbiw	r26, 0x01	; 1
     784:	84 17       	cp	r24, r20
     786:	95 07       	cpc	r25, r21
     788:	94 f3       	brlt	.-28     	; 0x76e <insert_node_ascn+0x2e>
		pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     78a:	20 97       	sbiw	r28, 0x00	; 0
     78c:	39 f4       	brne	.+14     	; 0x79c <insert_node_ascn+0x5c>
			np -> link = Head;
     78e:	33 83       	std	Z+3, r19	; 0x03
     790:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     792:	f0 93 b3 02 	sts	0x02B3, r31
     796:	e0 93 b2 02 	sts	0x02B2, r30
     79a:	06 c0       	rjmp	.+12     	; 0x7a8 <insert_node_ascn+0x68>
		} else {
			np -> link = pp -> link;
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	9b 81       	ldd	r25, Y+3	; 0x03
     7a0:	93 83       	std	Z+3, r25	; 0x03
     7a2:	82 83       	std	Z+2, r24	; 0x02
			pp -> link = np;
     7a4:	fb 83       	std	Y+3, r31	; 0x03
     7a6:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <insert_node_desc>:

void insert_node_desc(struct node *np) {
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	fc 01       	movw	r30, r24
   struct node *cp, *pp;

   if(!Head) {
     7b4:	20 91 b2 02 	lds	r18, 0x02B2
     7b8:	30 91 b3 02 	lds	r19, 0x02B3
     7bc:	21 15       	cp	r18, r1
     7be:	31 05       	cpc	r19, r1
     7c0:	31 f0       	breq	.+12     	; 0x7ce <insert_node_desc+0x20>
      Head = np;
      np->link = NULL;
   } else {
      for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     7c2:	40 81       	ld	r20, Z
     7c4:	51 81       	ldd	r21, Z+1	; 0x01
     7c6:	d9 01       	movw	r26, r18
     7c8:	c0 e0       	ldi	r28, 0x00	; 0
     7ca:	d0 e0       	ldi	r29, 0x00	; 0
     7cc:	0f c0       	rjmp	.+30     	; 0x7ec <insert_node_desc+0x3e>

void insert_node_desc(struct node *np) {
   struct node *cp, *pp;

   if(!Head) {
      Head = np;
     7ce:	90 93 b3 02 	sts	0x02B3, r25
     7d2:	80 93 b2 02 	sts	0x02B2, r24
      np->link = NULL;
     7d6:	13 82       	std	Z+3, r1	; 0x03
     7d8:	12 82       	std	Z+2, r1	; 0x02
     7da:	1d c0       	rjmp	.+58     	; 0x816 <insert_node_desc+0x68>
   } else {
      for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     7dc:	12 96       	adiw	r26, 0x02	; 2
     7de:	8d 91       	ld	r24, X+
     7e0:	9c 91       	ld	r25, X
     7e2:	13 97       	sbiw	r26, 0x03	; 3
     7e4:	ed 01       	movw	r28, r26
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	39 f0       	breq	.+14     	; 0x7f8 <insert_node_desc+0x4a>
     7ea:	dc 01       	movw	r26, r24
     7ec:	8d 91       	ld	r24, X+
     7ee:	9c 91       	ld	r25, X
     7f0:	11 97       	sbiw	r26, 0x01	; 1
     7f2:	48 17       	cp	r20, r24
     7f4:	59 07       	cpc	r21, r25
     7f6:	94 f3       	brlt	.-28     	; 0x7dc <insert_node_desc+0x2e>

      if(pp == NULL) {
     7f8:	20 97       	sbiw	r28, 0x00	; 0
     7fa:	39 f4       	brne	.+14     	; 0x80a <insert_node_desc+0x5c>
         np->link = Head;
     7fc:	33 83       	std	Z+3, r19	; 0x03
     7fe:	22 83       	std	Z+2, r18	; 0x02
         Head = np;
     800:	f0 93 b3 02 	sts	0x02B3, r31
     804:	e0 93 b2 02 	sts	0x02B2, r30
     808:	06 c0       	rjmp	.+12     	; 0x816 <insert_node_desc+0x68>
      } else {
         np->link = pp->link;
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	9b 81       	ldd	r25, Y+3	; 0x03
     80e:	93 83       	std	Z+3, r25	; 0x03
     810:	82 83       	std	Z+2, r24	; 0x02
         pp->link = np;
     812:	fb 83       	std	Y+3, r31	; 0x03
     814:	ea 83       	std	Y+2, r30	; 0x02
      }
   }
}
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <tour_list>:

void tour_list() {
     81c:	0f 93       	push	r16
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
	struct node *cp;
	printf("\n");
     824:	8a e0       	ldi	r24, 0x0A	; 10
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 fd 06 	call	0xdfa	; 0xdfa <putchar>
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     82c:	c0 91 b2 02 	lds	r28, 0x02B2
     830:	d0 91 b3 02 	lds	r29, 0x02B3
		printf("-->%c ", cp-> data);
     834:	0e e9       	ldi	r16, 0x9E	; 158
     836:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;
	printf("\n");
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     838:	13 c0       	rjmp	.+38     	; 0x860 <tour_list+0x44>
		printf("-->%c ", cp-> data);
     83a:	00 d0       	rcall	.+0      	; 0x83c <tour_list+0x20>
     83c:	0f 92       	push	r0
     83e:	ed b7       	in	r30, 0x3d	; 61
     840:	fe b7       	in	r31, 0x3e	; 62
     842:	12 83       	std	Z+2, r17	; 0x02
     844:	01 83       	std	Z+1, r16	; 0x01
     846:	88 81       	ld	r24, Y
     848:	99 81       	ldd	r25, Y+1	; 0x01
     84a:	94 83       	std	Z+4, r25	; 0x04
     84c:	83 83       	std	Z+3, r24	; 0x03
     84e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <printf>

void tour_list() {
	struct node *cp;
	printf("\n");
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     852:	0a 80       	ldd	r0, Y+2	; 0x02
     854:	db 81       	ldd	r29, Y+3	; 0x03
     856:	c0 2d       	mov	r28, r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	20 97       	sbiw	r28, 0x00	; 0
     862:	59 f7       	brne	.-42     	; 0x83a <tour_list+0x1e>
		printf("-->%c ", cp-> data);
	printf("\n");
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 fd 06 	call	0xdfa	; 0xdfa <putchar>
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	08 95       	ret

00000876 <free_list>:

void free_list()
{
	struct node *cp;
	
	for(; Head != NULL; ) {
     876:	09 c0       	rjmp	.+18     	; 0x88a <free_list+0x14>
		cp = Head;
		Head = cp->link;
     878:	fc 01       	movw	r30, r24
     87a:	22 81       	ldd	r18, Z+2	; 0x02
     87c:	33 81       	ldd	r19, Z+3	; 0x03
     87e:	30 93 b3 02 	sts	0x02B3, r19
     882:	20 93 b2 02 	sts	0x02B2, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     886:	0e 94 c3 05 	call	0xb86	; 0xb86 <free>

void free_list()
{
	struct node *cp;
	
	for(; Head != NULL; ) {
     88a:	80 91 b2 02 	lds	r24, 0x02B2
     88e:	90 91 b3 02 	lds	r25, 0x02B3
     892:	00 97       	sbiw	r24, 0x00	; 0
     894:	89 f7       	brne	.-30     	; 0x878 <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}	
     896:	08 95       	ret

00000898 <app_list>:

void app_list(char *ap)
{
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	28 97       	sbiw	r28, 0x08	; 8
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a' ;
	struct node *np;

	if (ap) how = *ap;
     8b2:	00 97       	sbiw	r24, 0x00	; 0
     8b4:	19 f0       	breq	.+6      	; 0x8bc <app_list+0x24>
     8b6:	fc 01       	movw	r30, r24
     8b8:	10 81       	ld	r17, Z
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <app_list+0x26>
	}
}	

void app_list(char *ap)
{
	char buf[8], how = 'a' ;
     8bc:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf( " > ");
     8be:	85 ea       	ldi	r24, 0xA5	; 165
     8c0:	e8 2e       	mov	r14, r24
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	f8 2e       	mov	r15, r24
     8c6:	0f 92       	push	r0
     8c8:	0f 92       	push	r0
     8ca:	ed b7       	in	r30, 0x3d	; 61
     8cc:	fe b7       	in	r31, 0x3e	; 62
     8ce:	f2 82       	std	Z+2, r15	; 0x02
     8d0:	e1 82       	std	Z+1, r14	; 0x01
     8d2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <printf>
		if(fgets(buf, 8, stdin) == NULL)
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	40 91 43 03 	lds	r20, 0x0343
     8de:	50 91 44 03 	lds	r21, 0x0344
     8e2:	ce 01       	movw	r24, r28
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	68 e0       	ldi	r22, 0x08	; 8
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fgets>
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	c9 f0       	breq	.+50     	; 0x924 <app_list+0x8c>
			break;
		np = get_node();
     8f2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <get_node>
		np -> data = buf[0];
     8f6:	29 81       	ldd	r18, Y+1	; 0x01
     8f8:	fc 01       	movw	r30, r24
     8fa:	20 83       	st	Z, r18
     8fc:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     8fe:	18 36       	cpi	r17, 0x68	; 104
     900:	29 f0       	breq	.+10     	; 0x90c <app_list+0x74>
     902:	14 37       	cpi	r17, 0x74	; 116
     904:	31 f0       	breq	.+12     	; 0x912 <app_list+0x7a>
     906:	14 36       	cpi	r17, 0x64	; 100
     908:	51 f4       	brne	.+20     	; 0x91e <app_list+0x86>
     90a:	06 c0       	rjmp	.+12     	; 0x918 <app_list+0x80>
			case 'h' : insert_node_head(np); break;
     90c:	0e 94 74 03 	call	0x6e8	; 0x6e8 <insert_node_head>
     910:	da cf       	rjmp	.-76     	; 0x8c6 <app_list+0x2e>
			case 't' : insert_node_tail(np); break;
     912:	0e 94 89 03 	call	0x712	; 0x712 <insert_node_tail>
     916:	d7 cf       	rjmp	.-82     	; 0x8c6 <app_list+0x2e>
			case 'd' : insert_node_desc(np); break;
     918:	0e 94 d7 03 	call	0x7ae	; 0x7ae <insert_node_desc>
     91c:	d4 cf       	rjmp	.-88     	; 0x8c6 <app_list+0x2e>
			default : insert_node_ascn(np);
     91e:	0e 94 a0 03 	call	0x740	; 0x740 <insert_node_ascn>
     922:	d1 cf       	rjmp	.-94     	; 0x8c6 <app_list+0x2e>
		}
	}
	tour_list();
     924:	0e 94 0e 04 	call	0x81c	; 0x81c <tour_list>
	free_list();
     928:	0e 94 3b 04 	call	0x876	; 0x876 <free_list>
}
     92c:	28 96       	adiw	r28, 0x08	; 8
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <main>:

int is_prime(int n);
void app_prime(char *ap);

int main()
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	c0 58       	subi	r28, 0x80	; 128
     94e:	d0 40       	sbci	r29, 0x00	; 0
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;

	uart_init();
     95a:	0e 94 2d 03 	call	0x65a	; 0x65a <uart_init>
	sei();
     95e:	78 94       	sei
	while(1) {
		printf("$ ");
     960:	27 e3       	ldi	r18, 0x37	; 55
     962:	c2 2e       	mov	r12, r18
     964:	22 e0       	ldi	r18, 0x02	; 2
     966:	d2 2e       	mov	r13, r18
     968:	0f 92       	push	r0
     96a:	0f 92       	push	r0
     96c:	ed b7       	in	r30, 0x3d	; 61
     96e:	fe b7       	in	r31, 0x3e	; 62
     970:	d2 82       	std	Z+2, r13	; 0x02
     972:	c1 82       	std	Z+1, r12	; 0x01
     974:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <printf>
		if (fgets(cmd, sizeof(cmd), stdin) == NULL)
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	40 91 43 03 	lds	r20, 0x0343
     980:	50 91 44 03 	lds	r21, 0x0344
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	60 e8       	ldi	r22, 0x80	; 128
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fgets>
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	b9 f1       	breq	.+110    	; 0xa02 <main+0xbe>
			break;
		if((cp = strtok(cmd, "\n\r\t    ")) == NULL) continue;
     994:	ce 01       	movw	r24, r28
     996:	01 96       	adiw	r24, 0x01	; 1
     998:	6a e3       	ldi	r22, 0x3A	; 58
     99a:	72 e0       	ldi	r23, 0x02	; 2
     99c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <strtok>
     9a0:	8c 01       	movw	r16, r24
     9a2:	00 97       	sbiw	r24, 0x00	; 0
     9a4:	09 f3       	breq	.-62     	; 0x968 <main+0x24>
		ap = strtok(NULL, "\n\r\t  ");
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	62 e4       	ldi	r22, 0x42	; 66
     9ac:	72 e0       	ldi	r23, 0x02	; 2
     9ae:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <strtok>
     9b2:	7c 01       	movw	r14, r24

		if(!strcmp(cmd, "prime")) app_prime(ap);
     9b4:	ce 01       	movw	r24, r28
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	68 e4       	ldi	r22, 0x48	; 72
     9ba:	72 e0       	ldi	r23, 0x02	; 2
     9bc:	0e 94 7f 06 	call	0xcfe	; 0xcfe <strcmp>
     9c0:	00 97       	sbiw	r24, 0x00	; 0
     9c2:	21 f4       	brne	.+8      	; 0x9cc <main+0x88>
     9c4:	c7 01       	movw	r24, r14
     9c6:	0e 94 b1 02 	call	0x562	; 0x562 <app_prime>
     9ca:	ce cf       	rjmp	.-100    	; 0x968 <main+0x24>
		else if (!strcmp(cp, "list" )) app_list(ap);
     9cc:	c8 01       	movw	r24, r16
     9ce:	6e e4       	ldi	r22, 0x4E	; 78
     9d0:	72 e0       	ldi	r23, 0x02	; 2
     9d2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <strcmp>
     9d6:	00 97       	sbiw	r24, 0x00	; 0
     9d8:	21 f4       	brne	.+8      	; 0x9e2 <main+0x9e>
     9da:	c7 01       	movw	r24, r14
     9dc:	0e 94 4c 04 	call	0x898	; 0x898 <app_list>
     9e0:	c3 cf       	rjmp	.-122    	; 0x968 <main+0x24>
		else if (!strcmp(cp, "timer" )) app_timer(ap);
     9e2:	c8 01       	movw	r24, r16
     9e4:	63 e5       	ldi	r22, 0x53	; 83
     9e6:	72 e0       	ldi	r23, 0x02	; 2
     9e8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <strcmp>
     9ec:	00 97       	sbiw	r24, 0x00	; 0
     9ee:	21 f4       	brne	.+8      	; 0x9f8 <main+0xb4>
     9f0:	c7 01       	movw	r24, r14
     9f2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <app_timer>
     9f6:	b8 cf       	rjmp	.-144    	; 0x968 <main+0x24>
		else						printf("Unknown command ...\n");
     9f8:	89 e5       	ldi	r24, 0x59	; 89
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	0e 94 04 07 	call	0xe08	; 0xe08 <puts>
     a00:	b3 cf       	rjmp	.-154    	; 0x968 <main+0x24>
	}
	printf( "logout, good bye !!!\n");
     a02:	8d e6       	ldi	r24, 0x6D	; 109
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	0e 94 04 07 	call	0xe08	; 0xe08 <puts>
     a0a:	ff cf       	rjmp	.-2      	; 0xa0a <main+0xc6>

00000a0c <__divmodhi4>:
     a0c:	97 fb       	bst	r25, 7
     a0e:	09 2e       	mov	r0, r25
     a10:	07 26       	eor	r0, r23
     a12:	0a d0       	rcall	.+20     	; 0xa28 <__divmodhi4_neg1>
     a14:	77 fd       	sbrc	r23, 7
     a16:	04 d0       	rcall	.+8      	; 0xa20 <__divmodhi4_neg2>
     a18:	0c d0       	rcall	.+24     	; 0xa32 <__udivmodhi4>
     a1a:	06 d0       	rcall	.+12     	; 0xa28 <__divmodhi4_neg1>
     a1c:	00 20       	and	r0, r0
     a1e:	1a f4       	brpl	.+6      	; 0xa26 <__divmodhi4_exit>

00000a20 <__divmodhi4_neg2>:
     a20:	70 95       	com	r23
     a22:	61 95       	neg	r22
     a24:	7f 4f       	sbci	r23, 0xFF	; 255

00000a26 <__divmodhi4_exit>:
     a26:	08 95       	ret

00000a28 <__divmodhi4_neg1>:
     a28:	f6 f7       	brtc	.-4      	; 0xa26 <__divmodhi4_exit>
     a2a:	90 95       	com	r25
     a2c:	81 95       	neg	r24
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	08 95       	ret

00000a32 <__udivmodhi4>:
     a32:	aa 1b       	sub	r26, r26
     a34:	bb 1b       	sub	r27, r27
     a36:	51 e1       	ldi	r21, 0x11	; 17
     a38:	07 c0       	rjmp	.+14     	; 0xa48 <__udivmodhi4_ep>

00000a3a <__udivmodhi4_loop>:
     a3a:	aa 1f       	adc	r26, r26
     a3c:	bb 1f       	adc	r27, r27
     a3e:	a6 17       	cp	r26, r22
     a40:	b7 07       	cpc	r27, r23
     a42:	10 f0       	brcs	.+4      	; 0xa48 <__udivmodhi4_ep>
     a44:	a6 1b       	sub	r26, r22
     a46:	b7 0b       	sbc	r27, r23

00000a48 <__udivmodhi4_ep>:
     a48:	88 1f       	adc	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	5a 95       	dec	r21
     a4e:	a9 f7       	brne	.-22     	; 0xa3a <__udivmodhi4_loop>
     a50:	80 95       	com	r24
     a52:	90 95       	com	r25
     a54:	bc 01       	movw	r22, r24
     a56:	cd 01       	movw	r24, r26
     a58:	08 95       	ret

00000a5a <malloc>:
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	ac 01       	movw	r20, r24
     a60:	82 30       	cpi	r24, 0x02	; 2
     a62:	91 05       	cpc	r25, r1
     a64:	10 f4       	brcc	.+4      	; 0xa6a <malloc+0x10>
     a66:	42 e0       	ldi	r20, 0x02	; 2
     a68:	50 e0       	ldi	r21, 0x00	; 0
     a6a:	e0 91 41 03 	lds	r30, 0x0341
     a6e:	f0 91 42 03 	lds	r31, 0x0342
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	a0 e0       	ldi	r26, 0x00	; 0
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	24 c0       	rjmp	.+72     	; 0xac4 <malloc+0x6a>
     a7c:	80 81       	ld	r24, Z
     a7e:	91 81       	ldd	r25, Z+1	; 0x01
     a80:	84 17       	cp	r24, r20
     a82:	95 07       	cpc	r25, r21
     a84:	d0 f0       	brcs	.+52     	; 0xaba <malloc+0x60>
     a86:	84 17       	cp	r24, r20
     a88:	95 07       	cpc	r25, r21
     a8a:	71 f4       	brne	.+28     	; 0xaa8 <malloc+0x4e>
     a8c:	82 81       	ldd	r24, Z+2	; 0x02
     a8e:	93 81       	ldd	r25, Z+3	; 0x03
     a90:	10 97       	sbiw	r26, 0x00	; 0
     a92:	29 f0       	breq	.+10     	; 0xa9e <malloc+0x44>
     a94:	13 96       	adiw	r26, 0x03	; 3
     a96:	9c 93       	st	X, r25
     a98:	8e 93       	st	-X, r24
     a9a:	12 97       	sbiw	r26, 0x02	; 2
     a9c:	2c c0       	rjmp	.+88     	; 0xaf6 <malloc+0x9c>
     a9e:	90 93 42 03 	sts	0x0342, r25
     aa2:	80 93 41 03 	sts	0x0341, r24
     aa6:	27 c0       	rjmp	.+78     	; 0xaf6 <malloc+0x9c>
     aa8:	21 15       	cp	r18, r1
     aaa:	31 05       	cpc	r19, r1
     aac:	19 f0       	breq	.+6      	; 0xab4 <malloc+0x5a>
     aae:	82 17       	cp	r24, r18
     ab0:	93 07       	cpc	r25, r19
     ab2:	18 f4       	brcc	.+6      	; 0xaba <malloc+0x60>
     ab4:	9c 01       	movw	r18, r24
     ab6:	bd 01       	movw	r22, r26
     ab8:	ef 01       	movw	r28, r30
     aba:	92 81       	ldd	r25, Z+2	; 0x02
     abc:	83 81       	ldd	r24, Z+3	; 0x03
     abe:	df 01       	movw	r26, r30
     ac0:	e9 2f       	mov	r30, r25
     ac2:	f8 2f       	mov	r31, r24
     ac4:	30 97       	sbiw	r30, 0x00	; 0
     ac6:	d1 f6       	brne	.-76     	; 0xa7c <malloc+0x22>
     ac8:	21 15       	cp	r18, r1
     aca:	31 05       	cpc	r19, r1
     acc:	f9 f0       	breq	.+62     	; 0xb0c <malloc+0xb2>
     ace:	c9 01       	movw	r24, r18
     ad0:	84 1b       	sub	r24, r20
     ad2:	95 0b       	sbc	r25, r21
     ad4:	84 30       	cpi	r24, 0x04	; 4
     ad6:	91 05       	cpc	r25, r1
     ad8:	80 f4       	brcc	.+32     	; 0xafa <malloc+0xa0>
     ada:	8a 81       	ldd	r24, Y+2	; 0x02
     adc:	9b 81       	ldd	r25, Y+3	; 0x03
     ade:	61 15       	cp	r22, r1
     ae0:	71 05       	cpc	r23, r1
     ae2:	21 f0       	breq	.+8      	; 0xaec <malloc+0x92>
     ae4:	fb 01       	movw	r30, r22
     ae6:	93 83       	std	Z+3, r25	; 0x03
     ae8:	82 83       	std	Z+2, r24	; 0x02
     aea:	04 c0       	rjmp	.+8      	; 0xaf4 <malloc+0x9a>
     aec:	90 93 42 03 	sts	0x0342, r25
     af0:	80 93 41 03 	sts	0x0341, r24
     af4:	fe 01       	movw	r30, r28
     af6:	32 96       	adiw	r30, 0x02	; 2
     af8:	42 c0       	rjmp	.+132    	; 0xb7e <malloc+0x124>
     afa:	fe 01       	movw	r30, r28
     afc:	e8 0f       	add	r30, r24
     afe:	f9 1f       	adc	r31, r25
     b00:	41 93       	st	Z+, r20
     b02:	51 93       	st	Z+, r21
     b04:	02 97       	sbiw	r24, 0x02	; 2
     b06:	99 83       	std	Y+1, r25	; 0x01
     b08:	88 83       	st	Y, r24
     b0a:	39 c0       	rjmp	.+114    	; 0xb7e <malloc+0x124>
     b0c:	80 91 3f 03 	lds	r24, 0x033F
     b10:	90 91 40 03 	lds	r25, 0x0340
     b14:	00 97       	sbiw	r24, 0x00	; 0
     b16:	41 f4       	brne	.+16     	; 0xb28 <malloc+0xce>
     b18:	80 91 ab 02 	lds	r24, 0x02AB
     b1c:	90 91 ac 02 	lds	r25, 0x02AC
     b20:	90 93 40 03 	sts	0x0340, r25
     b24:	80 93 3f 03 	sts	0x033F, r24
     b28:	20 91 a9 02 	lds	r18, 0x02A9
     b2c:	30 91 aa 02 	lds	r19, 0x02AA
     b30:	21 15       	cp	r18, r1
     b32:	31 05       	cpc	r19, r1
     b34:	41 f4       	brne	.+16     	; 0xb46 <malloc+0xec>
     b36:	2d b7       	in	r18, 0x3d	; 61
     b38:	3e b7       	in	r19, 0x3e	; 62
     b3a:	80 91 ad 02 	lds	r24, 0x02AD
     b3e:	90 91 ae 02 	lds	r25, 0x02AE
     b42:	28 1b       	sub	r18, r24
     b44:	39 0b       	sbc	r19, r25
     b46:	e0 91 3f 03 	lds	r30, 0x033F
     b4a:	f0 91 40 03 	lds	r31, 0x0340
     b4e:	e2 17       	cp	r30, r18
     b50:	f3 07       	cpc	r31, r19
     b52:	98 f4       	brcc	.+38     	; 0xb7a <malloc+0x120>
     b54:	2e 1b       	sub	r18, r30
     b56:	3f 0b       	sbc	r19, r31
     b58:	24 17       	cp	r18, r20
     b5a:	35 07       	cpc	r19, r21
     b5c:	70 f0       	brcs	.+28     	; 0xb7a <malloc+0x120>
     b5e:	ca 01       	movw	r24, r20
     b60:	02 96       	adiw	r24, 0x02	; 2
     b62:	28 17       	cp	r18, r24
     b64:	39 07       	cpc	r19, r25
     b66:	48 f0       	brcs	.+18     	; 0xb7a <malloc+0x120>
     b68:	8e 0f       	add	r24, r30
     b6a:	9f 1f       	adc	r25, r31
     b6c:	90 93 40 03 	sts	0x0340, r25
     b70:	80 93 3f 03 	sts	0x033F, r24
     b74:	41 93       	st	Z+, r20
     b76:	51 93       	st	Z+, r21
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <malloc+0x124>
     b7a:	e0 e0       	ldi	r30, 0x00	; 0
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	cf 01       	movw	r24, r30
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <free>:
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	9c 01       	movw	r18, r24
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	09 f4       	brne	.+2      	; 0xb96 <free+0x10>
     b94:	8c c0       	rjmp	.+280    	; 0xcae <free+0x128>
     b96:	dc 01       	movw	r26, r24
     b98:	12 97       	sbiw	r26, 0x02	; 2
     b9a:	13 96       	adiw	r26, 0x03	; 3
     b9c:	1c 92       	st	X, r1
     b9e:	1e 92       	st	-X, r1
     ba0:	12 97       	sbiw	r26, 0x02	; 2
     ba2:	60 91 41 03 	lds	r22, 0x0341
     ba6:	70 91 42 03 	lds	r23, 0x0342
     baa:	61 15       	cp	r22, r1
     bac:	71 05       	cpc	r23, r1
     bae:	89 f4       	brne	.+34     	; 0xbd2 <free+0x4c>
     bb0:	8d 91       	ld	r24, X+
     bb2:	9c 91       	ld	r25, X
     bb4:	11 97       	sbiw	r26, 0x01	; 1
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	20 91 3f 03 	lds	r18, 0x033F
     bbe:	30 91 40 03 	lds	r19, 0x0340
     bc2:	28 17       	cp	r18, r24
     bc4:	39 07       	cpc	r19, r25
     bc6:	69 f5       	brne	.+90     	; 0xc22 <free+0x9c>
     bc8:	b0 93 40 03 	sts	0x0340, r27
     bcc:	a0 93 3f 03 	sts	0x033F, r26
     bd0:	6e c0       	rjmp	.+220    	; 0xcae <free+0x128>
     bd2:	fb 01       	movw	r30, r22
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <free+0x56>
     bda:	fc 01       	movw	r30, r24
     bdc:	ea 17       	cp	r30, r26
     bde:	fb 07       	cpc	r31, r27
     be0:	30 f4       	brcc	.+12     	; 0xbee <free+0x68>
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	93 81       	ldd	r25, Z+3	; 0x03
     be6:	af 01       	movw	r20, r30
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	b9 f7       	brne	.-18     	; 0xbda <free+0x54>
     bec:	1f c0       	rjmp	.+62     	; 0xc2c <free+0xa6>
     bee:	e9 01       	movw	r28, r18
     bf0:	22 97       	sbiw	r28, 0x02	; 2
     bf2:	fb 83       	std	Y+3, r31	; 0x03
     bf4:	ea 83       	std	Y+2, r30	; 0x02
     bf6:	08 81       	ld	r16, Y
     bf8:	19 81       	ldd	r17, Y+1	; 0x01
     bfa:	c9 01       	movw	r24, r18
     bfc:	80 0f       	add	r24, r16
     bfe:	91 1f       	adc	r25, r17
     c00:	8e 17       	cp	r24, r30
     c02:	9f 07       	cpc	r25, r31
     c04:	59 f4       	brne	.+22     	; 0xc1c <free+0x96>
     c06:	80 81       	ld	r24, Z
     c08:	91 81       	ldd	r25, Z+1	; 0x01
     c0a:	80 0f       	add	r24, r16
     c0c:	91 1f       	adc	r25, r17
     c0e:	02 96       	adiw	r24, 0x02	; 2
     c10:	99 83       	std	Y+1, r25	; 0x01
     c12:	88 83       	st	Y, r24
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	93 81       	ldd	r25, Z+3	; 0x03
     c18:	9b 83       	std	Y+3, r25	; 0x03
     c1a:	8a 83       	std	Y+2, r24	; 0x02
     c1c:	41 15       	cp	r20, r1
     c1e:	51 05       	cpc	r21, r1
     c20:	29 f4       	brne	.+10     	; 0xc2c <free+0xa6>
     c22:	b0 93 42 03 	sts	0x0342, r27
     c26:	a0 93 41 03 	sts	0x0341, r26
     c2a:	41 c0       	rjmp	.+130    	; 0xcae <free+0x128>
     c2c:	fa 01       	movw	r30, r20
     c2e:	b3 83       	std	Z+3, r27	; 0x03
     c30:	a2 83       	std	Z+2, r26	; 0x02
     c32:	c1 91       	ld	r28, Z+
     c34:	d1 91       	ld	r29, Z+
     c36:	ec 0f       	add	r30, r28
     c38:	fd 1f       	adc	r31, r29
     c3a:	ae 17       	cp	r26, r30
     c3c:	bf 07       	cpc	r27, r31
     c3e:	81 f4       	brne	.+32     	; 0xc60 <free+0xda>
     c40:	f9 01       	movw	r30, r18
     c42:	92 91       	ld	r25, -Z
     c44:	82 91       	ld	r24, -Z
     c46:	8c 0f       	add	r24, r28
     c48:	9d 1f       	adc	r25, r29
     c4a:	02 96       	adiw	r24, 0x02	; 2
     c4c:	da 01       	movw	r26, r20
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	9c 93       	st	X, r25
     c52:	8e 93       	st	-X, r24
     c54:	82 81       	ldd	r24, Z+2	; 0x02
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	13 96       	adiw	r26, 0x03	; 3
     c5a:	9c 93       	st	X, r25
     c5c:	8e 93       	st	-X, r24
     c5e:	12 97       	sbiw	r26, 0x02	; 2
     c60:	e0 e0       	ldi	r30, 0x00	; 0
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <free+0xe4>
     c66:	fb 01       	movw	r30, r22
     c68:	bc 01       	movw	r22, r24
     c6a:	db 01       	movw	r26, r22
     c6c:	12 96       	adiw	r26, 0x02	; 2
     c6e:	8d 91       	ld	r24, X+
     c70:	9c 91       	ld	r25, X
     c72:	13 97       	sbiw	r26, 0x03	; 3
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	b9 f7       	brne	.-18     	; 0xc66 <free+0xe0>
     c78:	cb 01       	movw	r24, r22
     c7a:	02 96       	adiw	r24, 0x02	; 2
     c7c:	2d 91       	ld	r18, X+
     c7e:	3c 91       	ld	r19, X
     c80:	11 97       	sbiw	r26, 0x01	; 1
     c82:	82 0f       	add	r24, r18
     c84:	93 1f       	adc	r25, r19
     c86:	20 91 3f 03 	lds	r18, 0x033F
     c8a:	30 91 40 03 	lds	r19, 0x0340
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	69 f4       	brne	.+26     	; 0xcae <free+0x128>
     c94:	30 97       	sbiw	r30, 0x00	; 0
     c96:	29 f4       	brne	.+10     	; 0xca2 <free+0x11c>
     c98:	10 92 42 03 	sts	0x0342, r1
     c9c:	10 92 41 03 	sts	0x0341, r1
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <free+0x120>
     ca2:	13 82       	std	Z+3, r1	; 0x03
     ca4:	12 82       	std	Z+2, r1	; 0x02
     ca6:	70 93 40 03 	sts	0x0340, r23
     caa:	60 93 3f 03 	sts	0x033F, r22
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	1f 91       	pop	r17
     cb4:	0f 91       	pop	r16
     cb6:	08 95       	ret

00000cb8 <atoi>:
     cb8:	fc 01       	movw	r30, r24
     cba:	88 27       	eor	r24, r24
     cbc:	99 27       	eor	r25, r25
     cbe:	e8 94       	clt
     cc0:	21 91       	ld	r18, Z+
     cc2:	20 32       	cpi	r18, 0x20	; 32
     cc4:	e9 f3       	breq	.-6      	; 0xcc0 <atoi+0x8>
     cc6:	29 30       	cpi	r18, 0x09	; 9
     cc8:	10 f0       	brcs	.+4      	; 0xcce <atoi+0x16>
     cca:	2e 30       	cpi	r18, 0x0E	; 14
     ccc:	c8 f3       	brcs	.-14     	; 0xcc0 <atoi+0x8>
     cce:	2b 32       	cpi	r18, 0x2B	; 43
     cd0:	41 f0       	breq	.+16     	; 0xce2 <atoi+0x2a>
     cd2:	2d 32       	cpi	r18, 0x2D	; 45
     cd4:	39 f4       	brne	.+14     	; 0xce4 <atoi+0x2c>
     cd6:	68 94       	set
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <atoi+0x2a>
     cda:	0e 94 af 06 	call	0xd5e	; 0xd5e <__mulhi_const_10>
     cde:	82 0f       	add	r24, r18
     ce0:	91 1d       	adc	r25, r1
     ce2:	21 91       	ld	r18, Z+
     ce4:	20 53       	subi	r18, 0x30	; 48
     ce6:	2a 30       	cpi	r18, 0x0A	; 10
     ce8:	c0 f3       	brcs	.-16     	; 0xcda <atoi+0x22>
     cea:	1e f4       	brtc	.+6      	; 0xcf2 <atoi+0x3a>
     cec:	90 95       	com	r25
     cee:	81 95       	neg	r24
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	08 95       	ret

00000cf4 <strtok>:
     cf4:	44 eb       	ldi	r20, 0xB4	; 180
     cf6:	52 e0       	ldi	r21, 0x02	; 2
     cf8:	0e 94 88 06 	call	0xd10	; 0xd10 <strtok_r>
     cfc:	08 95       	ret

00000cfe <strcmp>:
     cfe:	fb 01       	movw	r30, r22
     d00:	dc 01       	movw	r26, r24
     d02:	8d 91       	ld	r24, X+
     d04:	01 90       	ld	r0, Z+
     d06:	80 19       	sub	r24, r0
     d08:	01 10       	cpse	r0, r1
     d0a:	d9 f3       	breq	.-10     	; 0xd02 <strcmp+0x4>
     d0c:	99 0b       	sbc	r25, r25
     d0e:	08 95       	ret

00000d10 <strtok_r>:
     d10:	fa 01       	movw	r30, r20
     d12:	a1 91       	ld	r26, Z+
     d14:	b0 81       	ld	r27, Z
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	19 f4       	brne	.+6      	; 0xd20 <strtok_r+0x10>
     d1a:	10 97       	sbiw	r26, 0x00	; 0
     d1c:	e1 f0       	breq	.+56     	; 0xd56 <strtok_r+0x46>
     d1e:	cd 01       	movw	r24, r26
     d20:	dc 01       	movw	r26, r24
     d22:	cd 01       	movw	r24, r26
     d24:	0d 90       	ld	r0, X+
     d26:	00 20       	and	r0, r0
     d28:	11 f4       	brne	.+4      	; 0xd2e <strtok_r+0x1e>
     d2a:	c0 01       	movw	r24, r0
     d2c:	13 c0       	rjmp	.+38     	; 0xd54 <strtok_r+0x44>
     d2e:	fb 01       	movw	r30, r22
     d30:	21 91       	ld	r18, Z+
     d32:	22 23       	and	r18, r18
     d34:	19 f0       	breq	.+6      	; 0xd3c <strtok_r+0x2c>
     d36:	20 15       	cp	r18, r0
     d38:	d9 f7       	brne	.-10     	; 0xd30 <strtok_r+0x20>
     d3a:	f3 cf       	rjmp	.-26     	; 0xd22 <strtok_r+0x12>
     d3c:	fb 01       	movw	r30, r22
     d3e:	21 91       	ld	r18, Z+
     d40:	20 15       	cp	r18, r0
     d42:	19 f4       	brne	.+6      	; 0xd4a <strtok_r+0x3a>
     d44:	1e 92       	st	-X, r1
     d46:	11 96       	adiw	r26, 0x01	; 1
     d48:	06 c0       	rjmp	.+12     	; 0xd56 <strtok_r+0x46>
     d4a:	22 23       	and	r18, r18
     d4c:	c1 f7       	brne	.-16     	; 0xd3e <strtok_r+0x2e>
     d4e:	0d 90       	ld	r0, X+
     d50:	00 20       	and	r0, r0
     d52:	a1 f7       	brne	.-24     	; 0xd3c <strtok_r+0x2c>
     d54:	d0 01       	movw	r26, r0
     d56:	fa 01       	movw	r30, r20
     d58:	a1 93       	st	Z+, r26
     d5a:	b0 83       	st	Z, r27
     d5c:	08 95       	ret

00000d5e <__mulhi_const_10>:
     d5e:	7a e0       	ldi	r23, 0x0A	; 10
     d60:	97 9f       	mul	r25, r23
     d62:	90 2d       	mov	r25, r0
     d64:	87 9f       	mul	r24, r23
     d66:	80 2d       	mov	r24, r0
     d68:	91 0d       	add	r25, r1
     d6a:	11 24       	eor	r1, r1
     d6c:	08 95       	ret

00000d6e <fgets>:
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	8c 01       	movw	r16, r24
     d80:	6a 01       	movw	r12, r20
     d82:	fa 01       	movw	r30, r20
     d84:	83 81       	ldd	r24, Z+3	; 0x03
     d86:	80 ff       	sbrs	r24, 0
     d88:	1a c0       	rjmp	.+52     	; 0xdbe <fgets+0x50>
     d8a:	16 16       	cp	r1, r22
     d8c:	17 06       	cpc	r1, r23
     d8e:	bc f4       	brge	.+46     	; 0xdbe <fgets+0x50>
     d90:	7b 01       	movw	r14, r22
     d92:	e8 01       	movw	r28, r16
     d94:	0e c0       	rjmp	.+28     	; 0xdb2 <fgets+0x44>
     d96:	c6 01       	movw	r24, r12
     d98:	0e 94 4f 09 	call	0x129e	; 0x129e <fgetc>
     d9c:	ff ef       	ldi	r31, 0xFF	; 255
     d9e:	8f 3f       	cpi	r24, 0xFF	; 255
     da0:	9f 07       	cpc	r25, r31
     da2:	69 f0       	breq	.+26     	; 0xdbe <fgets+0x50>
     da4:	89 93       	st	Y+, r24
     da6:	08 94       	sec
     da8:	e1 08       	sbc	r14, r1
     daa:	f1 08       	sbc	r15, r1
     dac:	8a 30       	cpi	r24, 0x0A	; 10
     dae:	91 05       	cpc	r25, r1
     db0:	21 f0       	breq	.+8      	; 0xdba <fgets+0x4c>
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	e2 16       	cp	r14, r18
     db6:	f1 04       	cpc	r15, r1
     db8:	71 f7       	brne	.-36     	; 0xd96 <fgets+0x28>
     dba:	18 82       	st	Y, r1
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <fgets+0x54>
     dbe:	00 e0       	ldi	r16, 0x00	; 0
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	c8 01       	movw	r24, r16
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	08 95       	ret

00000dd6 <printf>:
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	fe 01       	movw	r30, r28
     de0:	36 96       	adiw	r30, 0x06	; 6
     de2:	61 91       	ld	r22, Z+
     de4:	71 91       	ld	r23, Z+
     de6:	80 91 45 03 	lds	r24, 0x0345
     dea:	90 91 46 03 	lds	r25, 0x0346
     dee:	af 01       	movw	r20, r30
     df0:	0e 94 32 07 	call	0xe64	; 0xe64 <vfprintf>
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <putchar>:
     dfa:	60 91 45 03 	lds	r22, 0x0345
     dfe:	70 91 46 03 	lds	r23, 0x0346
     e02:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
     e06:	08 95       	ret

00000e08 <puts>:
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	8c 01       	movw	r16, r24
     e12:	e0 91 45 03 	lds	r30, 0x0345
     e16:	f0 91 46 03 	lds	r31, 0x0346
     e1a:	83 81       	ldd	r24, Z+3	; 0x03
     e1c:	81 ff       	sbrs	r24, 1
     e1e:	1a c0       	rjmp	.+52     	; 0xe54 <puts+0x4c>
     e20:	c0 e0       	ldi	r28, 0x00	; 0
     e22:	d0 e0       	ldi	r29, 0x00	; 0
     e24:	05 c0       	rjmp	.+10     	; 0xe30 <puts+0x28>
     e26:	19 95       	eicall
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	11 f0       	breq	.+4      	; 0xe30 <puts+0x28>
     e2c:	cf ef       	ldi	r28, 0xFF	; 255
     e2e:	df ef       	ldi	r29, 0xFF	; 255
     e30:	f8 01       	movw	r30, r16
     e32:	81 91       	ld	r24, Z+
     e34:	8f 01       	movw	r16, r30
     e36:	60 91 45 03 	lds	r22, 0x0345
     e3a:	70 91 46 03 	lds	r23, 0x0346
     e3e:	db 01       	movw	r26, r22
     e40:	18 96       	adiw	r26, 0x08	; 8
     e42:	ed 91       	ld	r30, X+
     e44:	fc 91       	ld	r31, X
     e46:	19 97       	sbiw	r26, 0x09	; 9
     e48:	88 23       	and	r24, r24
     e4a:	69 f7       	brne	.-38     	; 0xe26 <puts+0x1e>
     e4c:	8a e0       	ldi	r24, 0x0A	; 10
     e4e:	19 95       	eicall
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	11 f0       	breq	.+4      	; 0xe58 <puts+0x50>
     e54:	cf ef       	ldi	r28, 0xFF	; 255
     e56:	df ef       	ldi	r29, 0xFF	; 255
     e58:	ce 01       	movw	r24, r28
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret

00000e64 <vfprintf>:
     e64:	2f 92       	push	r2
     e66:	3f 92       	push	r3
     e68:	4f 92       	push	r4
     e6a:	5f 92       	push	r5
     e6c:	6f 92       	push	r6
     e6e:	7f 92       	push	r7
     e70:	8f 92       	push	r8
     e72:	9f 92       	push	r9
     e74:	af 92       	push	r10
     e76:	bf 92       	push	r11
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	2d 97       	sbiw	r28, 0x0d	; 13
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	3c 01       	movw	r6, r24
     e9a:	7d 87       	std	Y+13, r23	; 0x0d
     e9c:	6c 87       	std	Y+12, r22	; 0x0c
     e9e:	5a 01       	movw	r10, r20
     ea0:	fc 01       	movw	r30, r24
     ea2:	17 82       	std	Z+7, r1	; 0x07
     ea4:	16 82       	std	Z+6, r1	; 0x06
     ea6:	83 81       	ldd	r24, Z+3	; 0x03
     ea8:	81 ff       	sbrs	r24, 1
     eaa:	c8 c1       	rjmp	.+912    	; 0x123c <vfprintf+0x3d8>
     eac:	2e 01       	movw	r4, r28
     eae:	08 94       	sec
     eb0:	41 1c       	adc	r4, r1
     eb2:	51 1c       	adc	r5, r1
     eb4:	f3 01       	movw	r30, r6
     eb6:	93 81       	ldd	r25, Z+3	; 0x03
     eb8:	ec 85       	ldd	r30, Y+12	; 0x0c
     eba:	fd 85       	ldd	r31, Y+13	; 0x0d
     ebc:	93 fd       	sbrc	r25, 3
     ebe:	85 91       	lpm	r24, Z+
     ec0:	93 ff       	sbrs	r25, 3
     ec2:	81 91       	ld	r24, Z+
     ec4:	fd 87       	std	Y+13, r31	; 0x0d
     ec6:	ec 87       	std	Y+12, r30	; 0x0c
     ec8:	88 23       	and	r24, r24
     eca:	09 f4       	brne	.+2      	; 0xece <vfprintf+0x6a>
     ecc:	b3 c1       	rjmp	.+870    	; 0x1234 <vfprintf+0x3d0>
     ece:	85 32       	cpi	r24, 0x25	; 37
     ed0:	41 f4       	brne	.+16     	; 0xee2 <vfprintf+0x7e>
     ed2:	93 fd       	sbrc	r25, 3
     ed4:	85 91       	lpm	r24, Z+
     ed6:	93 ff       	sbrs	r25, 3
     ed8:	81 91       	ld	r24, Z+
     eda:	fd 87       	std	Y+13, r31	; 0x0d
     edc:	ec 87       	std	Y+12, r30	; 0x0c
     ede:	85 32       	cpi	r24, 0x25	; 37
     ee0:	29 f4       	brne	.+10     	; 0xeec <vfprintf+0x88>
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	b3 01       	movw	r22, r6
     ee6:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
     eea:	e4 cf       	rjmp	.-56     	; 0xeb4 <vfprintf+0x50>
     eec:	ff 24       	eor	r15, r15
     eee:	ee 24       	eor	r14, r14
     ef0:	10 e0       	ldi	r17, 0x00	; 0
     ef2:	10 32       	cpi	r17, 0x20	; 32
     ef4:	b0 f4       	brcc	.+44     	; 0xf22 <vfprintf+0xbe>
     ef6:	8b 32       	cpi	r24, 0x2B	; 43
     ef8:	69 f0       	breq	.+26     	; 0xf14 <vfprintf+0xb0>
     efa:	8c 32       	cpi	r24, 0x2C	; 44
     efc:	28 f4       	brcc	.+10     	; 0xf08 <vfprintf+0xa4>
     efe:	80 32       	cpi	r24, 0x20	; 32
     f00:	51 f0       	breq	.+20     	; 0xf16 <vfprintf+0xb2>
     f02:	83 32       	cpi	r24, 0x23	; 35
     f04:	71 f4       	brne	.+28     	; 0xf22 <vfprintf+0xbe>
     f06:	0b c0       	rjmp	.+22     	; 0xf1e <vfprintf+0xba>
     f08:	8d 32       	cpi	r24, 0x2D	; 45
     f0a:	39 f0       	breq	.+14     	; 0xf1a <vfprintf+0xb6>
     f0c:	80 33       	cpi	r24, 0x30	; 48
     f0e:	49 f4       	brne	.+18     	; 0xf22 <vfprintf+0xbe>
     f10:	11 60       	ori	r17, 0x01	; 1
     f12:	2c c0       	rjmp	.+88     	; 0xf6c <vfprintf+0x108>
     f14:	12 60       	ori	r17, 0x02	; 2
     f16:	14 60       	ori	r17, 0x04	; 4
     f18:	29 c0       	rjmp	.+82     	; 0xf6c <vfprintf+0x108>
     f1a:	18 60       	ori	r17, 0x08	; 8
     f1c:	27 c0       	rjmp	.+78     	; 0xf6c <vfprintf+0x108>
     f1e:	10 61       	ori	r17, 0x10	; 16
     f20:	25 c0       	rjmp	.+74     	; 0xf6c <vfprintf+0x108>
     f22:	17 fd       	sbrc	r17, 7
     f24:	2e c0       	rjmp	.+92     	; 0xf82 <vfprintf+0x11e>
     f26:	28 2f       	mov	r18, r24
     f28:	20 53       	subi	r18, 0x30	; 48
     f2a:	2a 30       	cpi	r18, 0x0A	; 10
     f2c:	98 f4       	brcc	.+38     	; 0xf54 <vfprintf+0xf0>
     f2e:	16 ff       	sbrs	r17, 6
     f30:	08 c0       	rjmp	.+16     	; 0xf42 <vfprintf+0xde>
     f32:	8f 2d       	mov	r24, r15
     f34:	88 0f       	add	r24, r24
     f36:	f8 2e       	mov	r15, r24
     f38:	ff 0c       	add	r15, r15
     f3a:	ff 0c       	add	r15, r15
     f3c:	f8 0e       	add	r15, r24
     f3e:	f2 0e       	add	r15, r18
     f40:	15 c0       	rjmp	.+42     	; 0xf6c <vfprintf+0x108>
     f42:	8e 2d       	mov	r24, r14
     f44:	88 0f       	add	r24, r24
     f46:	e8 2e       	mov	r14, r24
     f48:	ee 0c       	add	r14, r14
     f4a:	ee 0c       	add	r14, r14
     f4c:	e8 0e       	add	r14, r24
     f4e:	e2 0e       	add	r14, r18
     f50:	10 62       	ori	r17, 0x20	; 32
     f52:	0c c0       	rjmp	.+24     	; 0xf6c <vfprintf+0x108>
     f54:	8e 32       	cpi	r24, 0x2E	; 46
     f56:	21 f4       	brne	.+8      	; 0xf60 <vfprintf+0xfc>
     f58:	16 fd       	sbrc	r17, 6
     f5a:	6c c1       	rjmp	.+728    	; 0x1234 <vfprintf+0x3d0>
     f5c:	10 64       	ori	r17, 0x40	; 64
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <vfprintf+0x108>
     f60:	8c 36       	cpi	r24, 0x6C	; 108
     f62:	11 f4       	brne	.+4      	; 0xf68 <vfprintf+0x104>
     f64:	10 68       	ori	r17, 0x80	; 128
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <vfprintf+0x108>
     f68:	88 36       	cpi	r24, 0x68	; 104
     f6a:	59 f4       	brne	.+22     	; 0xf82 <vfprintf+0x11e>
     f6c:	ec 85       	ldd	r30, Y+12	; 0x0c
     f6e:	fd 85       	ldd	r31, Y+13	; 0x0d
     f70:	93 fd       	sbrc	r25, 3
     f72:	85 91       	lpm	r24, Z+
     f74:	93 ff       	sbrs	r25, 3
     f76:	81 91       	ld	r24, Z+
     f78:	fd 87       	std	Y+13, r31	; 0x0d
     f7a:	ec 87       	std	Y+12, r30	; 0x0c
     f7c:	88 23       	and	r24, r24
     f7e:	09 f0       	breq	.+2      	; 0xf82 <vfprintf+0x11e>
     f80:	b8 cf       	rjmp	.-144    	; 0xef2 <vfprintf+0x8e>
     f82:	98 2f       	mov	r25, r24
     f84:	95 54       	subi	r25, 0x45	; 69
     f86:	93 30       	cpi	r25, 0x03	; 3
     f88:	18 f0       	brcs	.+6      	; 0xf90 <vfprintf+0x12c>
     f8a:	90 52       	subi	r25, 0x20	; 32
     f8c:	93 30       	cpi	r25, 0x03	; 3
     f8e:	38 f4       	brcc	.+14     	; 0xf9e <vfprintf+0x13a>
     f90:	24 e0       	ldi	r18, 0x04	; 4
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	a2 0e       	add	r10, r18
     f96:	b3 1e       	adc	r11, r19
     f98:	3f e3       	ldi	r19, 0x3F	; 63
     f9a:	39 83       	std	Y+1, r19	; 0x01
     f9c:	0f c0       	rjmp	.+30     	; 0xfbc <vfprintf+0x158>
     f9e:	83 36       	cpi	r24, 0x63	; 99
     fa0:	31 f0       	breq	.+12     	; 0xfae <vfprintf+0x14a>
     fa2:	83 37       	cpi	r24, 0x73	; 115
     fa4:	81 f0       	breq	.+32     	; 0xfc6 <vfprintf+0x162>
     fa6:	83 35       	cpi	r24, 0x53	; 83
     fa8:	09 f0       	breq	.+2      	; 0xfac <vfprintf+0x148>
     faa:	5a c0       	rjmp	.+180    	; 0x1060 <vfprintf+0x1fc>
     fac:	22 c0       	rjmp	.+68     	; 0xff2 <vfprintf+0x18e>
     fae:	f5 01       	movw	r30, r10
     fb0:	80 81       	ld	r24, Z
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	22 e0       	ldi	r18, 0x02	; 2
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	a2 0e       	add	r10, r18
     fba:	b3 1e       	adc	r11, r19
     fbc:	21 e0       	ldi	r18, 0x01	; 1
     fbe:	c2 2e       	mov	r12, r18
     fc0:	d1 2c       	mov	r13, r1
     fc2:	42 01       	movw	r8, r4
     fc4:	14 c0       	rjmp	.+40     	; 0xfee <vfprintf+0x18a>
     fc6:	92 e0       	ldi	r25, 0x02	; 2
     fc8:	29 2e       	mov	r2, r25
     fca:	31 2c       	mov	r3, r1
     fcc:	2a 0c       	add	r2, r10
     fce:	3b 1c       	adc	r3, r11
     fd0:	f5 01       	movw	r30, r10
     fd2:	80 80       	ld	r8, Z
     fd4:	91 80       	ldd	r9, Z+1	; 0x01
     fd6:	16 ff       	sbrs	r17, 6
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <vfprintf+0x17c>
     fda:	6f 2d       	mov	r22, r15
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0x180>
     fe0:	6f ef       	ldi	r22, 0xFF	; 255
     fe2:	7f ef       	ldi	r23, 0xFF	; 255
     fe4:	c4 01       	movw	r24, r8
     fe6:	0e 94 44 09 	call	0x1288	; 0x1288 <strnlen>
     fea:	6c 01       	movw	r12, r24
     fec:	51 01       	movw	r10, r2
     fee:	1f 77       	andi	r17, 0x7F	; 127
     ff0:	15 c0       	rjmp	.+42     	; 0x101c <vfprintf+0x1b8>
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	28 2e       	mov	r2, r24
     ff6:	31 2c       	mov	r3, r1
     ff8:	2a 0c       	add	r2, r10
     ffa:	3b 1c       	adc	r3, r11
     ffc:	f5 01       	movw	r30, r10
     ffe:	80 80       	ld	r8, Z
    1000:	91 80       	ldd	r9, Z+1	; 0x01
    1002:	16 ff       	sbrs	r17, 6
    1004:	03 c0       	rjmp	.+6      	; 0x100c <vfprintf+0x1a8>
    1006:	6f 2d       	mov	r22, r15
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <vfprintf+0x1ac>
    100c:	6f ef       	ldi	r22, 0xFF	; 255
    100e:	7f ef       	ldi	r23, 0xFF	; 255
    1010:	c4 01       	movw	r24, r8
    1012:	0e 94 39 09 	call	0x1272	; 0x1272 <strnlen_P>
    1016:	6c 01       	movw	r12, r24
    1018:	10 68       	ori	r17, 0x80	; 128
    101a:	51 01       	movw	r10, r2
    101c:	13 fd       	sbrc	r17, 3
    101e:	1c c0       	rjmp	.+56     	; 0x1058 <vfprintf+0x1f4>
    1020:	06 c0       	rjmp	.+12     	; 0x102e <vfprintf+0x1ca>
    1022:	80 e2       	ldi	r24, 0x20	; 32
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	b3 01       	movw	r22, r6
    1028:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
    102c:	ea 94       	dec	r14
    102e:	8e 2d       	mov	r24, r14
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	c8 16       	cp	r12, r24
    1034:	d9 06       	cpc	r13, r25
    1036:	a8 f3       	brcs	.-22     	; 0x1022 <vfprintf+0x1be>
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <vfprintf+0x1f4>
    103a:	f4 01       	movw	r30, r8
    103c:	17 fd       	sbrc	r17, 7
    103e:	85 91       	lpm	r24, Z+
    1040:	17 ff       	sbrs	r17, 7
    1042:	81 91       	ld	r24, Z+
    1044:	4f 01       	movw	r8, r30
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	b3 01       	movw	r22, r6
    104a:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
    104e:	e1 10       	cpse	r14, r1
    1050:	ea 94       	dec	r14
    1052:	08 94       	sec
    1054:	c1 08       	sbc	r12, r1
    1056:	d1 08       	sbc	r13, r1
    1058:	c1 14       	cp	r12, r1
    105a:	d1 04       	cpc	r13, r1
    105c:	71 f7       	brne	.-36     	; 0x103a <vfprintf+0x1d6>
    105e:	e7 c0       	rjmp	.+462    	; 0x122e <vfprintf+0x3ca>
    1060:	84 36       	cpi	r24, 0x64	; 100
    1062:	11 f0       	breq	.+4      	; 0x1068 <vfprintf+0x204>
    1064:	89 36       	cpi	r24, 0x69	; 105
    1066:	51 f5       	brne	.+84     	; 0x10bc <vfprintf+0x258>
    1068:	f5 01       	movw	r30, r10
    106a:	17 ff       	sbrs	r17, 7
    106c:	07 c0       	rjmp	.+14     	; 0x107c <vfprintf+0x218>
    106e:	80 81       	ld	r24, Z
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	a2 81       	ldd	r26, Z+2	; 0x02
    1074:	b3 81       	ldd	r27, Z+3	; 0x03
    1076:	24 e0       	ldi	r18, 0x04	; 4
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	08 c0       	rjmp	.+16     	; 0x108c <vfprintf+0x228>
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	aa 27       	eor	r26, r26
    1082:	97 fd       	sbrc	r25, 7
    1084:	a0 95       	com	r26
    1086:	ba 2f       	mov	r27, r26
    1088:	22 e0       	ldi	r18, 0x02	; 2
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	a2 0e       	add	r10, r18
    108e:	b3 1e       	adc	r11, r19
    1090:	01 2f       	mov	r16, r17
    1092:	0f 76       	andi	r16, 0x6F	; 111
    1094:	b7 ff       	sbrs	r27, 7
    1096:	08 c0       	rjmp	.+16     	; 0x10a8 <vfprintf+0x244>
    1098:	b0 95       	com	r27
    109a:	a0 95       	com	r26
    109c:	90 95       	com	r25
    109e:	81 95       	neg	r24
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	af 4f       	sbci	r26, 0xFF	; 255
    10a4:	bf 4f       	sbci	r27, 0xFF	; 255
    10a6:	00 68       	ori	r16, 0x80	; 128
    10a8:	bc 01       	movw	r22, r24
    10aa:	cd 01       	movw	r24, r26
    10ac:	a2 01       	movw	r20, r4
    10ae:	2a e0       	ldi	r18, 0x0A	; 10
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	0e 94 bb 09 	call	0x1376	; 0x1376 <__ultoa_invert>
    10b6:	d8 2e       	mov	r13, r24
    10b8:	d4 18       	sub	r13, r4
    10ba:	3f c0       	rjmp	.+126    	; 0x113a <vfprintf+0x2d6>
    10bc:	85 37       	cpi	r24, 0x75	; 117
    10be:	21 f4       	brne	.+8      	; 0x10c8 <vfprintf+0x264>
    10c0:	1f 7e       	andi	r17, 0xEF	; 239
    10c2:	2a e0       	ldi	r18, 0x0A	; 10
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	20 c0       	rjmp	.+64     	; 0x1108 <vfprintf+0x2a4>
    10c8:	19 7f       	andi	r17, 0xF9	; 249
    10ca:	8f 36       	cpi	r24, 0x6F	; 111
    10cc:	a9 f0       	breq	.+42     	; 0x10f8 <vfprintf+0x294>
    10ce:	80 37       	cpi	r24, 0x70	; 112
    10d0:	20 f4       	brcc	.+8      	; 0x10da <vfprintf+0x276>
    10d2:	88 35       	cpi	r24, 0x58	; 88
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <vfprintf+0x274>
    10d6:	ae c0       	rjmp	.+348    	; 0x1234 <vfprintf+0x3d0>
    10d8:	0b c0       	rjmp	.+22     	; 0x10f0 <vfprintf+0x28c>
    10da:	80 37       	cpi	r24, 0x70	; 112
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <vfprintf+0x282>
    10de:	88 37       	cpi	r24, 0x78	; 120
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <vfprintf+0x280>
    10e2:	a8 c0       	rjmp	.+336    	; 0x1234 <vfprintf+0x3d0>
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <vfprintf+0x284>
    10e6:	10 61       	ori	r17, 0x10	; 16
    10e8:	14 ff       	sbrs	r17, 4
    10ea:	09 c0       	rjmp	.+18     	; 0x10fe <vfprintf+0x29a>
    10ec:	14 60       	ori	r17, 0x04	; 4
    10ee:	07 c0       	rjmp	.+14     	; 0x10fe <vfprintf+0x29a>
    10f0:	14 ff       	sbrs	r17, 4
    10f2:	08 c0       	rjmp	.+16     	; 0x1104 <vfprintf+0x2a0>
    10f4:	16 60       	ori	r17, 0x06	; 6
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <vfprintf+0x2a0>
    10f8:	28 e0       	ldi	r18, 0x08	; 8
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	05 c0       	rjmp	.+10     	; 0x1108 <vfprintf+0x2a4>
    10fe:	20 e1       	ldi	r18, 0x10	; 16
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <vfprintf+0x2a4>
    1104:	20 e1       	ldi	r18, 0x10	; 16
    1106:	32 e0       	ldi	r19, 0x02	; 2
    1108:	f5 01       	movw	r30, r10
    110a:	17 ff       	sbrs	r17, 7
    110c:	07 c0       	rjmp	.+14     	; 0x111c <vfprintf+0x2b8>
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	44 e0       	ldi	r20, 0x04	; 4
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	06 c0       	rjmp	.+12     	; 0x1128 <vfprintf+0x2c4>
    111c:	60 81       	ld	r22, Z
    111e:	71 81       	ldd	r23, Z+1	; 0x01
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	42 e0       	ldi	r20, 0x02	; 2
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	a4 0e       	add	r10, r20
    112a:	b5 1e       	adc	r11, r21
    112c:	a2 01       	movw	r20, r4
    112e:	0e 94 bb 09 	call	0x1376	; 0x1376 <__ultoa_invert>
    1132:	d8 2e       	mov	r13, r24
    1134:	d4 18       	sub	r13, r4
    1136:	01 2f       	mov	r16, r17
    1138:	0f 77       	andi	r16, 0x7F	; 127
    113a:	06 ff       	sbrs	r16, 6
    113c:	09 c0       	rjmp	.+18     	; 0x1150 <vfprintf+0x2ec>
    113e:	0e 7f       	andi	r16, 0xFE	; 254
    1140:	df 14       	cp	r13, r15
    1142:	30 f4       	brcc	.+12     	; 0x1150 <vfprintf+0x2ec>
    1144:	04 ff       	sbrs	r16, 4
    1146:	06 c0       	rjmp	.+12     	; 0x1154 <vfprintf+0x2f0>
    1148:	02 fd       	sbrc	r16, 2
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <vfprintf+0x2f0>
    114c:	0f 7e       	andi	r16, 0xEF	; 239
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <vfprintf+0x2f0>
    1150:	1d 2d       	mov	r17, r13
    1152:	01 c0       	rjmp	.+2      	; 0x1156 <vfprintf+0x2f2>
    1154:	1f 2d       	mov	r17, r15
    1156:	80 2f       	mov	r24, r16
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	04 ff       	sbrs	r16, 4
    115c:	0c c0       	rjmp	.+24     	; 0x1176 <vfprintf+0x312>
    115e:	fe 01       	movw	r30, r28
    1160:	ed 0d       	add	r30, r13
    1162:	f1 1d       	adc	r31, r1
    1164:	20 81       	ld	r18, Z
    1166:	20 33       	cpi	r18, 0x30	; 48
    1168:	11 f4       	brne	.+4      	; 0x116e <vfprintf+0x30a>
    116a:	09 7e       	andi	r16, 0xE9	; 233
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <vfprintf+0x31c>
    116e:	02 ff       	sbrs	r16, 2
    1170:	06 c0       	rjmp	.+12     	; 0x117e <vfprintf+0x31a>
    1172:	1e 5f       	subi	r17, 0xFE	; 254
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <vfprintf+0x31c>
    1176:	86 78       	andi	r24, 0x86	; 134
    1178:	90 70       	andi	r25, 0x00	; 0
    117a:	00 97       	sbiw	r24, 0x00	; 0
    117c:	09 f0       	breq	.+2      	; 0x1180 <vfprintf+0x31c>
    117e:	1f 5f       	subi	r17, 0xFF	; 255
    1180:	80 2e       	mov	r8, r16
    1182:	99 24       	eor	r9, r9
    1184:	03 fd       	sbrc	r16, 3
    1186:	12 c0       	rjmp	.+36     	; 0x11ac <vfprintf+0x348>
    1188:	00 ff       	sbrs	r16, 0
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <vfprintf+0x342>
    118c:	fd 2c       	mov	r15, r13
    118e:	1e 15       	cp	r17, r14
    1190:	50 f4       	brcc	.+20     	; 0x11a6 <vfprintf+0x342>
    1192:	fe 0c       	add	r15, r14
    1194:	f1 1a       	sub	r15, r17
    1196:	1e 2d       	mov	r17, r14
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <vfprintf+0x342>
    119a:	80 e2       	ldi	r24, 0x20	; 32
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	b3 01       	movw	r22, r6
    11a0:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
    11a4:	1f 5f       	subi	r17, 0xFF	; 255
    11a6:	1e 15       	cp	r17, r14
    11a8:	c0 f3       	brcs	.-16     	; 0x119a <vfprintf+0x336>
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <vfprintf+0x350>
    11ac:	1e 15       	cp	r17, r14
    11ae:	10 f4       	brcc	.+4      	; 0x11b4 <vfprintf+0x350>
    11b0:	e1 1a       	sub	r14, r17
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <vfprintf+0x352>
    11b4:	ee 24       	eor	r14, r14
    11b6:	84 fe       	sbrs	r8, 4
    11b8:	0f c0       	rjmp	.+30     	; 0x11d8 <vfprintf+0x374>
    11ba:	80 e3       	ldi	r24, 0x30	; 48
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	b3 01       	movw	r22, r6
    11c0:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
    11c4:	82 fe       	sbrs	r8, 2
    11c6:	1f c0       	rjmp	.+62     	; 0x1206 <vfprintf+0x3a2>
    11c8:	81 fe       	sbrs	r8, 1
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <vfprintf+0x36e>
    11cc:	88 e5       	ldi	r24, 0x58	; 88
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	10 c0       	rjmp	.+32     	; 0x11f2 <vfprintf+0x38e>
    11d2:	88 e7       	ldi	r24, 0x78	; 120
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0d c0       	rjmp	.+26     	; 0x11f2 <vfprintf+0x38e>
    11d8:	c4 01       	movw	r24, r8
    11da:	86 78       	andi	r24, 0x86	; 134
    11dc:	90 70       	andi	r25, 0x00	; 0
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	91 f0       	breq	.+36     	; 0x1206 <vfprintf+0x3a2>
    11e2:	81 fc       	sbrc	r8, 1
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <vfprintf+0x386>
    11e6:	80 e2       	ldi	r24, 0x20	; 32
    11e8:	01 c0       	rjmp	.+2      	; 0x11ec <vfprintf+0x388>
    11ea:	8b e2       	ldi	r24, 0x2B	; 43
    11ec:	07 fd       	sbrc	r16, 7
    11ee:	8d e2       	ldi	r24, 0x2D	; 45
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	b3 01       	movw	r22, r6
    11f4:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <vfprintf+0x3a2>
    11fa:	80 e3       	ldi	r24, 0x30	; 48
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	b3 01       	movw	r22, r6
    1200:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
    1204:	fa 94       	dec	r15
    1206:	df 14       	cp	r13, r15
    1208:	c0 f3       	brcs	.-16     	; 0x11fa <vfprintf+0x396>
    120a:	da 94       	dec	r13
    120c:	f2 01       	movw	r30, r4
    120e:	ed 0d       	add	r30, r13
    1210:	f1 1d       	adc	r31, r1
    1212:	80 81       	ld	r24, Z
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	b3 01       	movw	r22, r6
    1218:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
    121c:	dd 20       	and	r13, r13
    121e:	a9 f7       	brne	.-22     	; 0x120a <vfprintf+0x3a6>
    1220:	06 c0       	rjmp	.+12     	; 0x122e <vfprintf+0x3ca>
    1222:	80 e2       	ldi	r24, 0x20	; 32
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	b3 01       	movw	r22, r6
    1228:	0e 94 8f 09 	call	0x131e	; 0x131e <fputc>
    122c:	ea 94       	dec	r14
    122e:	ee 20       	and	r14, r14
    1230:	c1 f7       	brne	.-16     	; 0x1222 <vfprintf+0x3be>
    1232:	40 ce       	rjmp	.-896    	; 0xeb4 <vfprintf+0x50>
    1234:	f3 01       	movw	r30, r6
    1236:	86 81       	ldd	r24, Z+6	; 0x06
    1238:	97 81       	ldd	r25, Z+7	; 0x07
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0x3dc>
    123c:	8f ef       	ldi	r24, 0xFF	; 255
    123e:	9f ef       	ldi	r25, 0xFF	; 255
    1240:	2d 96       	adiw	r28, 0x0d	; 13
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	df 91       	pop	r29
    124e:	cf 91       	pop	r28
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ff 90       	pop	r15
    1256:	ef 90       	pop	r14
    1258:	df 90       	pop	r13
    125a:	cf 90       	pop	r12
    125c:	bf 90       	pop	r11
    125e:	af 90       	pop	r10
    1260:	9f 90       	pop	r9
    1262:	8f 90       	pop	r8
    1264:	7f 90       	pop	r7
    1266:	6f 90       	pop	r6
    1268:	5f 90       	pop	r5
    126a:	4f 90       	pop	r4
    126c:	3f 90       	pop	r3
    126e:	2f 90       	pop	r2
    1270:	08 95       	ret

00001272 <strnlen_P>:
    1272:	fc 01       	movw	r30, r24
    1274:	05 90       	lpm	r0, Z+
    1276:	61 50       	subi	r22, 0x01	; 1
    1278:	70 40       	sbci	r23, 0x00	; 0
    127a:	01 10       	cpse	r0, r1
    127c:	d8 f7       	brcc	.-10     	; 0x1274 <strnlen_P+0x2>
    127e:	80 95       	com	r24
    1280:	90 95       	com	r25
    1282:	8e 0f       	add	r24, r30
    1284:	9f 1f       	adc	r25, r31
    1286:	08 95       	ret

00001288 <strnlen>:
    1288:	fc 01       	movw	r30, r24
    128a:	61 50       	subi	r22, 0x01	; 1
    128c:	70 40       	sbci	r23, 0x00	; 0
    128e:	01 90       	ld	r0, Z+
    1290:	01 10       	cpse	r0, r1
    1292:	d8 f7       	brcc	.-10     	; 0x128a <strnlen+0x2>
    1294:	80 95       	com	r24
    1296:	90 95       	com	r25
    1298:	8e 0f       	add	r24, r30
    129a:	9f 1f       	adc	r25, r31
    129c:	08 95       	ret

0000129e <fgetc>:
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	ec 01       	movw	r28, r24
    12a4:	2b 81       	ldd	r18, Y+3	; 0x03
    12a6:	20 ff       	sbrs	r18, 0
    12a8:	35 c0       	rjmp	.+106    	; 0x1314 <fgetc+0x76>
    12aa:	26 ff       	sbrs	r18, 6
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <fgetc+0x22>
    12ae:	2f 7b       	andi	r18, 0xBF	; 191
    12b0:	2b 83       	std	Y+3, r18	; 0x03
    12b2:	8e 81       	ldd	r24, Y+6	; 0x06
    12b4:	9f 81       	ldd	r25, Y+7	; 0x07
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	9f 83       	std	Y+7, r25	; 0x07
    12ba:	8e 83       	std	Y+6, r24	; 0x06
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 c0       	rjmp	.+80     	; 0x1310 <fgetc+0x72>
    12c0:	22 ff       	sbrs	r18, 2
    12c2:	0f c0       	rjmp	.+30     	; 0x12e2 <fgetc+0x44>
    12c4:	e8 81       	ld	r30, Y
    12c6:	f9 81       	ldd	r31, Y+1	; 0x01
    12c8:	80 81       	ld	r24, Z
    12ca:	99 27       	eor	r25, r25
    12cc:	87 fd       	sbrc	r24, 7
    12ce:	90 95       	com	r25
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	19 f4       	brne	.+6      	; 0x12da <fgetc+0x3c>
    12d4:	20 62       	ori	r18, 0x20	; 32
    12d6:	2b 83       	std	Y+3, r18	; 0x03
    12d8:	1d c0       	rjmp	.+58     	; 0x1314 <fgetc+0x76>
    12da:	31 96       	adiw	r30, 0x01	; 1
    12dc:	f9 83       	std	Y+1, r31	; 0x01
    12de:	e8 83       	st	Y, r30
    12e0:	11 c0       	rjmp	.+34     	; 0x1304 <fgetc+0x66>
    12e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    12e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    12e6:	ce 01       	movw	r24, r28
    12e8:	19 95       	eicall
    12ea:	97 ff       	sbrs	r25, 7
    12ec:	0b c0       	rjmp	.+22     	; 0x1304 <fgetc+0x66>
    12ee:	2b 81       	ldd	r18, Y+3	; 0x03
    12f0:	3f ef       	ldi	r19, 0xFF	; 255
    12f2:	8f 3f       	cpi	r24, 0xFF	; 255
    12f4:	93 07       	cpc	r25, r19
    12f6:	11 f4       	brne	.+4      	; 0x12fc <fgetc+0x5e>
    12f8:	80 e1       	ldi	r24, 0x10	; 16
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <fgetc+0x60>
    12fc:	80 e2       	ldi	r24, 0x20	; 32
    12fe:	82 2b       	or	r24, r18
    1300:	8b 83       	std	Y+3, r24	; 0x03
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <fgetc+0x76>
    1304:	2e 81       	ldd	r18, Y+6	; 0x06
    1306:	3f 81       	ldd	r19, Y+7	; 0x07
    1308:	2f 5f       	subi	r18, 0xFF	; 255
    130a:	3f 4f       	sbci	r19, 0xFF	; 255
    130c:	3f 83       	std	Y+7, r19	; 0x07
    130e:	2e 83       	std	Y+6, r18	; 0x06
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <fgetc+0x7a>
    1314:	8f ef       	ldi	r24, 0xFF	; 255
    1316:	9f ef       	ldi	r25, 0xFF	; 255
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <fputc>:
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	8c 01       	movw	r16, r24
    1328:	eb 01       	movw	r28, r22
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	81 ff       	sbrs	r24, 1
    132e:	1b c0       	rjmp	.+54     	; 0x1366 <fputc+0x48>
    1330:	82 ff       	sbrs	r24, 2
    1332:	0d c0       	rjmp	.+26     	; 0x134e <fputc+0x30>
    1334:	2e 81       	ldd	r18, Y+6	; 0x06
    1336:	3f 81       	ldd	r19, Y+7	; 0x07
    1338:	8c 81       	ldd	r24, Y+4	; 0x04
    133a:	9d 81       	ldd	r25, Y+5	; 0x05
    133c:	28 17       	cp	r18, r24
    133e:	39 07       	cpc	r19, r25
    1340:	64 f4       	brge	.+24     	; 0x135a <fputc+0x3c>
    1342:	e8 81       	ld	r30, Y
    1344:	f9 81       	ldd	r31, Y+1	; 0x01
    1346:	01 93       	st	Z+, r16
    1348:	f9 83       	std	Y+1, r31	; 0x01
    134a:	e8 83       	st	Y, r30
    134c:	06 c0       	rjmp	.+12     	; 0x135a <fputc+0x3c>
    134e:	e8 85       	ldd	r30, Y+8	; 0x08
    1350:	f9 85       	ldd	r31, Y+9	; 0x09
    1352:	80 2f       	mov	r24, r16
    1354:	19 95       	eicall
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	31 f4       	brne	.+12     	; 0x1366 <fputc+0x48>
    135a:	8e 81       	ldd	r24, Y+6	; 0x06
    135c:	9f 81       	ldd	r25, Y+7	; 0x07
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	9f 83       	std	Y+7, r25	; 0x07
    1362:	8e 83       	std	Y+6, r24	; 0x06
    1364:	02 c0       	rjmp	.+4      	; 0x136a <fputc+0x4c>
    1366:	0f ef       	ldi	r16, 0xFF	; 255
    1368:	1f ef       	ldi	r17, 0xFF	; 255
    136a:	c8 01       	movw	r24, r16
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <__ultoa_invert>:
    1376:	fa 01       	movw	r30, r20
    1378:	aa 27       	eor	r26, r26
    137a:	28 30       	cpi	r18, 0x08	; 8
    137c:	51 f1       	breq	.+84     	; 0x13d2 <__ultoa_invert+0x5c>
    137e:	20 31       	cpi	r18, 0x10	; 16
    1380:	81 f1       	breq	.+96     	; 0x13e2 <__ultoa_invert+0x6c>
    1382:	e8 94       	clt
    1384:	6f 93       	push	r22
    1386:	6e 7f       	andi	r22, 0xFE	; 254
    1388:	6e 5f       	subi	r22, 0xFE	; 254
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	8f 4f       	sbci	r24, 0xFF	; 255
    138e:	9f 4f       	sbci	r25, 0xFF	; 255
    1390:	af 4f       	sbci	r26, 0xFF	; 255
    1392:	b1 e0       	ldi	r27, 0x01	; 1
    1394:	3e d0       	rcall	.+124    	; 0x1412 <__ultoa_invert+0x9c>
    1396:	b4 e0       	ldi	r27, 0x04	; 4
    1398:	3c d0       	rcall	.+120    	; 0x1412 <__ultoa_invert+0x9c>
    139a:	67 0f       	add	r22, r23
    139c:	78 1f       	adc	r23, r24
    139e:	89 1f       	adc	r24, r25
    13a0:	9a 1f       	adc	r25, r26
    13a2:	a1 1d       	adc	r26, r1
    13a4:	68 0f       	add	r22, r24
    13a6:	79 1f       	adc	r23, r25
    13a8:	8a 1f       	adc	r24, r26
    13aa:	91 1d       	adc	r25, r1
    13ac:	a1 1d       	adc	r26, r1
    13ae:	6a 0f       	add	r22, r26
    13b0:	71 1d       	adc	r23, r1
    13b2:	81 1d       	adc	r24, r1
    13b4:	91 1d       	adc	r25, r1
    13b6:	a1 1d       	adc	r26, r1
    13b8:	20 d0       	rcall	.+64     	; 0x13fa <__ultoa_invert+0x84>
    13ba:	09 f4       	brne	.+2      	; 0x13be <__ultoa_invert+0x48>
    13bc:	68 94       	set
    13be:	3f 91       	pop	r19
    13c0:	2a e0       	ldi	r18, 0x0A	; 10
    13c2:	26 9f       	mul	r18, r22
    13c4:	11 24       	eor	r1, r1
    13c6:	30 19       	sub	r19, r0
    13c8:	30 5d       	subi	r19, 0xD0	; 208
    13ca:	31 93       	st	Z+, r19
    13cc:	de f6       	brtc	.-74     	; 0x1384 <__ultoa_invert+0xe>
    13ce:	cf 01       	movw	r24, r30
    13d0:	08 95       	ret
    13d2:	46 2f       	mov	r20, r22
    13d4:	47 70       	andi	r20, 0x07	; 7
    13d6:	40 5d       	subi	r20, 0xD0	; 208
    13d8:	41 93       	st	Z+, r20
    13da:	b3 e0       	ldi	r27, 0x03	; 3
    13dc:	0f d0       	rcall	.+30     	; 0x13fc <__ultoa_invert+0x86>
    13de:	c9 f7       	brne	.-14     	; 0x13d2 <__ultoa_invert+0x5c>
    13e0:	f6 cf       	rjmp	.-20     	; 0x13ce <__ultoa_invert+0x58>
    13e2:	46 2f       	mov	r20, r22
    13e4:	4f 70       	andi	r20, 0x0F	; 15
    13e6:	40 5d       	subi	r20, 0xD0	; 208
    13e8:	4a 33       	cpi	r20, 0x3A	; 58
    13ea:	18 f0       	brcs	.+6      	; 0x13f2 <__ultoa_invert+0x7c>
    13ec:	49 5d       	subi	r20, 0xD9	; 217
    13ee:	31 fd       	sbrc	r19, 1
    13f0:	40 52       	subi	r20, 0x20	; 32
    13f2:	41 93       	st	Z+, r20
    13f4:	02 d0       	rcall	.+4      	; 0x13fa <__ultoa_invert+0x84>
    13f6:	a9 f7       	brne	.-22     	; 0x13e2 <__ultoa_invert+0x6c>
    13f8:	ea cf       	rjmp	.-44     	; 0x13ce <__ultoa_invert+0x58>
    13fa:	b4 e0       	ldi	r27, 0x04	; 4
    13fc:	a6 95       	lsr	r26
    13fe:	97 95       	ror	r25
    1400:	87 95       	ror	r24
    1402:	77 95       	ror	r23
    1404:	67 95       	ror	r22
    1406:	ba 95       	dec	r27
    1408:	c9 f7       	brne	.-14     	; 0x13fc <__ultoa_invert+0x86>
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	61 05       	cpc	r22, r1
    140e:	71 05       	cpc	r23, r1
    1410:	08 95       	ret
    1412:	9b 01       	movw	r18, r22
    1414:	ac 01       	movw	r20, r24
    1416:	0a 2e       	mov	r0, r26
    1418:	06 94       	lsr	r0
    141a:	57 95       	ror	r21
    141c:	47 95       	ror	r20
    141e:	37 95       	ror	r19
    1420:	27 95       	ror	r18
    1422:	ba 95       	dec	r27
    1424:	c9 f7       	brne	.-14     	; 0x1418 <__ultoa_invert+0xa2>
    1426:	62 0f       	add	r22, r18
    1428:	73 1f       	adc	r23, r19
    142a:	84 1f       	adc	r24, r20
    142c:	95 1f       	adc	r25, r21
    142e:	a0 1d       	adc	r26, r0
    1430:	08 95       	ret

00001432 <_exit>:
    1432:	f8 94       	cli

00001434 <__stop_program>:
    1434:	ff cf       	rjmp	.-2      	; 0x1434 <__stop_program>
