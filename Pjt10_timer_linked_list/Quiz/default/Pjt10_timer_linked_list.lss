
Pjt10_timer_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  0000141c  000014b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000141c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  008001ba  008001ba  0000156a  2**0
                  ALLOC
  3 .stab         000010f8  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000270  00000000  00000000  000029a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000244d  00000000  00000000  00002c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001145  00000000  00000000  0000505d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013e2  00000000  00000000  000061a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  00007584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000711  00000000  00000000  00007be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019d1  00000000  00000000  000082f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00009cc2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_18>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 4e 02 	jmp	0x49c	; 0x49c <__vector_20>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e1       	ldi	r30, 0x1C	; 28
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3b       	cpi	r26, 0xBA	; 186
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
      b4:	12 e0       	ldi	r17, 0x02	; 2
      b6:	aa eb       	ldi	r26, 0xBA	; 186
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a3 35       	cpi	r26, 0x53	; 83
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 82 04 	call	0x904	; 0x904 <main>
      c8:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri= fo = ro = 0;
      d0:	10 92 05 02 	sts	0x0205, r1
      d4:	10 92 04 02 	sts	0x0204, r1
      d8:	10 92 03 02 	sts	0x0203, r1
      dc:	10 92 02 02 	sts	0x0202, r1
      e0:	10 92 07 02 	sts	0x0207, r1
      e4:	10 92 06 02 	sts	0x0206, r1
      e8:	10 92 c1 01 	sts	0x01C1, r1
      ec:	10 92 c0 01 	sts	0x01C0, r1
}
      f0:	08 95       	ret

000000f2 <qi_insert>:

int qi_insert(char ch)
{
      f2:	48 2f       	mov	r20, r24
	if ((ri+1) % QI_SIZE == fi)
      f4:	20 91 06 02 	lds	r18, 0x0206
      f8:	30 91 07 02 	lds	r19, 0x0207
      fc:	2f 5f       	subi	r18, 0xFF	; 255
      fe:	3f 4f       	sbci	r19, 0xFF	; 255
     100:	c9 01       	movw	r24, r18
     102:	60 e4       	ldi	r22, 0x40	; 64
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
     10a:	9c 01       	movw	r18, r24
     10c:	80 91 c0 01 	lds	r24, 0x01C0
     110:	90 91 c1 01 	lds	r25, 0x01C1
     114:	28 17       	cp	r18, r24
     116:	39 07       	cpc	r19, r25
     118:	59 f0       	breq	.+22     	; 0x130 <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     11a:	30 93 07 02 	sts	0x0207, r19
     11e:	20 93 06 02 	sts	0x0206, r18
	qi[ri] = ch;
     122:	28 5f       	subi	r18, 0xF8	; 248
     124:	3d 4f       	sbci	r19, 0xFD	; 253
     126:	f9 01       	movw	r30, r18
     128:	40 83       	st	Z, r20
	return 1;
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri+1) % QI_SIZE == fi)
		return 0;
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     134:	08 95       	ret

00000136 <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     136:	80 91 c0 01 	lds	r24, 0x01C0
     13a:	90 91 c1 01 	lds	r25, 0x01C1
     13e:	20 91 06 02 	lds	r18, 0x0206
     142:	30 91 07 02 	lds	r19, 0x0207
     146:	28 17       	cp	r18, r24
     148:	39 07       	cpc	r19, r25
     14a:	79 f0       	breq	.+30     	; 0x16a <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     14c:	01 96       	adiw	r24, 0x01	; 1
     14e:	60 e4       	ldi	r22, 0x40	; 64
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
     156:	90 93 c1 01 	sts	0x01C1, r25
     15a:	80 93 c0 01 	sts	0x01C0, r24
	return (qi[fi]);
     15e:	88 5f       	subi	r24, 0xF8	; 248
     160:	9d 4f       	sbci	r25, 0xFD	; 253
     162:	fc 01       	movw	r30, r24
     164:	80 81       	ld	r24, Z
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return 0;
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return (qi[fi]);
}
     16e:	08 95       	ret

00000170 <qo_insert>:

int qo_insert(char ch)
{
     170:	48 2f       	mov	r20, r24
	if ((ro+1) % QO_SIZE == fo)
     172:	20 91 04 02 	lds	r18, 0x0204
     176:	30 91 05 02 	lds	r19, 0x0205
     17a:	2f 5f       	subi	r18, 0xFF	; 255
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	c9 01       	movw	r24, r18
     180:	60 e4       	ldi	r22, 0x40	; 64
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
     188:	9c 01       	movw	r18, r24
     18a:	80 91 02 02 	lds	r24, 0x0202
     18e:	90 91 03 02 	lds	r25, 0x0203
     192:	28 17       	cp	r18, r24
     194:	39 07       	cpc	r19, r25
     196:	59 f0       	breq	.+22     	; 0x1ae <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     198:	30 93 05 02 	sts	0x0205, r19
     19c:	20 93 04 02 	sts	0x0204, r18
	qo[ro] = ch;
     1a0:	2e 53       	subi	r18, 0x3E	; 62
     1a2:	3e 4f       	sbci	r19, 0xFE	; 254
     1a4:	f9 01       	movw	r30, r18
     1a6:	40 83       	st	Z, r20
	return 1;
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	08 95       	ret
}

int qo_insert(char ch)
{
	if ((ro+1) % QO_SIZE == fo)
		return 0;
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     1b2:	08 95       	ret

000001b4 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     1b4:	80 91 02 02 	lds	r24, 0x0202
     1b8:	90 91 03 02 	lds	r25, 0x0203
     1bc:	20 91 04 02 	lds	r18, 0x0204
     1c0:	30 91 05 02 	lds	r19, 0x0205
     1c4:	28 17       	cp	r18, r24
     1c6:	39 07       	cpc	r19, r25
     1c8:	79 f0       	breq	.+30     	; 0x1e8 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     1ca:	01 96       	adiw	r24, 0x01	; 1
     1cc:	60 e4       	ldi	r22, 0x40	; 64
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
     1d4:	90 93 03 02 	sts	0x0203, r25
     1d8:	80 93 02 02 	sts	0x0202, r24
	return (qo[fo]);
     1dc:	8e 53       	subi	r24, 0x3E	; 62
     1de:	9e 4f       	sbci	r25, 0xFE	; 254
     1e0:	fc 01       	movw	r30, r24
     1e2:	80 81       	ld	r24, Z
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
     1e8:	80 e0       	ldi	r24, 0x00	; 0
     1ea:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return (qo[fo]);
}
     1ec:	08 95       	ret

000001ee <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     1ee:	84 e0       	ldi	r24, 0x04	; 4
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 20 05 	call	0xa40	; 0xa40 <malloc>
	return(cp);
}
     1f6:	08 95       	ret

000001f8 <free_node>:

void free_node(struct node *np)
{
	free(np);
     1f8:	0e 94 b6 05 	call	0xb6c	; 0xb6c <free>
}
     1fc:	08 95       	ret

000001fe <insert_node_head>:

void insert_node_head(struct node *np)
{
     1fe:	fc 01       	movw	r30, r24
	if(!Head) {
     200:	80 91 ba 01 	lds	r24, 0x01BA
     204:	90 91 bb 01 	lds	r25, 0x01BB
     208:	00 97       	sbiw	r24, 0x00	; 0
     20a:	39 f4       	brne	.+14     	; 0x21a <insert_node_head+0x1c>
		Head = np;
     20c:	f0 93 bb 01 	sts	0x01BB, r31
     210:	e0 93 ba 01 	sts	0x01BA, r30
		np -> link = NULL;
     214:	13 82       	std	Z+3, r1	; 0x03
     216:	12 82       	std	Z+2, r1	; 0x02
     218:	08 95       	ret
	}
	else {
		np -> link = Head;
     21a:	93 83       	std	Z+3, r25	; 0x03
     21c:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     21e:	f0 93 bb 01 	sts	0x01BB, r31
     222:	e0 93 ba 01 	sts	0x01BA, r30
     226:	08 95       	ret

00000228 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     228:	e0 91 ba 01 	lds	r30, 0x01BA
     22c:	f0 91 bb 01 	lds	r31, 0x01BB
     230:	30 97       	sbiw	r30, 0x00	; 0
     232:	31 f4       	brne	.+12     	; 0x240 <insert_node_tail+0x18>
		Head = np;
     234:	90 93 bb 01 	sts	0x01BB, r25
     238:	80 93 ba 01 	sts	0x01BA, r24
     23c:	08 c0       	rjmp	.+16     	; 0x24e <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     23e:	f9 01       	movw	r30, r18
     240:	22 81       	ldd	r18, Z+2	; 0x02
     242:	33 81       	ldd	r19, Z+3	; 0x03
     244:	21 15       	cp	r18, r1
     246:	31 05       	cpc	r19, r1
     248:	d1 f7       	brne	.-12     	; 0x23e <insert_node_tail+0x16>
		cp -> link = np;
     24a:	93 83       	std	Z+3, r25	; 0x03
     24c:	82 83       	std	Z+2, r24	; 0x02
	}
	np -> link = NULL;
     24e:	fc 01       	movw	r30, r24
     250:	13 82       	std	Z+3, r1	; 0x03
     252:	12 82       	std	Z+2, r1	; 0x02
}
     254:	08 95       	ret

00000256 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     25c:	20 91 ba 01 	lds	r18, 0x01BA
     260:	30 91 bb 01 	lds	r19, 0x01BB
     264:	21 15       	cp	r18, r1
     266:	31 05       	cpc	r19, r1
     268:	31 f0       	breq	.+12     	; 0x276 <insert_node_ascn+0x20>
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     26a:	40 81       	ld	r20, Z
     26c:	51 81       	ldd	r21, Z+1	; 0x01
     26e:	d9 01       	movw	r26, r18
     270:	c0 e0       	ldi	r28, 0x00	; 0
     272:	d0 e0       	ldi	r29, 0x00	; 0
     274:	0f c0       	rjmp	.+30     	; 0x294 <insert_node_ascn+0x3e>

void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     276:	90 93 bb 01 	sts	0x01BB, r25
     27a:	80 93 ba 01 	sts	0x01BA, r24
		np -> link = NULL;
     27e:	13 82       	std	Z+3, r1	; 0x03
     280:	12 82       	std	Z+2, r1	; 0x02
     282:	1d c0       	rjmp	.+58     	; 0x2be <insert_node_ascn+0x68>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
		pp = cp, cp = cp->link);
     284:	12 96       	adiw	r26, 0x02	; 2
     286:	8d 91       	ld	r24, X+
     288:	9c 91       	ld	r25, X
     28a:	13 97       	sbiw	r26, 0x03	; 3
	if(!Head) {
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     28c:	ed 01       	movw	r28, r26
     28e:	00 97       	sbiw	r24, 0x00	; 0
     290:	39 f0       	breq	.+14     	; 0x2a0 <insert_node_ascn+0x4a>
		pp = cp, cp = cp->link);
     292:	dc 01       	movw	r26, r24
	if(!Head) {
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     294:	8d 91       	ld	r24, X+
     296:	9c 91       	ld	r25, X
     298:	11 97       	sbiw	r26, 0x01	; 1
     29a:	84 17       	cp	r24, r20
     29c:	95 07       	cpc	r25, r21
     29e:	94 f3       	brlt	.-28     	; 0x284 <insert_node_ascn+0x2e>
		pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     2a0:	20 97       	sbiw	r28, 0x00	; 0
     2a2:	39 f4       	brne	.+14     	; 0x2b2 <insert_node_ascn+0x5c>
			np -> link = Head;
     2a4:	33 83       	std	Z+3, r19	; 0x03
     2a6:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     2a8:	f0 93 bb 01 	sts	0x01BB, r31
     2ac:	e0 93 ba 01 	sts	0x01BA, r30
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <insert_node_ascn+0x68>
		} else {
			np -> link = pp -> link;
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	9b 81       	ldd	r25, Y+3	; 0x03
     2b6:	93 83       	std	Z+3, r25	; 0x03
     2b8:	82 83       	std	Z+2, r24	; 0x02
			pp -> link = np;
     2ba:	fb 83       	std	Y+3, r31	; 0x03
     2bc:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <insert_node_desc>:

void insert_node_desc(struct node *np) {
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	fc 01       	movw	r30, r24
   struct node *cp, *pp;

   if(!Head) {
     2ca:	20 91 ba 01 	lds	r18, 0x01BA
     2ce:	30 91 bb 01 	lds	r19, 0x01BB
     2d2:	21 15       	cp	r18, r1
     2d4:	31 05       	cpc	r19, r1
     2d6:	31 f0       	breq	.+12     	; 0x2e4 <insert_node_desc+0x20>
      Head = np;
      np->link = NULL;
   } else {
      for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     2d8:	40 81       	ld	r20, Z
     2da:	51 81       	ldd	r21, Z+1	; 0x01
     2dc:	d9 01       	movw	r26, r18
     2de:	c0 e0       	ldi	r28, 0x00	; 0
     2e0:	d0 e0       	ldi	r29, 0x00	; 0
     2e2:	0f c0       	rjmp	.+30     	; 0x302 <insert_node_desc+0x3e>

void insert_node_desc(struct node *np) {
   struct node *cp, *pp;

   if(!Head) {
      Head = np;
     2e4:	90 93 bb 01 	sts	0x01BB, r25
     2e8:	80 93 ba 01 	sts	0x01BA, r24
      np->link = NULL;
     2ec:	13 82       	std	Z+3, r1	; 0x03
     2ee:	12 82       	std	Z+2, r1	; 0x02
     2f0:	1d c0       	rjmp	.+58     	; 0x32c <insert_node_desc+0x68>
   } else {
      for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     2f2:	12 96       	adiw	r26, 0x02	; 2
     2f4:	8d 91       	ld	r24, X+
     2f6:	9c 91       	ld	r25, X
     2f8:	13 97       	sbiw	r26, 0x03	; 3
     2fa:	ed 01       	movw	r28, r26
     2fc:	00 97       	sbiw	r24, 0x00	; 0
     2fe:	39 f0       	breq	.+14     	; 0x30e <insert_node_desc+0x4a>
     300:	dc 01       	movw	r26, r24
     302:	8d 91       	ld	r24, X+
     304:	9c 91       	ld	r25, X
     306:	11 97       	sbiw	r26, 0x01	; 1
     308:	48 17       	cp	r20, r24
     30a:	59 07       	cpc	r21, r25
     30c:	94 f3       	brlt	.-28     	; 0x2f2 <insert_node_desc+0x2e>

      if(pp == NULL) {
     30e:	20 97       	sbiw	r28, 0x00	; 0
     310:	39 f4       	brne	.+14     	; 0x320 <insert_node_desc+0x5c>
         np->link = Head;
     312:	33 83       	std	Z+3, r19	; 0x03
     314:	22 83       	std	Z+2, r18	; 0x02
         Head = np;
     316:	f0 93 bb 01 	sts	0x01BB, r31
     31a:	e0 93 ba 01 	sts	0x01BA, r30
     31e:	06 c0       	rjmp	.+12     	; 0x32c <insert_node_desc+0x68>
      } else {
         np->link = pp->link;
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	9b 81       	ldd	r25, Y+3	; 0x03
     324:	93 83       	std	Z+3, r25	; 0x03
     326:	82 83       	std	Z+2, r24	; 0x02
         pp->link = np;
     328:	fb 83       	std	Y+3, r31	; 0x03
     32a:	ea 83       	std	Y+2, r30	; 0x02
      }
   }
}
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	08 95       	ret

00000332 <tour_list>:

void tour_list() {
     332:	0f 93       	push	r16
     334:	1f 93       	push	r17
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
	struct node *cp;
	printf("\n");
     33a:	8a e0       	ldi	r24, 0x0A	; 10
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 f0 06 	call	0xde0	; 0xde0 <putchar>
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     342:	c0 91 ba 01 	lds	r28, 0x01BA
     346:	d0 91 bb 01 	lds	r29, 0x01BB
		printf("-->%c ", cp-> data);
     34a:	00 e0       	ldi	r16, 0x00	; 0
     34c:	11 e0       	ldi	r17, 0x01	; 1

void tour_list() {
	struct node *cp;
	printf("\n");
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     34e:	13 c0       	rjmp	.+38     	; 0x376 <tour_list+0x44>
		printf("-->%c ", cp-> data);
     350:	00 d0       	rcall	.+0      	; 0x352 <tour_list+0x20>
     352:	00 d0       	rcall	.+0      	; 0x354 <tour_list+0x22>
     354:	ed b7       	in	r30, 0x3d	; 61
     356:	fe b7       	in	r31, 0x3e	; 62
     358:	12 83       	std	Z+2, r17	; 0x02
     35a:	01 83       	std	Z+1, r16	; 0x01
     35c:	88 81       	ld	r24, Y
     35e:	99 81       	ldd	r25, Y+1	; 0x01
     360:	94 83       	std	Z+4, r25	; 0x04
     362:	83 83       	std	Z+3, r24	; 0x03
     364:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>

void tour_list() {
	struct node *cp;
	printf("\n");
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     368:	0a 80       	ldd	r0, Y+2	; 0x02
     36a:	db 81       	ldd	r29, Y+3	; 0x03
     36c:	c0 2d       	mov	r28, r0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	20 97       	sbiw	r28, 0x00	; 0
     378:	59 f7       	brne	.-42     	; 0x350 <tour_list+0x1e>
		printf("-->%c ", cp-> data);
	printf("\n");
     37a:	8a e0       	ldi	r24, 0x0A	; 10
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 f0 06 	call	0xde0	; 0xde0 <putchar>
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	08 95       	ret

0000038c <free_list>:

void free_list()
{
	struct node *cp;
	
	for(; Head != NULL; ) {
     38c:	09 c0       	rjmp	.+18     	; 0x3a0 <free_list+0x14>
		cp = Head;
		Head = cp->link;
     38e:	fc 01       	movw	r30, r24
     390:	22 81       	ldd	r18, Z+2	; 0x02
     392:	33 81       	ldd	r19, Z+3	; 0x03
     394:	30 93 bb 01 	sts	0x01BB, r19
     398:	20 93 ba 01 	sts	0x01BA, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     39c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <free>

void free_list()
{
	struct node *cp;
	
	for(; Head != NULL; ) {
     3a0:	80 91 ba 01 	lds	r24, 0x01BA
     3a4:	90 91 bb 01 	lds	r25, 0x01BB
     3a8:	00 97       	sbiw	r24, 0x00	; 0
     3aa:	89 f7       	brne	.-30     	; 0x38e <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}	
     3ac:	08 95       	ret

000003ae <app_list>:

void app_list(char *ap)
{
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	28 97       	sbiw	r28, 0x08	; 8
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	f8 94       	cli
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	0f be       	out	0x3f, r0	; 63
     3c6:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a' ;
	struct node *np;

	if (ap) how = *ap;
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	19 f0       	breq	.+6      	; 0x3d2 <app_list+0x24>
     3cc:	fc 01       	movw	r30, r24
     3ce:	10 81       	ld	r17, Z
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <app_list+0x26>
	}
}	

void app_list(char *ap)
{
	char buf[8], how = 'a' ;
     3d2:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf( " > ");
     3d4:	87 e0       	ldi	r24, 0x07	; 7
     3d6:	e8 2e       	mov	r14, r24
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	f8 2e       	mov	r15, r24
     3dc:	00 d0       	rcall	.+0      	; 0x3de <app_list+0x30>
     3de:	ed b7       	in	r30, 0x3d	; 61
     3e0:	fe b7       	in	r31, 0x3e	; 62
     3e2:	f2 82       	std	Z+2, r15	; 0x02
     3e4:	e1 82       	std	Z+1, r14	; 0x01
     3e6:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>
		if(fgets(buf, 8, stdin) == NULL)
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	40 91 4d 02 	lds	r20, 0x024D
     3f2:	50 91 4e 02 	lds	r21, 0x024E
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	68 e0       	ldi	r22, 0x08	; 8
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	0e 94 aa 06 	call	0xd54	; 0xd54 <fgets>
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	c9 f0       	breq	.+50     	; 0x438 <app_list+0x8a>
			break;
		np = get_node();
     406:	0e 94 f7 00 	call	0x1ee	; 0x1ee <get_node>
		np -> data = buf[0];
     40a:	29 81       	ldd	r18, Y+1	; 0x01
     40c:	fc 01       	movw	r30, r24
     40e:	20 83       	st	Z, r18
     410:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     412:	18 36       	cpi	r17, 0x68	; 104
     414:	29 f0       	breq	.+10     	; 0x420 <app_list+0x72>
     416:	14 37       	cpi	r17, 0x74	; 116
     418:	31 f0       	breq	.+12     	; 0x426 <app_list+0x78>
     41a:	14 36       	cpi	r17, 0x64	; 100
     41c:	51 f4       	brne	.+20     	; 0x432 <app_list+0x84>
     41e:	06 c0       	rjmp	.+12     	; 0x42c <app_list+0x7e>
			case 'h' : insert_node_head(np); break;
     420:	0e 94 ff 00 	call	0x1fe	; 0x1fe <insert_node_head>
     424:	db cf       	rjmp	.-74     	; 0x3dc <app_list+0x2e>
			case 't' : insert_node_tail(np); break;
     426:	0e 94 14 01 	call	0x228	; 0x228 <insert_node_tail>
     42a:	d8 cf       	rjmp	.-80     	; 0x3dc <app_list+0x2e>
			case 'd' : insert_node_desc(np); break;
     42c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <insert_node_desc>
     430:	d5 cf       	rjmp	.-86     	; 0x3dc <app_list+0x2e>
			default : insert_node_ascn(np);
     432:	0e 94 2b 01 	call	0x256	; 0x256 <insert_node_ascn>
     436:	d2 cf       	rjmp	.-92     	; 0x3dc <app_list+0x2e>
		}
	}
	tour_list();
     438:	0e 94 99 01 	call	0x332	; 0x332 <tour_list>
	free_list();
     43c:	0e 94 c6 01 	call	0x38c	; 0x38c <free_list>
}
     440:	28 96       	adiw	r28, 0x08	; 8
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	ff 90       	pop	r15
     454:	ef 90       	pop	r14
     456:	08 95       	ret

00000458 <app_add>:
	}
	printf("count = %d \n", count);
}

void app_add(char *ap, char *ap1)
{
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	eb 01       	movw	r28, r22
	int num1, num2;
	num1 = atoi(ap);
     462:	0e 94 4f 06 	call	0xc9e	; 0xc9e <atoi>
     466:	8c 01       	movw	r16, r24
	num2 = atoi(ap1);
     468:	ce 01       	movw	r24, r28
     46a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <atoi>

	printf(" %d \n", num1 + num2);
     46e:	00 d0       	rcall	.+0      	; 0x470 <app_add+0x18>
     470:	00 d0       	rcall	.+0      	; 0x472 <app_add+0x1a>
     472:	2b e0       	ldi	r18, 0x0B	; 11
     474:	31 e0       	ldi	r19, 0x01	; 1
     476:	ed b7       	in	r30, 0x3d	; 61
     478:	fe b7       	in	r31, 0x3e	; 62
     47a:	32 83       	std	Z+2, r19	; 0x02
     47c:	21 83       	std	Z+1, r18	; 0x01
     47e:	08 0f       	add	r16, r24
     480:	19 1f       	adc	r17, r25
     482:	14 83       	std	Z+4, r17	; 0x04
     484:	03 83       	std	Z+3, r16	; 0x03
     486:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
}
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	08 95       	ret

0000049c <__vector_20>:
	printf( "logout, good bye !!!\n");
	while(1); return 0;
}

ISR(USART0_TX_vect)
{
     49c:	1f 92       	push	r1
     49e:	0f 92       	push	r0
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	0f 92       	push	r0
     4a4:	0b b6       	in	r0, 0x3b	; 59
     4a6:	0f 92       	push	r0
     4a8:	11 24       	eor	r1, r1
     4aa:	2f 93       	push	r18
     4ac:	3f 93       	push	r19
     4ae:	4f 93       	push	r20
     4b0:	5f 93       	push	r21
     4b2:	6f 93       	push	r22
     4b4:	7f 93       	push	r23
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	ef 93       	push	r30
     4c0:	ff 93       	push	r31
	char	ch;

	if((ch = qo_delete()) == 0)
     4c2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <qo_delete>
     4c6:	88 23       	and	r24, r24
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <__vector_20+0x34>
		uart_busy = 0;
     4ca:	10 92 48 02 	sts	0x0248, r1
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <__vector_20+0x36>
	else
		UDR0 = ch;
     4d0:	8c b9       	out	0x0c, r24	; 12
}
     4d2:	ff 91       	pop	r31
     4d4:	ef 91       	pop	r30
     4d6:	bf 91       	pop	r27
     4d8:	af 91       	pop	r26
     4da:	9f 91       	pop	r25
     4dc:	8f 91       	pop	r24
     4de:	7f 91       	pop	r23
     4e0:	6f 91       	pop	r22
     4e2:	5f 91       	pop	r21
     4e4:	4f 91       	pop	r20
     4e6:	3f 91       	pop	r19
     4e8:	2f 91       	pop	r18
     4ea:	0f 90       	pop	r0
     4ec:	0b be       	out	0x3b, r0	; 59
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_18>:

ISR(USART0_RX_vect)
{
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	0b b6       	in	r0, 0x3b	; 59
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	2f 93       	push	r18
     508:	3f 93       	push	r19
     50a:	4f 93       	push	r20
     50c:	5f 93       	push	r21
     50e:	6f 93       	push	r22
     510:	7f 93       	push	r23
     512:	8f 93       	push	r24
     514:	9f 93       	push	r25
     516:	af 93       	push	r26
     518:	bf 93       	push	r27
     51a:	cf 93       	push	r28
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     520:	cc b1       	in	r28, 0x0c	; 12
	if ( ch != E0T) {
     522:	c4 30       	cpi	r28, 0x04	; 4
     524:	31 f0       	breq	.+12     	; 0x532 <__vector_18+0x3a>
		if(ch == '\r') ch = '\n';
     526:	cd 30       	cpi	r28, 0x0D	; 13
     528:	09 f4       	brne	.+2      	; 0x52c <__vector_18+0x34>
     52a:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     52c:	8c 2f       	mov	r24, r28
     52e:	0e 94 6d 04 	call	0x8da	; 0x8da <uart_echo>
	}
	qi_insert(ch);
     532:	8c 2f       	mov	r24, r28
     534:	0e 94 79 00 	call	0xf2	; 0xf2 <qi_insert>
}
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	cf 91       	pop	r28
     53e:	bf 91       	pop	r27
     540:	af 91       	pop	r26
     542:	9f 91       	pop	r25
     544:	8f 91       	pop	r24
     546:	7f 91       	pop	r23
     548:	6f 91       	pop	r22
     54a:	5f 91       	pop	r21
     54c:	4f 91       	pop	r20
     54e:	3f 91       	pop	r19
     550:	2f 91       	pop	r18
     552:	0f 90       	pop	r0
     554:	0b be       	out	0x3b, r0	; 59
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <is_prime>:

int is_prime(int n) {
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	fc 01       	movw	r30, r24
	int i;
	for( i = 2; i <= n/2; i++)
     566:	62 e0       	ldi	r22, 0x02	; 2
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
     56e:	eb 01       	movw	r28, r22
     570:	22 e0       	ldi	r18, 0x02	; 2
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	08 c0       	rjmp	.+16     	; 0x586 <is_prime+0x26>
		if((n%i) == 0)
     576:	cf 01       	movw	r24, r30
     578:	b9 01       	movw	r22, r18
     57a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__divmodhi4>
     57e:	00 97       	sbiw	r24, 0x00	; 0
     580:	41 f0       	breq	.+16     	; 0x592 <is_prime+0x32>
	qi_insert(ch);
}

int is_prime(int n) {
	int i;
	for( i = 2; i <= n/2; i++)
     582:	2f 5f       	subi	r18, 0xFF	; 255
     584:	3f 4f       	sbci	r19, 0xFF	; 255
     586:	c2 17       	cp	r28, r18
     588:	d3 07       	cpc	r29, r19
     58a:	ac f7       	brge	.-22     	; 0x576 <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	02 c0       	rjmp	.+4      	; 0x596 <is_prime+0x36>

int is_prime(int n) {
	int i;
	for( i = 2; i <= n/2; i++)
		if((n%i) == 0)
			return 0;
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <app_prime>:

void app_prime(char *ap)
{
     59c:	cf 92       	push	r12
     59e:	df 92       	push	r13
     5a0:	ef 92       	push	r14
     5a2:	ff 92       	push	r15
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	21 f0       	breq	.+8      	; 0x5b8 <app_prime+0x1c>
     5b0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <atoi>
     5b4:	7c 01       	movw	r14, r24
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     5b8:	90 ed       	ldi	r25, 0xD0	; 208
     5ba:	e9 2e       	mov	r14, r25
     5bc:	97 e0       	ldi	r25, 0x07	; 7
     5be:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     5c0:	c2 e0       	ldi	r28, 0x02	; 2
     5c2:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     5c4:	00 e0       	ldi	r16, 0x00	; 0
     5c6:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
		if(is_prime(n)) {
			count++;
			printf( "%d is a prime. " "number !!!\n", n);
     5c8:	81 e1       	ldi	r24, 0x11	; 17
     5ca:	c8 2e       	mov	r12, r24
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     5d0:	16 c0       	rjmp	.+44     	; 0x5fe <app_prime+0x62>
		if(is_prime(n)) {
     5d2:	ce 01       	movw	r24, r28
     5d4:	0e 94 b0 02 	call	0x560	; 0x560 <is_prime>
     5d8:	00 97       	sbiw	r24, 0x00	; 0
     5da:	81 f0       	breq	.+32     	; 0x5fc <app_prime+0x60>
			count++;
     5dc:	0f 5f       	subi	r16, 0xFF	; 255
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime. " "number !!!\n", n);
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <app_prime+0x46>
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <app_prime+0x48>
     5e4:	ed b7       	in	r30, 0x3d	; 61
     5e6:	fe b7       	in	r31, 0x3e	; 62
     5e8:	d2 82       	std	Z+2, r13	; 0x02
     5ea:	c1 82       	std	Z+1, r12	; 0x01
     5ec:	d4 83       	std	Z+4, r29	; 0x04
     5ee:	c3 83       	std	Z+3, r28	; 0x03
     5f0:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     5fc:	21 96       	adiw	r28, 0x01	; 1
     5fe:	ec 16       	cp	r14, r28
     600:	fd 06       	cpc	r15, r29
     602:	3c f7       	brge	.-50     	; 0x5d2 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf( "%d is a prime. " "number !!!\n", n);
		}
	}
	printf("count = %d \n", count);
     604:	00 d0       	rcall	.+0      	; 0x606 <app_prime+0x6a>
     606:	00 d0       	rcall	.+0      	; 0x608 <app_prime+0x6c>
     608:	8c e2       	ldi	r24, 0x2C	; 44
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	ed b7       	in	r30, 0x3d	; 61
     60e:	fe b7       	in	r31, 0x3e	; 62
     610:	92 83       	std	Z+2, r25	; 0x02
     612:	81 83       	std	Z+1, r24	; 0x01
     614:	14 83       	std	Z+4, r17	; 0x04
     616:	03 83       	std	Z+3, r16	; 0x03
     618:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>
     61c:	0f 90       	pop	r0
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	0f 90       	pop	r0
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     636:	8e e0       	ldi	r24, 0x0E	; 14
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 20 05 	call	0xa40	; 0xa40 <malloc>
	return tp;
}
     63e:	08 95       	ret

00000640 <insert_timer>:

struct timer *Thead = NULL;

void insert_timer(struct task *tskp, int ms) {
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	f8 2e       	mov	r15, r24
     64e:	e9 2e       	mov	r14, r25
     650:	8b 01       	movw	r16, r22
	int	total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     652:	0e 94 1b 03 	call	0x636	; 0x636 <get_timer>
     656:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     658:	dc 01       	movw	r26, r24
     65a:	12 96       	adiw	r26, 0x02	; 2
     65c:	ef 2d       	mov	r30, r15
     65e:	fe 2d       	mov	r31, r14
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	01 90       	ld	r0, Z+
     664:	0d 92       	st	X+, r0
     666:	81 50       	subi	r24, 0x01	; 1
     668:	e1 f7       	brne	.-8      	; 0x662 <insert_timer+0x22>
	tp->time = ms;
     66a:	19 83       	std	Y+1, r17	; 0x01
     66c:	08 83       	st	Y, r16

	if (Thead == NULL) {
     66e:	e0 91 bc 01 	lds	r30, 0x01BC
     672:	f0 91 bd 01 	lds	r31, 0x01BD
     676:	30 97       	sbiw	r30, 0x00	; 0
     678:	29 f4       	brne	.+10     	; 0x684 <insert_timer+0x44>
		Thead = tp, tp->link = NULL;
     67a:	d0 93 bd 01 	sts	0x01BD, r29
     67e:	c0 93 bc 01 	sts	0x01BC, r28
     682:	2f c0       	rjmp	.+94     	; 0x6e2 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if (Thead == NULL) {
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	01 c0       	rjmp	.+2      	; 0x690 <insert_timer+0x50>
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     68e:	fd 01       	movw	r30, r26
		total += cp->time;
     690:	80 81       	ld	r24, Z
     692:	91 81       	ldd	r25, Z+1	; 0x01
     694:	28 0f       	add	r18, r24
     696:	39 1f       	adc	r19, r25
		if (total >= ms)
     698:	20 17       	cp	r18, r16
     69a:	31 07       	cpc	r19, r17
     69c:	34 f4       	brge	.+12     	; 0x6aa <insert_timer+0x6a>
	if (Thead == NULL) {
		Thead = tp, tp->link = NULL;
		return;
	}
	pp = NULL, total = 0;
	for (cp = Thead; cp; cp = cp->link) {
     69e:	a4 85       	ldd	r26, Z+12	; 0x0c
     6a0:	b5 85       	ldd	r27, Z+13	; 0x0d
     6a2:	af 01       	movw	r20, r30
     6a4:	10 97       	sbiw	r26, 0x00	; 0
     6a6:	99 f7       	brne	.-26     	; 0x68e <insert_timer+0x4e>
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <insert_timer+0x6c>
		total += cp->time;
		if (total >= ms)
     6aa:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}
	if (pp == NULL) {
     6ac:	41 15       	cp	r20, r1
     6ae:	51 05       	cpc	r21, r1
     6b0:	79 f4       	brne	.+30     	; 0x6d0 <insert_timer+0x90>
		cp->time -= tp->time;
     6b2:	8d 91       	ld	r24, X+
     6b4:	9c 91       	ld	r25, X
     6b6:	11 97       	sbiw	r26, 0x01	; 1
     6b8:	80 1b       	sub	r24, r16
     6ba:	91 0b       	sbc	r25, r17
     6bc:	11 96       	adiw	r26, 0x01	; 1
     6be:	9c 93       	st	X, r25
     6c0:	8e 93       	st	-X, r24
		tp->link = cp, Thead = tp;
     6c2:	bd 87       	std	Y+13, r27	; 0x0d
     6c4:	ac 87       	std	Y+12, r26	; 0x0c
     6c6:	d0 93 bd 01 	sts	0x01BD, r29
     6ca:	c0 93 bc 01 	sts	0x01BC, r28
     6ce:	24 c0       	rjmp	.+72     	; 0x718 <insert_timer+0xd8>
	}
	else if (cp == NULL) {
     6d0:	10 97       	sbiw	r26, 0x00	; 0
     6d2:	51 f4       	brne	.+20     	; 0x6e8 <insert_timer+0xa8>
		tp->time -= total;
     6d4:	02 1b       	sub	r16, r18
     6d6:	13 0b       	sbc	r17, r19
     6d8:	19 83       	std	Y+1, r17	; 0x01
     6da:	08 83       	st	Y, r16
		pp->link = tp;
     6dc:	fa 01       	movw	r30, r20
     6de:	d5 87       	std	Z+13, r29	; 0x0d
     6e0:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     6e2:	1d 86       	std	Y+13, r1	; 0x0d
     6e4:	1c 86       	std	Y+12, r1	; 0x0c
     6e6:	18 c0       	rjmp	.+48     	; 0x718 <insert_timer+0xd8>
	}
	else {
		total -= cp->time;
     6e8:	8d 91       	ld	r24, X+
     6ea:	9c 91       	ld	r25, X
     6ec:	11 97       	sbiw	r26, 0x01	; 1
     6ee:	b9 01       	movw	r22, r18
     6f0:	68 1b       	sub	r22, r24
     6f2:	79 0b       	sbc	r23, r25
		tp->time -= total;
     6f4:	98 01       	movw	r18, r16
     6f6:	26 1b       	sub	r18, r22
     6f8:	37 0b       	sbc	r19, r23
     6fa:	39 83       	std	Y+1, r19	; 0x01
     6fc:	28 83       	st	Y, r18
		cp->time -= tp->time;
     6fe:	8d 91       	ld	r24, X+
     700:	9c 91       	ld	r25, X
     702:	11 97       	sbiw	r26, 0x01	; 1
     704:	82 1b       	sub	r24, r18
     706:	93 0b       	sbc	r25, r19
     708:	11 96       	adiw	r26, 0x01	; 1
     70a:	9c 93       	st	X, r25
     70c:	8e 93       	st	-X, r24
		pp->link = tp;
     70e:	fa 01       	movw	r30, r20
     710:	d5 87       	std	Z+13, r29	; 0x0d
     712:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     714:	bd 87       	std	Y+13, r27	; 0x0d
     716:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	08 95       	ret

00000726 <tour_timer>:
void tour_timer()
{
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
	struct timer *cp;
	int		total = 0;

	printf("\n");
     732:	8a e0       	ldi	r24, 0x0A	; 10
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 f0 06 	call	0xde0	; 0xde0 <putchar>
	for(cp = Thead; cp != NULL; cp = cp -> link) {
     73a:	c0 91 bc 01 	lds	r28, 0x01BC
     73e:	d0 91 bd 01 	lds	r29, 0x01BD
	}
}
void tour_timer()
{
	struct timer *cp;
	int		total = 0;
     742:	00 e0       	ldi	r16, 0x00	; 0
     744:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp -> link) {
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     746:	88 e8       	ldi	r24, 0x88	; 136
     748:	e8 2e       	mov	r14, r24
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int		total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp -> link) {
     74e:	21 c0       	rjmp	.+66     	; 0x792 <tour_timer+0x6c>
		total += cp->time;
     750:	88 81       	ld	r24, Y
     752:	99 81       	ldd	r25, Y+1	; 0x01
     754:	08 0f       	add	r16, r24
     756:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     758:	00 d0       	rcall	.+0      	; 0x75a <tour_timer+0x34>
     75a:	00 d0       	rcall	.+0      	; 0x75c <tour_timer+0x36>
     75c:	00 d0       	rcall	.+0      	; 0x75e <tour_timer+0x38>
     75e:	ed b7       	in	r30, 0x3d	; 61
     760:	fe b7       	in	r31, 0x3e	; 62
     762:	31 96       	adiw	r30, 0x01	; 1
     764:	ad b7       	in	r26, 0x3d	; 61
     766:	be b7       	in	r27, 0x3e	; 62
     768:	12 96       	adiw	r26, 0x02	; 2
     76a:	fc 92       	st	X, r15
     76c:	ee 92       	st	-X, r14
     76e:	11 97       	sbiw	r26, 0x01	; 1
     770:	93 83       	std	Z+3, r25	; 0x03
     772:	82 83       	std	Z+2, r24	; 0x02
     774:	15 83       	std	Z+5, r17	; 0x05
     776:	04 83       	std	Z+4, r16	; 0x04
     778:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>
{
	struct timer *cp;
	int		total = 0;

	printf("\n");
	for(cp = Thead; cp != NULL; cp = cp -> link) {
     77c:	0c 84       	ldd	r0, Y+12	; 0x0c
     77e:	dd 85       	ldd	r29, Y+13	; 0x0d
     780:	c0 2d       	mov	r28, r0
     782:	8d b7       	in	r24, 0x3d	; 61
     784:	9e b7       	in	r25, 0x3e	; 62
     786:	06 96       	adiw	r24, 0x06	; 6
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	9e bf       	out	0x3e, r25	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	8d bf       	out	0x3d, r24	; 61
     792:	20 97       	sbiw	r28, 0x00	; 0
     794:	e9 f6       	brne	.-70     	; 0x750 <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     796:	8a e0       	ldi	r24, 0x0A	; 10
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 f0 06 	call	0xde0	; 0xde0 <putchar>
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	08 95       	ret

000007ac <free_timer>:

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <free_timer+0x14>
		cp = Thead;
		Thead = cp -> link;
     7ae:	fc 01       	movw	r30, r24
     7b0:	24 85       	ldd	r18, Z+12	; 0x0c
     7b2:	35 85       	ldd	r19, Z+13	; 0x0d
     7b4:	30 93 bd 01 	sts	0x01BD, r19
     7b8:	20 93 bc 01 	sts	0x01BC, r18
		free(cp);
     7bc:	0e 94 b6 05 	call	0xb6c	; 0xb6c <free>
}

void free_timer()
{
	struct timer *cp;
	for( ; Thead != NULL; ) {
     7c0:	80 91 bc 01 	lds	r24, 0x01BC
     7c4:	90 91 bd 01 	lds	r25, 0x01BD
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	89 f7       	brne	.-30     	; 0x7ae <free_timer+0x2>
		cp = Thead;
		Thead = cp -> link;
		free(cp);
	}
}
     7cc:	08 95       	ret

000007ce <app_timer>:

void app_timer(char *ap)
{
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	62 97       	sbiw	r28, 0x12	; 18
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
	char buf[8];
	int ms;
	struct task tsk;

	while(1) {
		printf( ">> ");
     7e6:	03 e9       	ldi	r16, 0x93	; 147
     7e8:	11 e0       	ldi	r17, 0x01	; 1
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <app_timer+0x1e>
     7ec:	ed b7       	in	r30, 0x3d	; 61
     7ee:	fe b7       	in	r31, 0x3e	; 62
     7f0:	12 83       	std	Z+2, r17	; 0x02
     7f2:	01 83       	std	Z+1, r16	; 0x01
     7f4:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) ==0)
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	40 91 4d 02 	lds	r20, 0x024D
     800:	50 91 4e 02 	lds	r21, 0x024E
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	68 e0       	ldi	r22, 0x08	; 8
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	0e 94 aa 06 	call	0xd54	; 0xd54 <fgets>
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	61 f0       	breq	.+24     	; 0x82c <app_timer+0x5e>
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	0e 94 4f 06 	call	0xc9e	; 0xc9e <atoi>
     81c:	bc 01       	movw	r22, r24
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	29 f0       	breq	.+10     	; 0x82c <app_timer+0x5e>
			break;

		insert_timer(&tsk, ms);
     822:	ce 01       	movw	r24, r28
     824:	09 96       	adiw	r24, 0x09	; 9
     826:	0e 94 20 03 	call	0x640	; 0x640 <insert_timer>
	}
     82a:	df cf       	rjmp	.-66     	; 0x7ea <app_timer+0x1c>
	tour_timer();
     82c:	0e 94 93 03 	call	0x726	; 0x726 <tour_timer>
	free_timer();
     830:	0e 94 d6 03 	call	0x7ac	; 0x7ac <free_timer>
}
     834:	62 96       	adiw	r28, 0x12	; 18
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	08 95       	ret

0000084a <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     84a:	f8 94       	cli
		ch = qi_delete();
     84c:	0e 94 9b 00 	call	0x136	; 0x136 <qi_delete>
		sei();
     850:	78 94       	sei
	} while (ch == 0);
     852:	88 23       	and	r24, r24
     854:	d1 f3       	breq	.-12     	; 0x84a <uart_getchar>

	if (ch == E0T) return -1;
     856:	84 30       	cpi	r24, 0x04	; 4
     858:	11 f0       	breq	.+4      	; 0x85e <uart_getchar+0x14>
	else			return (ch);
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	9f ef       	ldi	r25, 0xFF	; 255
	else			return (ch);
}
     862:	08 95       	ret

00000864 <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     864:	cf 93       	push	r28
     866:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     868:	8a 30       	cpi	r24, 0x0A	; 10
     86a:	19 f4       	brne	.+6      	; 0x872 <uart_putchar+0xe>
     86c:	8d e0       	ldi	r24, 0x0D	; 13
     86e:	0e 94 32 04 	call	0x864	; 0x864 <uart_putchar>

	cli();
     872:	f8 94       	cli
	if(!uart_busy) {
     874:	80 91 48 02 	lds	r24, 0x0248
     878:	88 23       	and	r24, r24
     87a:	59 f4       	brne	.+22     	; 0x892 <uart_putchar+0x2e>
		UDR0 = ch;
     87c:	cc b9       	out	0x0c, r28	; 12
		uart_busy = 1;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 48 02 	sts	0x0248, r24
     884:	0b c0       	rjmp	.+22     	; 0x89c <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     886:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     888:	81 e2       	ldi	r24, 0x21	; 33
     88a:	8a 95       	dec	r24
     88c:	f1 f7       	brne	.-4      	; 0x88a <uart_putchar+0x26>
     88e:	00 00       	nop
			_delay_us(100);
			cli();
     890:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     892:	8c 2f       	mov	r24, r28
     894:	0e 94 b8 00 	call	0x170	; 0x170 <qo_insert>
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a9 f3       	breq	.-22     	; 0x886 <uart_putchar+0x22>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     89c:	78 94       	sei
	return 1;
}
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <uart_init>:
FILE Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     8a6:	87 e9       	ldi	r24, 0x97	; 151
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	90 93 4e 02 	sts	0x024E, r25
     8ae:	80 93 4d 02 	sts	0x024D, r24
     8b2:	85 ea       	ldi	r24, 0xA5	; 165
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	90 93 50 02 	sts	0x0250, r25
     8ba:	80 93 4f 02 	sts	0x024F, r24
	q_init();
     8be:	0e 94 68 00 	call	0xd0	; 0xd0 <q_init>
	uart_busy = 0;
     8c2:	10 92 48 02 	sts	0x0248, r1

	UBRR0H = 0x00; UBRR0L = 0x07;
     8c6:	10 92 90 00 	sts	0x0090, r1
     8ca:	87 e0       	ldi	r24, 0x07	; 7
     8cc:	89 b9       	out	0x09, r24	; 9
	sbi(UCSR0A, U2X0);
     8ce:	59 9a       	sbi	0x0b, 1	; 11
	sbi(UCSR0B, TXEN0);
     8d0:	53 9a       	sbi	0x0a, 3	; 10
	sbi(UCSR0B, TXCIE0);
     8d2:	56 9a       	sbi	0x0a, 6	; 10
	sbi(UCSR0B, RXEN0);
     8d4:	54 9a       	sbi	0x0a, 4	; 10
	sbi(UCSR0B, RXCIE0);
     8d6:	57 9a       	sbi	0x0a, 7	; 10
}
     8d8:	08 95       	ret

000008da <uart_echo>:
	if (ch == E0T) return -1;
	else			return (ch);
}

void uart_echo(char ch)
{
     8da:	cf 93       	push	r28
     8dc:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     8de:	8a 30       	cpi	r24, 0x0A	; 10
     8e0:	19 f4       	brne	.+6      	; 0x8e8 <uart_echo+0xe>
     8e2:	8d e0       	ldi	r24, 0x0D	; 13
     8e4:	0e 94 6d 04 	call	0x8da	; 0x8da <uart_echo>
	if (!uart_busy) {
     8e8:	80 91 48 02 	lds	r24, 0x0248
     8ec:	88 23       	and	r24, r24
     8ee:	29 f4       	brne	.+10     	; 0x8fa <uart_echo+0x20>
		UDR0 = ch;
     8f0:	cc b9       	out	0x0c, r28	; 12
		uart_busy = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 93 48 02 	sts	0x0248, r24
     8f8:	03 c0       	rjmp	.+6      	; 0x900 <uart_echo+0x26>
	}
	else
		qo_insert(ch);
     8fa:	8c 2f       	mov	r24, r28
     8fc:	0e 94 b8 00 	call	0x170	; 0x170 <qo_insert>
}
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <main>:

int is_prime(int n);
void app_prime(char *ap);

int main()
{
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
     90c:	c0 58       	subi	r28, 0x80	; 128
     90e:	d0 40       	sbci	r29, 0x00	; 0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap, *ab;

	uart_init();
     91a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <uart_init>
	sei();
     91e:	78 94       	sei
	while(1) {
		printf("$ ");
     920:	29 e3       	ldi	r18, 0x39	; 57
     922:	a2 2e       	mov	r10, r18
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	b2 2e       	mov	r11, r18
     928:	00 d0       	rcall	.+0      	; 0x92a <main+0x26>
     92a:	ed b7       	in	r30, 0x3d	; 61
     92c:	fe b7       	in	r31, 0x3e	; 62
     92e:	b2 82       	std	Z+2, r11	; 0x02
     930:	a1 82       	std	Z+1, r10	; 0x01
     932:	0e 94 de 06 	call	0xdbc	; 0xdbc <printf>
		if (fgets(cmd, sizeof(cmd), stdin) == NULL)
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	40 91 4d 02 	lds	r20, 0x024D
     93e:	50 91 4e 02 	lds	r21, 0x024E
     942:	ce 01       	movw	r24, r28
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	60 e8       	ldi	r22, 0x80	; 128
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	0e 94 aa 06 	call	0xd54	; 0xd54 <fgets>
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	09 f4       	brne	.+2      	; 0x954 <main+0x50>
     952:	4a c0       	rjmp	.+148    	; 0x9e8 <main+0xe4>
			break;
		if((cp = strtok(cmd, "\n\r\t    ")) == NULL) continue;
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	6c e3       	ldi	r22, 0x3C	; 60
     95a:	71 e0       	ldi	r23, 0x01	; 1
     95c:	0e 94 6d 06 	call	0xcda	; 0xcda <strtok>
     960:	8c 01       	movw	r16, r24
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	09 f3       	breq	.-62     	; 0x928 <main+0x24>
		ap = strtok(NULL, "\n\r\t  ");
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	64 e4       	ldi	r22, 0x44	; 68
     96c:	71 e0       	ldi	r23, 0x01	; 1
     96e:	0e 94 6d 06 	call	0xcda	; 0xcda <strtok>
     972:	7c 01       	movw	r14, r24
		ab = strtok(NULL, "\n\r\t  ");
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	64 e4       	ldi	r22, 0x44	; 68
     97a:	71 e0       	ldi	r23, 0x01	; 1
     97c:	0e 94 6d 06 	call	0xcda	; 0xcda <strtok>
     980:	6c 01       	movw	r12, r24

		if(!strcmp(cmd, "prime")) app_prime(ap);
     982:	ce 01       	movw	r24, r28
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	6a e4       	ldi	r22, 0x4A	; 74
     988:	71 e0       	ldi	r23, 0x01	; 1
     98a:	0e 94 72 06 	call	0xce4	; 0xce4 <strcmp>
     98e:	00 97       	sbiw	r24, 0x00	; 0
     990:	21 f4       	brne	.+8      	; 0x99a <main+0x96>
     992:	c7 01       	movw	r24, r14
     994:	0e 94 ce 02 	call	0x59c	; 0x59c <app_prime>
     998:	c7 cf       	rjmp	.-114    	; 0x928 <main+0x24>
		else if (!strcmp(cp, "list" )) app_list(ap);
     99a:	c8 01       	movw	r24, r16
     99c:	60 e5       	ldi	r22, 0x50	; 80
     99e:	71 e0       	ldi	r23, 0x01	; 1
     9a0:	0e 94 72 06 	call	0xce4	; 0xce4 <strcmp>
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <main+0xac>
     9a8:	c7 01       	movw	r24, r14
     9aa:	0e 94 d7 01 	call	0x3ae	; 0x3ae <app_list>
     9ae:	bc cf       	rjmp	.-136    	; 0x928 <main+0x24>
		else if (!strcmp(cp, "timer" )) app_timer(ap);
     9b0:	c8 01       	movw	r24, r16
     9b2:	65 e5       	ldi	r22, 0x55	; 85
     9b4:	71 e0       	ldi	r23, 0x01	; 1
     9b6:	0e 94 72 06 	call	0xce4	; 0xce4 <strcmp>
     9ba:	00 97       	sbiw	r24, 0x00	; 0
     9bc:	21 f4       	brne	.+8      	; 0x9c6 <main+0xc2>
     9be:	c7 01       	movw	r24, r14
     9c0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <app_timer>
     9c4:	b1 cf       	rjmp	.-158    	; 0x928 <main+0x24>
		else if (!strcmp(cp, "add" )) app_add(ap, ab);
     9c6:	c8 01       	movw	r24, r16
     9c8:	6b e5       	ldi	r22, 0x5B	; 91
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	0e 94 72 06 	call	0xce4	; 0xce4 <strcmp>
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	29 f4       	brne	.+10     	; 0x9de <main+0xda>
     9d4:	c7 01       	movw	r24, r14
     9d6:	b6 01       	movw	r22, r12
     9d8:	0e 94 2c 02 	call	0x458	; 0x458 <app_add>
     9dc:	a5 cf       	rjmp	.-182    	; 0x928 <main+0x24>
		else						printf("Unknown command ...\n");
     9de:	8f e5       	ldi	r24, 0x5F	; 95
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	0e 94 f7 06 	call	0xdee	; 0xdee <puts>
     9e6:	a0 cf       	rjmp	.-192    	; 0x928 <main+0x24>
	}
	printf( "logout, good bye !!!\n");
     9e8:	83 e7       	ldi	r24, 0x73	; 115
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 f7 06 	call	0xdee	; 0xdee <puts>
     9f0:	ff cf       	rjmp	.-2      	; 0x9f0 <main+0xec>

000009f2 <__divmodhi4>:
     9f2:	97 fb       	bst	r25, 7
     9f4:	09 2e       	mov	r0, r25
     9f6:	07 26       	eor	r0, r23
     9f8:	0a d0       	rcall	.+20     	; 0xa0e <__divmodhi4_neg1>
     9fa:	77 fd       	sbrc	r23, 7
     9fc:	04 d0       	rcall	.+8      	; 0xa06 <__divmodhi4_neg2>
     9fe:	0c d0       	rcall	.+24     	; 0xa18 <__udivmodhi4>
     a00:	06 d0       	rcall	.+12     	; 0xa0e <__divmodhi4_neg1>
     a02:	00 20       	and	r0, r0
     a04:	1a f4       	brpl	.+6      	; 0xa0c <__divmodhi4_exit>

00000a06 <__divmodhi4_neg2>:
     a06:	70 95       	com	r23
     a08:	61 95       	neg	r22
     a0a:	7f 4f       	sbci	r23, 0xFF	; 255

00000a0c <__divmodhi4_exit>:
     a0c:	08 95       	ret

00000a0e <__divmodhi4_neg1>:
     a0e:	f6 f7       	brtc	.-4      	; 0xa0c <__divmodhi4_exit>
     a10:	90 95       	com	r25
     a12:	81 95       	neg	r24
     a14:	9f 4f       	sbci	r25, 0xFF	; 255
     a16:	08 95       	ret

00000a18 <__udivmodhi4>:
     a18:	aa 1b       	sub	r26, r26
     a1a:	bb 1b       	sub	r27, r27
     a1c:	51 e1       	ldi	r21, 0x11	; 17
     a1e:	07 c0       	rjmp	.+14     	; 0xa2e <__udivmodhi4_ep>

00000a20 <__udivmodhi4_loop>:
     a20:	aa 1f       	adc	r26, r26
     a22:	bb 1f       	adc	r27, r27
     a24:	a6 17       	cp	r26, r22
     a26:	b7 07       	cpc	r27, r23
     a28:	10 f0       	brcs	.+4      	; 0xa2e <__udivmodhi4_ep>
     a2a:	a6 1b       	sub	r26, r22
     a2c:	b7 0b       	sbc	r27, r23

00000a2e <__udivmodhi4_ep>:
     a2e:	88 1f       	adc	r24, r24
     a30:	99 1f       	adc	r25, r25
     a32:	5a 95       	dec	r21
     a34:	a9 f7       	brne	.-22     	; 0xa20 <__udivmodhi4_loop>
     a36:	80 95       	com	r24
     a38:	90 95       	com	r25
     a3a:	bc 01       	movw	r22, r24
     a3c:	cd 01       	movw	r24, r26
     a3e:	08 95       	ret

00000a40 <malloc>:
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	ac 01       	movw	r20, r24
     a46:	82 30       	cpi	r24, 0x02	; 2
     a48:	91 05       	cpc	r25, r1
     a4a:	10 f4       	brcc	.+4      	; 0xa50 <malloc+0x10>
     a4c:	42 e0       	ldi	r20, 0x02	; 2
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	e0 91 4b 02 	lds	r30, 0x024B
     a54:	f0 91 4c 02 	lds	r31, 0x024C
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	24 c0       	rjmp	.+72     	; 0xaaa <malloc+0x6a>
     a62:	80 81       	ld	r24, Z
     a64:	91 81       	ldd	r25, Z+1	; 0x01
     a66:	84 17       	cp	r24, r20
     a68:	95 07       	cpc	r25, r21
     a6a:	d0 f0       	brcs	.+52     	; 0xaa0 <malloc+0x60>
     a6c:	84 17       	cp	r24, r20
     a6e:	95 07       	cpc	r25, r21
     a70:	71 f4       	brne	.+28     	; 0xa8e <malloc+0x4e>
     a72:	82 81       	ldd	r24, Z+2	; 0x02
     a74:	93 81       	ldd	r25, Z+3	; 0x03
     a76:	10 97       	sbiw	r26, 0x00	; 0
     a78:	29 f0       	breq	.+10     	; 0xa84 <malloc+0x44>
     a7a:	13 96       	adiw	r26, 0x03	; 3
     a7c:	9c 93       	st	X, r25
     a7e:	8e 93       	st	-X, r24
     a80:	12 97       	sbiw	r26, 0x02	; 2
     a82:	2c c0       	rjmp	.+88     	; 0xadc <malloc+0x9c>
     a84:	90 93 4c 02 	sts	0x024C, r25
     a88:	80 93 4b 02 	sts	0x024B, r24
     a8c:	27 c0       	rjmp	.+78     	; 0xadc <malloc+0x9c>
     a8e:	21 15       	cp	r18, r1
     a90:	31 05       	cpc	r19, r1
     a92:	19 f0       	breq	.+6      	; 0xa9a <malloc+0x5a>
     a94:	82 17       	cp	r24, r18
     a96:	93 07       	cpc	r25, r19
     a98:	18 f4       	brcc	.+6      	; 0xaa0 <malloc+0x60>
     a9a:	9c 01       	movw	r18, r24
     a9c:	bd 01       	movw	r22, r26
     a9e:	ef 01       	movw	r28, r30
     aa0:	92 81       	ldd	r25, Z+2	; 0x02
     aa2:	83 81       	ldd	r24, Z+3	; 0x03
     aa4:	df 01       	movw	r26, r30
     aa6:	e9 2f       	mov	r30, r25
     aa8:	f8 2f       	mov	r31, r24
     aaa:	30 97       	sbiw	r30, 0x00	; 0
     aac:	d1 f6       	brne	.-76     	; 0xa62 <malloc+0x22>
     aae:	21 15       	cp	r18, r1
     ab0:	31 05       	cpc	r19, r1
     ab2:	f9 f0       	breq	.+62     	; 0xaf2 <malloc+0xb2>
     ab4:	c9 01       	movw	r24, r18
     ab6:	84 1b       	sub	r24, r20
     ab8:	95 0b       	sbc	r25, r21
     aba:	84 30       	cpi	r24, 0x04	; 4
     abc:	91 05       	cpc	r25, r1
     abe:	80 f4       	brcc	.+32     	; 0xae0 <malloc+0xa0>
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	9b 81       	ldd	r25, Y+3	; 0x03
     ac4:	61 15       	cp	r22, r1
     ac6:	71 05       	cpc	r23, r1
     ac8:	21 f0       	breq	.+8      	; 0xad2 <malloc+0x92>
     aca:	fb 01       	movw	r30, r22
     acc:	93 83       	std	Z+3, r25	; 0x03
     ace:	82 83       	std	Z+2, r24	; 0x02
     ad0:	04 c0       	rjmp	.+8      	; 0xada <malloc+0x9a>
     ad2:	90 93 4c 02 	sts	0x024C, r25
     ad6:	80 93 4b 02 	sts	0x024B, r24
     ada:	fe 01       	movw	r30, r28
     adc:	32 96       	adiw	r30, 0x02	; 2
     ade:	42 c0       	rjmp	.+132    	; 0xb64 <malloc+0x124>
     ae0:	fe 01       	movw	r30, r28
     ae2:	e8 0f       	add	r30, r24
     ae4:	f9 1f       	adc	r31, r25
     ae6:	41 93       	st	Z+, r20
     ae8:	51 93       	st	Z+, r21
     aea:	02 97       	sbiw	r24, 0x02	; 2
     aec:	99 83       	std	Y+1, r25	; 0x01
     aee:	88 83       	st	Y, r24
     af0:	39 c0       	rjmp	.+114    	; 0xb64 <malloc+0x124>
     af2:	80 91 49 02 	lds	r24, 0x0249
     af6:	90 91 4a 02 	lds	r25, 0x024A
     afa:	00 97       	sbiw	r24, 0x00	; 0
     afc:	41 f4       	brne	.+16     	; 0xb0e <malloc+0xce>
     afe:	80 91 b5 01 	lds	r24, 0x01B5
     b02:	90 91 b6 01 	lds	r25, 0x01B6
     b06:	90 93 4a 02 	sts	0x024A, r25
     b0a:	80 93 49 02 	sts	0x0249, r24
     b0e:	20 91 b3 01 	lds	r18, 0x01B3
     b12:	30 91 b4 01 	lds	r19, 0x01B4
     b16:	21 15       	cp	r18, r1
     b18:	31 05       	cpc	r19, r1
     b1a:	41 f4       	brne	.+16     	; 0xb2c <malloc+0xec>
     b1c:	2d b7       	in	r18, 0x3d	; 61
     b1e:	3e b7       	in	r19, 0x3e	; 62
     b20:	80 91 b7 01 	lds	r24, 0x01B7
     b24:	90 91 b8 01 	lds	r25, 0x01B8
     b28:	28 1b       	sub	r18, r24
     b2a:	39 0b       	sbc	r19, r25
     b2c:	e0 91 49 02 	lds	r30, 0x0249
     b30:	f0 91 4a 02 	lds	r31, 0x024A
     b34:	e2 17       	cp	r30, r18
     b36:	f3 07       	cpc	r31, r19
     b38:	98 f4       	brcc	.+38     	; 0xb60 <malloc+0x120>
     b3a:	2e 1b       	sub	r18, r30
     b3c:	3f 0b       	sbc	r19, r31
     b3e:	24 17       	cp	r18, r20
     b40:	35 07       	cpc	r19, r21
     b42:	70 f0       	brcs	.+28     	; 0xb60 <malloc+0x120>
     b44:	ca 01       	movw	r24, r20
     b46:	02 96       	adiw	r24, 0x02	; 2
     b48:	28 17       	cp	r18, r24
     b4a:	39 07       	cpc	r19, r25
     b4c:	48 f0       	brcs	.+18     	; 0xb60 <malloc+0x120>
     b4e:	8e 0f       	add	r24, r30
     b50:	9f 1f       	adc	r25, r31
     b52:	90 93 4a 02 	sts	0x024A, r25
     b56:	80 93 49 02 	sts	0x0249, r24
     b5a:	41 93       	st	Z+, r20
     b5c:	51 93       	st	Z+, r21
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <malloc+0x124>
     b60:	e0 e0       	ldi	r30, 0x00	; 0
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	cf 01       	movw	r24, r30
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <free>:
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	9c 01       	movw	r18, r24
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	09 f4       	brne	.+2      	; 0xb7c <free+0x10>
     b7a:	8c c0       	rjmp	.+280    	; 0xc94 <free+0x128>
     b7c:	dc 01       	movw	r26, r24
     b7e:	12 97       	sbiw	r26, 0x02	; 2
     b80:	13 96       	adiw	r26, 0x03	; 3
     b82:	1c 92       	st	X, r1
     b84:	1e 92       	st	-X, r1
     b86:	12 97       	sbiw	r26, 0x02	; 2
     b88:	60 91 4b 02 	lds	r22, 0x024B
     b8c:	70 91 4c 02 	lds	r23, 0x024C
     b90:	61 15       	cp	r22, r1
     b92:	71 05       	cpc	r23, r1
     b94:	89 f4       	brne	.+34     	; 0xbb8 <free+0x4c>
     b96:	8d 91       	ld	r24, X+
     b98:	9c 91       	ld	r25, X
     b9a:	11 97       	sbiw	r26, 0x01	; 1
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	20 91 49 02 	lds	r18, 0x0249
     ba4:	30 91 4a 02 	lds	r19, 0x024A
     ba8:	28 17       	cp	r18, r24
     baa:	39 07       	cpc	r19, r25
     bac:	69 f5       	brne	.+90     	; 0xc08 <free+0x9c>
     bae:	b0 93 4a 02 	sts	0x024A, r27
     bb2:	a0 93 49 02 	sts	0x0249, r26
     bb6:	6e c0       	rjmp	.+220    	; 0xc94 <free+0x128>
     bb8:	fb 01       	movw	r30, r22
     bba:	40 e0       	ldi	r20, 0x00	; 0
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <free+0x56>
     bc0:	fc 01       	movw	r30, r24
     bc2:	ea 17       	cp	r30, r26
     bc4:	fb 07       	cpc	r31, r27
     bc6:	30 f4       	brcc	.+12     	; 0xbd4 <free+0x68>
     bc8:	82 81       	ldd	r24, Z+2	; 0x02
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	af 01       	movw	r20, r30
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	b9 f7       	brne	.-18     	; 0xbc0 <free+0x54>
     bd2:	1f c0       	rjmp	.+62     	; 0xc12 <free+0xa6>
     bd4:	e9 01       	movw	r28, r18
     bd6:	22 97       	sbiw	r28, 0x02	; 2
     bd8:	fb 83       	std	Y+3, r31	; 0x03
     bda:	ea 83       	std	Y+2, r30	; 0x02
     bdc:	08 81       	ld	r16, Y
     bde:	19 81       	ldd	r17, Y+1	; 0x01
     be0:	c9 01       	movw	r24, r18
     be2:	80 0f       	add	r24, r16
     be4:	91 1f       	adc	r25, r17
     be6:	8e 17       	cp	r24, r30
     be8:	9f 07       	cpc	r25, r31
     bea:	59 f4       	brne	.+22     	; 0xc02 <free+0x96>
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	80 0f       	add	r24, r16
     bf2:	91 1f       	adc	r25, r17
     bf4:	02 96       	adiw	r24, 0x02	; 2
     bf6:	99 83       	std	Y+1, r25	; 0x01
     bf8:	88 83       	st	Y, r24
     bfa:	82 81       	ldd	r24, Z+2	; 0x02
     bfc:	93 81       	ldd	r25, Z+3	; 0x03
     bfe:	9b 83       	std	Y+3, r25	; 0x03
     c00:	8a 83       	std	Y+2, r24	; 0x02
     c02:	41 15       	cp	r20, r1
     c04:	51 05       	cpc	r21, r1
     c06:	29 f4       	brne	.+10     	; 0xc12 <free+0xa6>
     c08:	b0 93 4c 02 	sts	0x024C, r27
     c0c:	a0 93 4b 02 	sts	0x024B, r26
     c10:	41 c0       	rjmp	.+130    	; 0xc94 <free+0x128>
     c12:	fa 01       	movw	r30, r20
     c14:	b3 83       	std	Z+3, r27	; 0x03
     c16:	a2 83       	std	Z+2, r26	; 0x02
     c18:	c1 91       	ld	r28, Z+
     c1a:	d1 91       	ld	r29, Z+
     c1c:	ec 0f       	add	r30, r28
     c1e:	fd 1f       	adc	r31, r29
     c20:	ae 17       	cp	r26, r30
     c22:	bf 07       	cpc	r27, r31
     c24:	81 f4       	brne	.+32     	; 0xc46 <free+0xda>
     c26:	f9 01       	movw	r30, r18
     c28:	92 91       	ld	r25, -Z
     c2a:	82 91       	ld	r24, -Z
     c2c:	8c 0f       	add	r24, r28
     c2e:	9d 1f       	adc	r25, r29
     c30:	02 96       	adiw	r24, 0x02	; 2
     c32:	da 01       	movw	r26, r20
     c34:	11 96       	adiw	r26, 0x01	; 1
     c36:	9c 93       	st	X, r25
     c38:	8e 93       	st	-X, r24
     c3a:	82 81       	ldd	r24, Z+2	; 0x02
     c3c:	93 81       	ldd	r25, Z+3	; 0x03
     c3e:	13 96       	adiw	r26, 0x03	; 3
     c40:	9c 93       	st	X, r25
     c42:	8e 93       	st	-X, r24
     c44:	12 97       	sbiw	r26, 0x02	; 2
     c46:	e0 e0       	ldi	r30, 0x00	; 0
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <free+0xe4>
     c4c:	fb 01       	movw	r30, r22
     c4e:	bc 01       	movw	r22, r24
     c50:	db 01       	movw	r26, r22
     c52:	12 96       	adiw	r26, 0x02	; 2
     c54:	8d 91       	ld	r24, X+
     c56:	9c 91       	ld	r25, X
     c58:	13 97       	sbiw	r26, 0x03	; 3
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	b9 f7       	brne	.-18     	; 0xc4c <free+0xe0>
     c5e:	cb 01       	movw	r24, r22
     c60:	02 96       	adiw	r24, 0x02	; 2
     c62:	2d 91       	ld	r18, X+
     c64:	3c 91       	ld	r19, X
     c66:	11 97       	sbiw	r26, 0x01	; 1
     c68:	82 0f       	add	r24, r18
     c6a:	93 1f       	adc	r25, r19
     c6c:	20 91 49 02 	lds	r18, 0x0249
     c70:	30 91 4a 02 	lds	r19, 0x024A
     c74:	28 17       	cp	r18, r24
     c76:	39 07       	cpc	r19, r25
     c78:	69 f4       	brne	.+26     	; 0xc94 <free+0x128>
     c7a:	30 97       	sbiw	r30, 0x00	; 0
     c7c:	29 f4       	brne	.+10     	; 0xc88 <free+0x11c>
     c7e:	10 92 4c 02 	sts	0x024C, r1
     c82:	10 92 4b 02 	sts	0x024B, r1
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <free+0x120>
     c88:	13 82       	std	Z+3, r1	; 0x03
     c8a:	12 82       	std	Z+2, r1	; 0x02
     c8c:	70 93 4a 02 	sts	0x024A, r23
     c90:	60 93 49 02 	sts	0x0249, r22
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	08 95       	ret

00000c9e <atoi>:
     c9e:	fc 01       	movw	r30, r24
     ca0:	88 27       	eor	r24, r24
     ca2:	99 27       	eor	r25, r25
     ca4:	e8 94       	clt
     ca6:	21 91       	ld	r18, Z+
     ca8:	20 32       	cpi	r18, 0x20	; 32
     caa:	e9 f3       	breq	.-6      	; 0xca6 <atoi+0x8>
     cac:	29 30       	cpi	r18, 0x09	; 9
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <atoi+0x16>
     cb0:	2e 30       	cpi	r18, 0x0E	; 14
     cb2:	c8 f3       	brcs	.-14     	; 0xca6 <atoi+0x8>
     cb4:	2b 32       	cpi	r18, 0x2B	; 43
     cb6:	41 f0       	breq	.+16     	; 0xcc8 <atoi+0x2a>
     cb8:	2d 32       	cpi	r18, 0x2D	; 45
     cba:	39 f4       	brne	.+14     	; 0xcca <atoi+0x2c>
     cbc:	68 94       	set
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <atoi+0x2a>
     cc0:	0e 94 a2 06 	call	0xd44	; 0xd44 <__mulhi_const_10>
     cc4:	82 0f       	add	r24, r18
     cc6:	91 1d       	adc	r25, r1
     cc8:	21 91       	ld	r18, Z+
     cca:	20 53       	subi	r18, 0x30	; 48
     ccc:	2a 30       	cpi	r18, 0x0A	; 10
     cce:	c0 f3       	brcs	.-16     	; 0xcc0 <atoi+0x22>
     cd0:	1e f4       	brtc	.+6      	; 0xcd8 <atoi+0x3a>
     cd2:	90 95       	com	r25
     cd4:	81 95       	neg	r24
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	08 95       	ret

00000cda <strtok>:
     cda:	4e eb       	ldi	r20, 0xBE	; 190
     cdc:	51 e0       	ldi	r21, 0x01	; 1
     cde:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <strtok_r>
     ce2:	08 95       	ret

00000ce4 <strcmp>:
     ce4:	fb 01       	movw	r30, r22
     ce6:	dc 01       	movw	r26, r24
     ce8:	8d 91       	ld	r24, X+
     cea:	01 90       	ld	r0, Z+
     cec:	80 19       	sub	r24, r0
     cee:	01 10       	cpse	r0, r1
     cf0:	d9 f3       	breq	.-10     	; 0xce8 <strcmp+0x4>
     cf2:	99 0b       	sbc	r25, r25
     cf4:	08 95       	ret

00000cf6 <strtok_r>:
     cf6:	fa 01       	movw	r30, r20
     cf8:	a1 91       	ld	r26, Z+
     cfa:	b0 81       	ld	r27, Z
     cfc:	00 97       	sbiw	r24, 0x00	; 0
     cfe:	19 f4       	brne	.+6      	; 0xd06 <strtok_r+0x10>
     d00:	10 97       	sbiw	r26, 0x00	; 0
     d02:	e1 f0       	breq	.+56     	; 0xd3c <strtok_r+0x46>
     d04:	cd 01       	movw	r24, r26
     d06:	dc 01       	movw	r26, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	0d 90       	ld	r0, X+
     d0c:	00 20       	and	r0, r0
     d0e:	11 f4       	brne	.+4      	; 0xd14 <strtok_r+0x1e>
     d10:	c0 01       	movw	r24, r0
     d12:	13 c0       	rjmp	.+38     	; 0xd3a <strtok_r+0x44>
     d14:	fb 01       	movw	r30, r22
     d16:	21 91       	ld	r18, Z+
     d18:	22 23       	and	r18, r18
     d1a:	19 f0       	breq	.+6      	; 0xd22 <strtok_r+0x2c>
     d1c:	20 15       	cp	r18, r0
     d1e:	d9 f7       	brne	.-10     	; 0xd16 <strtok_r+0x20>
     d20:	f3 cf       	rjmp	.-26     	; 0xd08 <strtok_r+0x12>
     d22:	fb 01       	movw	r30, r22
     d24:	21 91       	ld	r18, Z+
     d26:	20 15       	cp	r18, r0
     d28:	19 f4       	brne	.+6      	; 0xd30 <strtok_r+0x3a>
     d2a:	1e 92       	st	-X, r1
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <strtok_r+0x46>
     d30:	22 23       	and	r18, r18
     d32:	c1 f7       	brne	.-16     	; 0xd24 <strtok_r+0x2e>
     d34:	0d 90       	ld	r0, X+
     d36:	00 20       	and	r0, r0
     d38:	a1 f7       	brne	.-24     	; 0xd22 <strtok_r+0x2c>
     d3a:	d0 01       	movw	r26, r0
     d3c:	fa 01       	movw	r30, r20
     d3e:	a1 93       	st	Z+, r26
     d40:	b0 83       	st	Z, r27
     d42:	08 95       	ret

00000d44 <__mulhi_const_10>:
     d44:	7a e0       	ldi	r23, 0x0A	; 10
     d46:	97 9f       	mul	r25, r23
     d48:	90 2d       	mov	r25, r0
     d4a:	87 9f       	mul	r24, r23
     d4c:	80 2d       	mov	r24, r0
     d4e:	91 0d       	add	r25, r1
     d50:	11 24       	eor	r1, r1
     d52:	08 95       	ret

00000d54 <fgets>:
     d54:	cf 92       	push	r12
     d56:	df 92       	push	r13
     d58:	ef 92       	push	r14
     d5a:	ff 92       	push	r15
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	8c 01       	movw	r16, r24
     d66:	6a 01       	movw	r12, r20
     d68:	fa 01       	movw	r30, r20
     d6a:	83 81       	ldd	r24, Z+3	; 0x03
     d6c:	80 ff       	sbrs	r24, 0
     d6e:	1a c0       	rjmp	.+52     	; 0xda4 <fgets+0x50>
     d70:	16 16       	cp	r1, r22
     d72:	17 06       	cpc	r1, r23
     d74:	bc f4       	brge	.+46     	; 0xda4 <fgets+0x50>
     d76:	7b 01       	movw	r14, r22
     d78:	e8 01       	movw	r28, r16
     d7a:	0e c0       	rjmp	.+28     	; 0xd98 <fgets+0x44>
     d7c:	c6 01       	movw	r24, r12
     d7e:	0e 94 42 09 	call	0x1284	; 0x1284 <fgetc>
     d82:	ff ef       	ldi	r31, 0xFF	; 255
     d84:	8f 3f       	cpi	r24, 0xFF	; 255
     d86:	9f 07       	cpc	r25, r31
     d88:	69 f0       	breq	.+26     	; 0xda4 <fgets+0x50>
     d8a:	89 93       	st	Y+, r24
     d8c:	08 94       	sec
     d8e:	e1 08       	sbc	r14, r1
     d90:	f1 08       	sbc	r15, r1
     d92:	8a 30       	cpi	r24, 0x0A	; 10
     d94:	91 05       	cpc	r25, r1
     d96:	21 f0       	breq	.+8      	; 0xda0 <fgets+0x4c>
     d98:	21 e0       	ldi	r18, 0x01	; 1
     d9a:	e2 16       	cp	r14, r18
     d9c:	f1 04       	cpc	r15, r1
     d9e:	71 f7       	brne	.-36     	; 0xd7c <fgets+0x28>
     da0:	18 82       	st	Y, r1
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <fgets+0x54>
     da4:	00 e0       	ldi	r16, 0x00	; 0
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	c8 01       	movw	r24, r16
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	08 95       	ret

00000dbc <printf>:
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	fe 01       	movw	r30, r28
     dc6:	35 96       	adiw	r30, 0x05	; 5
     dc8:	61 91       	ld	r22, Z+
     dca:	71 91       	ld	r23, Z+
     dcc:	80 91 4f 02 	lds	r24, 0x024F
     dd0:	90 91 50 02 	lds	r25, 0x0250
     dd4:	af 01       	movw	r20, r30
     dd6:	0e 94 25 07 	call	0xe4a	; 0xe4a <vfprintf>
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	08 95       	ret

00000de0 <putchar>:
     de0:	60 91 4f 02 	lds	r22, 0x024F
     de4:	70 91 50 02 	lds	r23, 0x0250
     de8:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
     dec:	08 95       	ret

00000dee <puts>:
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	8c 01       	movw	r16, r24
     df8:	e0 91 4f 02 	lds	r30, 0x024F
     dfc:	f0 91 50 02 	lds	r31, 0x0250
     e00:	83 81       	ldd	r24, Z+3	; 0x03
     e02:	81 ff       	sbrs	r24, 1
     e04:	1a c0       	rjmp	.+52     	; 0xe3a <puts+0x4c>
     e06:	c0 e0       	ldi	r28, 0x00	; 0
     e08:	d0 e0       	ldi	r29, 0x00	; 0
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <puts+0x28>
     e0c:	09 95       	icall
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	11 f0       	breq	.+4      	; 0xe16 <puts+0x28>
     e12:	cf ef       	ldi	r28, 0xFF	; 255
     e14:	df ef       	ldi	r29, 0xFF	; 255
     e16:	f8 01       	movw	r30, r16
     e18:	81 91       	ld	r24, Z+
     e1a:	8f 01       	movw	r16, r30
     e1c:	60 91 4f 02 	lds	r22, 0x024F
     e20:	70 91 50 02 	lds	r23, 0x0250
     e24:	db 01       	movw	r26, r22
     e26:	18 96       	adiw	r26, 0x08	; 8
     e28:	ed 91       	ld	r30, X+
     e2a:	fc 91       	ld	r31, X
     e2c:	19 97       	sbiw	r26, 0x09	; 9
     e2e:	88 23       	and	r24, r24
     e30:	69 f7       	brne	.-38     	; 0xe0c <puts+0x1e>
     e32:	8a e0       	ldi	r24, 0x0A	; 10
     e34:	09 95       	icall
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	11 f0       	breq	.+4      	; 0xe3e <puts+0x50>
     e3a:	cf ef       	ldi	r28, 0xFF	; 255
     e3c:	df ef       	ldi	r29, 0xFF	; 255
     e3e:	ce 01       	movw	r24, r28
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret

00000e4a <vfprintf>:
     e4a:	2f 92       	push	r2
     e4c:	3f 92       	push	r3
     e4e:	4f 92       	push	r4
     e50:	5f 92       	push	r5
     e52:	6f 92       	push	r6
     e54:	7f 92       	push	r7
     e56:	8f 92       	push	r8
     e58:	9f 92       	push	r9
     e5a:	af 92       	push	r10
     e5c:	bf 92       	push	r11
     e5e:	cf 92       	push	r12
     e60:	df 92       	push	r13
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	2d 97       	sbiw	r28, 0x0d	; 13
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	3c 01       	movw	r6, r24
     e80:	7d 87       	std	Y+13, r23	; 0x0d
     e82:	6c 87       	std	Y+12, r22	; 0x0c
     e84:	5a 01       	movw	r10, r20
     e86:	fc 01       	movw	r30, r24
     e88:	17 82       	std	Z+7, r1	; 0x07
     e8a:	16 82       	std	Z+6, r1	; 0x06
     e8c:	83 81       	ldd	r24, Z+3	; 0x03
     e8e:	81 ff       	sbrs	r24, 1
     e90:	c8 c1       	rjmp	.+912    	; 0x1222 <__stack+0x123>
     e92:	2e 01       	movw	r4, r28
     e94:	08 94       	sec
     e96:	41 1c       	adc	r4, r1
     e98:	51 1c       	adc	r5, r1
     e9a:	f3 01       	movw	r30, r6
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	ec 85       	ldd	r30, Y+12	; 0x0c
     ea0:	fd 85       	ldd	r31, Y+13	; 0x0d
     ea2:	93 fd       	sbrc	r25, 3
     ea4:	85 91       	lpm	r24, Z+
     ea6:	93 ff       	sbrs	r25, 3
     ea8:	81 91       	ld	r24, Z+
     eaa:	fd 87       	std	Y+13, r31	; 0x0d
     eac:	ec 87       	std	Y+12, r30	; 0x0c
     eae:	88 23       	and	r24, r24
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <vfprintf+0x6a>
     eb2:	b3 c1       	rjmp	.+870    	; 0x121a <__stack+0x11b>
     eb4:	85 32       	cpi	r24, 0x25	; 37
     eb6:	41 f4       	brne	.+16     	; 0xec8 <vfprintf+0x7e>
     eb8:	93 fd       	sbrc	r25, 3
     eba:	85 91       	lpm	r24, Z+
     ebc:	93 ff       	sbrs	r25, 3
     ebe:	81 91       	ld	r24, Z+
     ec0:	fd 87       	std	Y+13, r31	; 0x0d
     ec2:	ec 87       	std	Y+12, r30	; 0x0c
     ec4:	85 32       	cpi	r24, 0x25	; 37
     ec6:	29 f4       	brne	.+10     	; 0xed2 <vfprintf+0x88>
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	b3 01       	movw	r22, r6
     ecc:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
     ed0:	e4 cf       	rjmp	.-56     	; 0xe9a <vfprintf+0x50>
     ed2:	ff 24       	eor	r15, r15
     ed4:	ee 24       	eor	r14, r14
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	10 32       	cpi	r17, 0x20	; 32
     eda:	b0 f4       	brcc	.+44     	; 0xf08 <vfprintf+0xbe>
     edc:	8b 32       	cpi	r24, 0x2B	; 43
     ede:	69 f0       	breq	.+26     	; 0xefa <vfprintf+0xb0>
     ee0:	8c 32       	cpi	r24, 0x2C	; 44
     ee2:	28 f4       	brcc	.+10     	; 0xeee <vfprintf+0xa4>
     ee4:	80 32       	cpi	r24, 0x20	; 32
     ee6:	51 f0       	breq	.+20     	; 0xefc <vfprintf+0xb2>
     ee8:	83 32       	cpi	r24, 0x23	; 35
     eea:	71 f4       	brne	.+28     	; 0xf08 <vfprintf+0xbe>
     eec:	0b c0       	rjmp	.+22     	; 0xf04 <vfprintf+0xba>
     eee:	8d 32       	cpi	r24, 0x2D	; 45
     ef0:	39 f0       	breq	.+14     	; 0xf00 <vfprintf+0xb6>
     ef2:	80 33       	cpi	r24, 0x30	; 48
     ef4:	49 f4       	brne	.+18     	; 0xf08 <vfprintf+0xbe>
     ef6:	11 60       	ori	r17, 0x01	; 1
     ef8:	2c c0       	rjmp	.+88     	; 0xf52 <vfprintf+0x108>
     efa:	12 60       	ori	r17, 0x02	; 2
     efc:	14 60       	ori	r17, 0x04	; 4
     efe:	29 c0       	rjmp	.+82     	; 0xf52 <vfprintf+0x108>
     f00:	18 60       	ori	r17, 0x08	; 8
     f02:	27 c0       	rjmp	.+78     	; 0xf52 <vfprintf+0x108>
     f04:	10 61       	ori	r17, 0x10	; 16
     f06:	25 c0       	rjmp	.+74     	; 0xf52 <vfprintf+0x108>
     f08:	17 fd       	sbrc	r17, 7
     f0a:	2e c0       	rjmp	.+92     	; 0xf68 <vfprintf+0x11e>
     f0c:	28 2f       	mov	r18, r24
     f0e:	20 53       	subi	r18, 0x30	; 48
     f10:	2a 30       	cpi	r18, 0x0A	; 10
     f12:	98 f4       	brcc	.+38     	; 0xf3a <vfprintf+0xf0>
     f14:	16 ff       	sbrs	r17, 6
     f16:	08 c0       	rjmp	.+16     	; 0xf28 <vfprintf+0xde>
     f18:	8f 2d       	mov	r24, r15
     f1a:	88 0f       	add	r24, r24
     f1c:	f8 2e       	mov	r15, r24
     f1e:	ff 0c       	add	r15, r15
     f20:	ff 0c       	add	r15, r15
     f22:	f8 0e       	add	r15, r24
     f24:	f2 0e       	add	r15, r18
     f26:	15 c0       	rjmp	.+42     	; 0xf52 <vfprintf+0x108>
     f28:	8e 2d       	mov	r24, r14
     f2a:	88 0f       	add	r24, r24
     f2c:	e8 2e       	mov	r14, r24
     f2e:	ee 0c       	add	r14, r14
     f30:	ee 0c       	add	r14, r14
     f32:	e8 0e       	add	r14, r24
     f34:	e2 0e       	add	r14, r18
     f36:	10 62       	ori	r17, 0x20	; 32
     f38:	0c c0       	rjmp	.+24     	; 0xf52 <vfprintf+0x108>
     f3a:	8e 32       	cpi	r24, 0x2E	; 46
     f3c:	21 f4       	brne	.+8      	; 0xf46 <vfprintf+0xfc>
     f3e:	16 fd       	sbrc	r17, 6
     f40:	6c c1       	rjmp	.+728    	; 0x121a <__stack+0x11b>
     f42:	10 64       	ori	r17, 0x40	; 64
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0x108>
     f46:	8c 36       	cpi	r24, 0x6C	; 108
     f48:	11 f4       	brne	.+4      	; 0xf4e <vfprintf+0x104>
     f4a:	10 68       	ori	r17, 0x80	; 128
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <vfprintf+0x108>
     f4e:	88 36       	cpi	r24, 0x68	; 104
     f50:	59 f4       	brne	.+22     	; 0xf68 <vfprintf+0x11e>
     f52:	ec 85       	ldd	r30, Y+12	; 0x0c
     f54:	fd 85       	ldd	r31, Y+13	; 0x0d
     f56:	93 fd       	sbrc	r25, 3
     f58:	85 91       	lpm	r24, Z+
     f5a:	93 ff       	sbrs	r25, 3
     f5c:	81 91       	ld	r24, Z+
     f5e:	fd 87       	std	Y+13, r31	; 0x0d
     f60:	ec 87       	std	Y+12, r30	; 0x0c
     f62:	88 23       	and	r24, r24
     f64:	09 f0       	breq	.+2      	; 0xf68 <vfprintf+0x11e>
     f66:	b8 cf       	rjmp	.-144    	; 0xed8 <vfprintf+0x8e>
     f68:	98 2f       	mov	r25, r24
     f6a:	95 54       	subi	r25, 0x45	; 69
     f6c:	93 30       	cpi	r25, 0x03	; 3
     f6e:	18 f0       	brcs	.+6      	; 0xf76 <vfprintf+0x12c>
     f70:	90 52       	subi	r25, 0x20	; 32
     f72:	93 30       	cpi	r25, 0x03	; 3
     f74:	38 f4       	brcc	.+14     	; 0xf84 <vfprintf+0x13a>
     f76:	24 e0       	ldi	r18, 0x04	; 4
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	a2 0e       	add	r10, r18
     f7c:	b3 1e       	adc	r11, r19
     f7e:	3f e3       	ldi	r19, 0x3F	; 63
     f80:	39 83       	std	Y+1, r19	; 0x01
     f82:	0f c0       	rjmp	.+30     	; 0xfa2 <vfprintf+0x158>
     f84:	83 36       	cpi	r24, 0x63	; 99
     f86:	31 f0       	breq	.+12     	; 0xf94 <vfprintf+0x14a>
     f88:	83 37       	cpi	r24, 0x73	; 115
     f8a:	81 f0       	breq	.+32     	; 0xfac <vfprintf+0x162>
     f8c:	83 35       	cpi	r24, 0x53	; 83
     f8e:	09 f0       	breq	.+2      	; 0xf92 <vfprintf+0x148>
     f90:	5a c0       	rjmp	.+180    	; 0x1046 <vfprintf+0x1fc>
     f92:	22 c0       	rjmp	.+68     	; 0xfd8 <vfprintf+0x18e>
     f94:	f5 01       	movw	r30, r10
     f96:	80 81       	ld	r24, Z
     f98:	89 83       	std	Y+1, r24	; 0x01
     f9a:	22 e0       	ldi	r18, 0x02	; 2
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	a2 0e       	add	r10, r18
     fa0:	b3 1e       	adc	r11, r19
     fa2:	21 e0       	ldi	r18, 0x01	; 1
     fa4:	c2 2e       	mov	r12, r18
     fa6:	d1 2c       	mov	r13, r1
     fa8:	42 01       	movw	r8, r4
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <vfprintf+0x18a>
     fac:	92 e0       	ldi	r25, 0x02	; 2
     fae:	29 2e       	mov	r2, r25
     fb0:	31 2c       	mov	r3, r1
     fb2:	2a 0c       	add	r2, r10
     fb4:	3b 1c       	adc	r3, r11
     fb6:	f5 01       	movw	r30, r10
     fb8:	80 80       	ld	r8, Z
     fba:	91 80       	ldd	r9, Z+1	; 0x01
     fbc:	16 ff       	sbrs	r17, 6
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <vfprintf+0x17c>
     fc0:	6f 2d       	mov	r22, r15
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0x180>
     fc6:	6f ef       	ldi	r22, 0xFF	; 255
     fc8:	7f ef       	ldi	r23, 0xFF	; 255
     fca:	c4 01       	movw	r24, r8
     fcc:	0e 94 37 09 	call	0x126e	; 0x126e <strnlen>
     fd0:	6c 01       	movw	r12, r24
     fd2:	51 01       	movw	r10, r2
     fd4:	1f 77       	andi	r17, 0x7F	; 127
     fd6:	15 c0       	rjmp	.+42     	; 0x1002 <vfprintf+0x1b8>
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	28 2e       	mov	r2, r24
     fdc:	31 2c       	mov	r3, r1
     fde:	2a 0c       	add	r2, r10
     fe0:	3b 1c       	adc	r3, r11
     fe2:	f5 01       	movw	r30, r10
     fe4:	80 80       	ld	r8, Z
     fe6:	91 80       	ldd	r9, Z+1	; 0x01
     fe8:	16 ff       	sbrs	r17, 6
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <vfprintf+0x1a8>
     fec:	6f 2d       	mov	r22, r15
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <vfprintf+0x1ac>
     ff2:	6f ef       	ldi	r22, 0xFF	; 255
     ff4:	7f ef       	ldi	r23, 0xFF	; 255
     ff6:	c4 01       	movw	r24, r8
     ff8:	0e 94 2c 09 	call	0x1258	; 0x1258 <strnlen_P>
     ffc:	6c 01       	movw	r12, r24
     ffe:	10 68       	ori	r17, 0x80	; 128
    1000:	51 01       	movw	r10, r2
    1002:	13 fd       	sbrc	r17, 3
    1004:	1c c0       	rjmp	.+56     	; 0x103e <vfprintf+0x1f4>
    1006:	06 c0       	rjmp	.+12     	; 0x1014 <vfprintf+0x1ca>
    1008:	80 e2       	ldi	r24, 0x20	; 32
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	b3 01       	movw	r22, r6
    100e:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    1012:	ea 94       	dec	r14
    1014:	8e 2d       	mov	r24, r14
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	c8 16       	cp	r12, r24
    101a:	d9 06       	cpc	r13, r25
    101c:	a8 f3       	brcs	.-22     	; 0x1008 <vfprintf+0x1be>
    101e:	0f c0       	rjmp	.+30     	; 0x103e <vfprintf+0x1f4>
    1020:	f4 01       	movw	r30, r8
    1022:	17 fd       	sbrc	r17, 7
    1024:	85 91       	lpm	r24, Z+
    1026:	17 ff       	sbrs	r17, 7
    1028:	81 91       	ld	r24, Z+
    102a:	4f 01       	movw	r8, r30
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	b3 01       	movw	r22, r6
    1030:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    1034:	e1 10       	cpse	r14, r1
    1036:	ea 94       	dec	r14
    1038:	08 94       	sec
    103a:	c1 08       	sbc	r12, r1
    103c:	d1 08       	sbc	r13, r1
    103e:	c1 14       	cp	r12, r1
    1040:	d1 04       	cpc	r13, r1
    1042:	71 f7       	brne	.-36     	; 0x1020 <vfprintf+0x1d6>
    1044:	e7 c0       	rjmp	.+462    	; 0x1214 <__stack+0x115>
    1046:	84 36       	cpi	r24, 0x64	; 100
    1048:	11 f0       	breq	.+4      	; 0x104e <vfprintf+0x204>
    104a:	89 36       	cpi	r24, 0x69	; 105
    104c:	51 f5       	brne	.+84     	; 0x10a2 <vfprintf+0x258>
    104e:	f5 01       	movw	r30, r10
    1050:	17 ff       	sbrs	r17, 7
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <vfprintf+0x218>
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	a2 81       	ldd	r26, Z+2	; 0x02
    105a:	b3 81       	ldd	r27, Z+3	; 0x03
    105c:	24 e0       	ldi	r18, 0x04	; 4
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <vfprintf+0x228>
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	aa 27       	eor	r26, r26
    1068:	97 fd       	sbrc	r25, 7
    106a:	a0 95       	com	r26
    106c:	ba 2f       	mov	r27, r26
    106e:	22 e0       	ldi	r18, 0x02	; 2
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	a2 0e       	add	r10, r18
    1074:	b3 1e       	adc	r11, r19
    1076:	01 2f       	mov	r16, r17
    1078:	0f 76       	andi	r16, 0x6F	; 111
    107a:	b7 ff       	sbrs	r27, 7
    107c:	08 c0       	rjmp	.+16     	; 0x108e <vfprintf+0x244>
    107e:	b0 95       	com	r27
    1080:	a0 95       	com	r26
    1082:	90 95       	com	r25
    1084:	81 95       	neg	r24
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	af 4f       	sbci	r26, 0xFF	; 255
    108a:	bf 4f       	sbci	r27, 0xFF	; 255
    108c:	00 68       	ori	r16, 0x80	; 128
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	a2 01       	movw	r20, r4
    1094:	2a e0       	ldi	r18, 0x0A	; 10
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	0e 94 ae 09 	call	0x135c	; 0x135c <__ultoa_invert>
    109c:	d8 2e       	mov	r13, r24
    109e:	d4 18       	sub	r13, r4
    10a0:	3f c0       	rjmp	.+126    	; 0x1120 <__stack+0x21>
    10a2:	85 37       	cpi	r24, 0x75	; 117
    10a4:	21 f4       	brne	.+8      	; 0x10ae <vfprintf+0x264>
    10a6:	1f 7e       	andi	r17, 0xEF	; 239
    10a8:	2a e0       	ldi	r18, 0x0A	; 10
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	20 c0       	rjmp	.+64     	; 0x10ee <vfprintf+0x2a4>
    10ae:	19 7f       	andi	r17, 0xF9	; 249
    10b0:	8f 36       	cpi	r24, 0x6F	; 111
    10b2:	a9 f0       	breq	.+42     	; 0x10de <vfprintf+0x294>
    10b4:	80 37       	cpi	r24, 0x70	; 112
    10b6:	20 f4       	brcc	.+8      	; 0x10c0 <vfprintf+0x276>
    10b8:	88 35       	cpi	r24, 0x58	; 88
    10ba:	09 f0       	breq	.+2      	; 0x10be <vfprintf+0x274>
    10bc:	ae c0       	rjmp	.+348    	; 0x121a <__stack+0x11b>
    10be:	0b c0       	rjmp	.+22     	; 0x10d6 <vfprintf+0x28c>
    10c0:	80 37       	cpi	r24, 0x70	; 112
    10c2:	21 f0       	breq	.+8      	; 0x10cc <vfprintf+0x282>
    10c4:	88 37       	cpi	r24, 0x78	; 120
    10c6:	09 f0       	breq	.+2      	; 0x10ca <vfprintf+0x280>
    10c8:	a8 c0       	rjmp	.+336    	; 0x121a <__stack+0x11b>
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <vfprintf+0x284>
    10cc:	10 61       	ori	r17, 0x10	; 16
    10ce:	14 ff       	sbrs	r17, 4
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <vfprintf+0x29a>
    10d2:	14 60       	ori	r17, 0x04	; 4
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <vfprintf+0x29a>
    10d6:	14 ff       	sbrs	r17, 4
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <vfprintf+0x2a0>
    10da:	16 60       	ori	r17, 0x06	; 6
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <vfprintf+0x2a0>
    10de:	28 e0       	ldi	r18, 0x08	; 8
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <vfprintf+0x2a4>
    10e4:	20 e1       	ldi	r18, 0x10	; 16
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <vfprintf+0x2a4>
    10ea:	20 e1       	ldi	r18, 0x10	; 16
    10ec:	32 e0       	ldi	r19, 0x02	; 2
    10ee:	f5 01       	movw	r30, r10
    10f0:	17 ff       	sbrs	r17, 7
    10f2:	07 c0       	rjmp	.+14     	; 0x1102 <__stack+0x3>
    10f4:	60 81       	ld	r22, Z
    10f6:	71 81       	ldd	r23, Z+1	; 0x01
    10f8:	82 81       	ldd	r24, Z+2	; 0x02
    10fa:	93 81       	ldd	r25, Z+3	; 0x03
    10fc:	44 e0       	ldi	r20, 0x04	; 4
    10fe:	50 e0       	ldi	r21, 0x00	; 0
    1100:	06 c0       	rjmp	.+12     	; 0x110e <__stack+0xf>
    1102:	60 81       	ld	r22, Z
    1104:	71 81       	ldd	r23, Z+1	; 0x01
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	42 e0       	ldi	r20, 0x02	; 2
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	a4 0e       	add	r10, r20
    1110:	b5 1e       	adc	r11, r21
    1112:	a2 01       	movw	r20, r4
    1114:	0e 94 ae 09 	call	0x135c	; 0x135c <__ultoa_invert>
    1118:	d8 2e       	mov	r13, r24
    111a:	d4 18       	sub	r13, r4
    111c:	01 2f       	mov	r16, r17
    111e:	0f 77       	andi	r16, 0x7F	; 127
    1120:	06 ff       	sbrs	r16, 6
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <__stack+0x37>
    1124:	0e 7f       	andi	r16, 0xFE	; 254
    1126:	df 14       	cp	r13, r15
    1128:	30 f4       	brcc	.+12     	; 0x1136 <__stack+0x37>
    112a:	04 ff       	sbrs	r16, 4
    112c:	06 c0       	rjmp	.+12     	; 0x113a <__stack+0x3b>
    112e:	02 fd       	sbrc	r16, 2
    1130:	04 c0       	rjmp	.+8      	; 0x113a <__stack+0x3b>
    1132:	0f 7e       	andi	r16, 0xEF	; 239
    1134:	02 c0       	rjmp	.+4      	; 0x113a <__stack+0x3b>
    1136:	1d 2d       	mov	r17, r13
    1138:	01 c0       	rjmp	.+2      	; 0x113c <__stack+0x3d>
    113a:	1f 2d       	mov	r17, r15
    113c:	80 2f       	mov	r24, r16
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	04 ff       	sbrs	r16, 4
    1142:	0c c0       	rjmp	.+24     	; 0x115c <__stack+0x5d>
    1144:	fe 01       	movw	r30, r28
    1146:	ed 0d       	add	r30, r13
    1148:	f1 1d       	adc	r31, r1
    114a:	20 81       	ld	r18, Z
    114c:	20 33       	cpi	r18, 0x30	; 48
    114e:	11 f4       	brne	.+4      	; 0x1154 <__stack+0x55>
    1150:	09 7e       	andi	r16, 0xE9	; 233
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <__stack+0x67>
    1154:	02 ff       	sbrs	r16, 2
    1156:	06 c0       	rjmp	.+12     	; 0x1164 <__stack+0x65>
    1158:	1e 5f       	subi	r17, 0xFE	; 254
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <__stack+0x67>
    115c:	86 78       	andi	r24, 0x86	; 134
    115e:	90 70       	andi	r25, 0x00	; 0
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	09 f0       	breq	.+2      	; 0x1166 <__stack+0x67>
    1164:	1f 5f       	subi	r17, 0xFF	; 255
    1166:	80 2e       	mov	r8, r16
    1168:	99 24       	eor	r9, r9
    116a:	03 fd       	sbrc	r16, 3
    116c:	12 c0       	rjmp	.+36     	; 0x1192 <__stack+0x93>
    116e:	00 ff       	sbrs	r16, 0
    1170:	0d c0       	rjmp	.+26     	; 0x118c <__stack+0x8d>
    1172:	fd 2c       	mov	r15, r13
    1174:	1e 15       	cp	r17, r14
    1176:	50 f4       	brcc	.+20     	; 0x118c <__stack+0x8d>
    1178:	fe 0c       	add	r15, r14
    117a:	f1 1a       	sub	r15, r17
    117c:	1e 2d       	mov	r17, r14
    117e:	06 c0       	rjmp	.+12     	; 0x118c <__stack+0x8d>
    1180:	80 e2       	ldi	r24, 0x20	; 32
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	b3 01       	movw	r22, r6
    1186:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    118a:	1f 5f       	subi	r17, 0xFF	; 255
    118c:	1e 15       	cp	r17, r14
    118e:	c0 f3       	brcs	.-16     	; 0x1180 <__stack+0x81>
    1190:	04 c0       	rjmp	.+8      	; 0x119a <__stack+0x9b>
    1192:	1e 15       	cp	r17, r14
    1194:	10 f4       	brcc	.+4      	; 0x119a <__stack+0x9b>
    1196:	e1 1a       	sub	r14, r17
    1198:	01 c0       	rjmp	.+2      	; 0x119c <__stack+0x9d>
    119a:	ee 24       	eor	r14, r14
    119c:	84 fe       	sbrs	r8, 4
    119e:	0f c0       	rjmp	.+30     	; 0x11be <__stack+0xbf>
    11a0:	80 e3       	ldi	r24, 0x30	; 48
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	b3 01       	movw	r22, r6
    11a6:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    11aa:	82 fe       	sbrs	r8, 2
    11ac:	1f c0       	rjmp	.+62     	; 0x11ec <__stack+0xed>
    11ae:	81 fe       	sbrs	r8, 1
    11b0:	03 c0       	rjmp	.+6      	; 0x11b8 <__stack+0xb9>
    11b2:	88 e5       	ldi	r24, 0x58	; 88
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	10 c0       	rjmp	.+32     	; 0x11d8 <__stack+0xd9>
    11b8:	88 e7       	ldi	r24, 0x78	; 120
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0d c0       	rjmp	.+26     	; 0x11d8 <__stack+0xd9>
    11be:	c4 01       	movw	r24, r8
    11c0:	86 78       	andi	r24, 0x86	; 134
    11c2:	90 70       	andi	r25, 0x00	; 0
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	91 f0       	breq	.+36     	; 0x11ec <__stack+0xed>
    11c8:	81 fc       	sbrc	r8, 1
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <__stack+0xd1>
    11cc:	80 e2       	ldi	r24, 0x20	; 32
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <__stack+0xd3>
    11d0:	8b e2       	ldi	r24, 0x2B	; 43
    11d2:	07 fd       	sbrc	r16, 7
    11d4:	8d e2       	ldi	r24, 0x2D	; 45
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	b3 01       	movw	r22, r6
    11da:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <__stack+0xed>
    11e0:	80 e3       	ldi	r24, 0x30	; 48
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	b3 01       	movw	r22, r6
    11e6:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    11ea:	fa 94       	dec	r15
    11ec:	df 14       	cp	r13, r15
    11ee:	c0 f3       	brcs	.-16     	; 0x11e0 <__stack+0xe1>
    11f0:	da 94       	dec	r13
    11f2:	f2 01       	movw	r30, r4
    11f4:	ed 0d       	add	r30, r13
    11f6:	f1 1d       	adc	r31, r1
    11f8:	80 81       	ld	r24, Z
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	b3 01       	movw	r22, r6
    11fe:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    1202:	dd 20       	and	r13, r13
    1204:	a9 f7       	brne	.-22     	; 0x11f0 <__stack+0xf1>
    1206:	06 c0       	rjmp	.+12     	; 0x1214 <__stack+0x115>
    1208:	80 e2       	ldi	r24, 0x20	; 32
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	b3 01       	movw	r22, r6
    120e:	0e 94 82 09 	call	0x1304	; 0x1304 <fputc>
    1212:	ea 94       	dec	r14
    1214:	ee 20       	and	r14, r14
    1216:	c1 f7       	brne	.-16     	; 0x1208 <__stack+0x109>
    1218:	40 ce       	rjmp	.-896    	; 0xe9a <vfprintf+0x50>
    121a:	f3 01       	movw	r30, r6
    121c:	86 81       	ldd	r24, Z+6	; 0x06
    121e:	97 81       	ldd	r25, Z+7	; 0x07
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <__stack+0x127>
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	2d 96       	adiw	r28, 0x0d	; 13
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	bf 90       	pop	r11
    1244:	af 90       	pop	r10
    1246:	9f 90       	pop	r9
    1248:	8f 90       	pop	r8
    124a:	7f 90       	pop	r7
    124c:	6f 90       	pop	r6
    124e:	5f 90       	pop	r5
    1250:	4f 90       	pop	r4
    1252:	3f 90       	pop	r3
    1254:	2f 90       	pop	r2
    1256:	08 95       	ret

00001258 <strnlen_P>:
    1258:	fc 01       	movw	r30, r24
    125a:	05 90       	lpm	r0, Z+
    125c:	61 50       	subi	r22, 0x01	; 1
    125e:	70 40       	sbci	r23, 0x00	; 0
    1260:	01 10       	cpse	r0, r1
    1262:	d8 f7       	brcc	.-10     	; 0x125a <strnlen_P+0x2>
    1264:	80 95       	com	r24
    1266:	90 95       	com	r25
    1268:	8e 0f       	add	r24, r30
    126a:	9f 1f       	adc	r25, r31
    126c:	08 95       	ret

0000126e <strnlen>:
    126e:	fc 01       	movw	r30, r24
    1270:	61 50       	subi	r22, 0x01	; 1
    1272:	70 40       	sbci	r23, 0x00	; 0
    1274:	01 90       	ld	r0, Z+
    1276:	01 10       	cpse	r0, r1
    1278:	d8 f7       	brcc	.-10     	; 0x1270 <strnlen+0x2>
    127a:	80 95       	com	r24
    127c:	90 95       	com	r25
    127e:	8e 0f       	add	r24, r30
    1280:	9f 1f       	adc	r25, r31
    1282:	08 95       	ret

00001284 <fgetc>:
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ec 01       	movw	r28, r24
    128a:	2b 81       	ldd	r18, Y+3	; 0x03
    128c:	20 ff       	sbrs	r18, 0
    128e:	35 c0       	rjmp	.+106    	; 0x12fa <fgetc+0x76>
    1290:	26 ff       	sbrs	r18, 6
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <fgetc+0x22>
    1294:	2f 7b       	andi	r18, 0xBF	; 191
    1296:	2b 83       	std	Y+3, r18	; 0x03
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	9f 81       	ldd	r25, Y+7	; 0x07
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	9f 83       	std	Y+7, r25	; 0x07
    12a0:	8e 83       	std	Y+6, r24	; 0x06
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 c0       	rjmp	.+80     	; 0x12f6 <fgetc+0x72>
    12a6:	22 ff       	sbrs	r18, 2
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <fgetc+0x44>
    12aa:	e8 81       	ld	r30, Y
    12ac:	f9 81       	ldd	r31, Y+1	; 0x01
    12ae:	80 81       	ld	r24, Z
    12b0:	99 27       	eor	r25, r25
    12b2:	87 fd       	sbrc	r24, 7
    12b4:	90 95       	com	r25
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	19 f4       	brne	.+6      	; 0x12c0 <fgetc+0x3c>
    12ba:	20 62       	ori	r18, 0x20	; 32
    12bc:	2b 83       	std	Y+3, r18	; 0x03
    12be:	1d c0       	rjmp	.+58     	; 0x12fa <fgetc+0x76>
    12c0:	31 96       	adiw	r30, 0x01	; 1
    12c2:	f9 83       	std	Y+1, r31	; 0x01
    12c4:	e8 83       	st	Y, r30
    12c6:	11 c0       	rjmp	.+34     	; 0x12ea <fgetc+0x66>
    12c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    12ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    12cc:	ce 01       	movw	r24, r28
    12ce:	09 95       	icall
    12d0:	97 ff       	sbrs	r25, 7
    12d2:	0b c0       	rjmp	.+22     	; 0x12ea <fgetc+0x66>
    12d4:	2b 81       	ldd	r18, Y+3	; 0x03
    12d6:	3f ef       	ldi	r19, 0xFF	; 255
    12d8:	8f 3f       	cpi	r24, 0xFF	; 255
    12da:	93 07       	cpc	r25, r19
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <fgetc+0x5e>
    12de:	80 e1       	ldi	r24, 0x10	; 16
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <fgetc+0x60>
    12e2:	80 e2       	ldi	r24, 0x20	; 32
    12e4:	82 2b       	or	r24, r18
    12e6:	8b 83       	std	Y+3, r24	; 0x03
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <fgetc+0x76>
    12ea:	2e 81       	ldd	r18, Y+6	; 0x06
    12ec:	3f 81       	ldd	r19, Y+7	; 0x07
    12ee:	2f 5f       	subi	r18, 0xFF	; 255
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	3f 83       	std	Y+7, r19	; 0x07
    12f4:	2e 83       	std	Y+6, r18	; 0x06
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <fgetc+0x7a>
    12fa:	8f ef       	ldi	r24, 0xFF	; 255
    12fc:	9f ef       	ldi	r25, 0xFF	; 255
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <fputc>:
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	8c 01       	movw	r16, r24
    130e:	eb 01       	movw	r28, r22
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	81 ff       	sbrs	r24, 1
    1314:	1b c0       	rjmp	.+54     	; 0x134c <fputc+0x48>
    1316:	82 ff       	sbrs	r24, 2
    1318:	0d c0       	rjmp	.+26     	; 0x1334 <fputc+0x30>
    131a:	2e 81       	ldd	r18, Y+6	; 0x06
    131c:	3f 81       	ldd	r19, Y+7	; 0x07
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	28 17       	cp	r18, r24
    1324:	39 07       	cpc	r19, r25
    1326:	64 f4       	brge	.+24     	; 0x1340 <fputc+0x3c>
    1328:	e8 81       	ld	r30, Y
    132a:	f9 81       	ldd	r31, Y+1	; 0x01
    132c:	01 93       	st	Z+, r16
    132e:	f9 83       	std	Y+1, r31	; 0x01
    1330:	e8 83       	st	Y, r30
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <fputc+0x3c>
    1334:	e8 85       	ldd	r30, Y+8	; 0x08
    1336:	f9 85       	ldd	r31, Y+9	; 0x09
    1338:	80 2f       	mov	r24, r16
    133a:	09 95       	icall
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	31 f4       	brne	.+12     	; 0x134c <fputc+0x48>
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
    1342:	9f 81       	ldd	r25, Y+7	; 0x07
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	9f 83       	std	Y+7, r25	; 0x07
    1348:	8e 83       	std	Y+6, r24	; 0x06
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <fputc+0x4c>
    134c:	0f ef       	ldi	r16, 0xFF	; 255
    134e:	1f ef       	ldi	r17, 0xFF	; 255
    1350:	c8 01       	movw	r24, r16
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	08 95       	ret

0000135c <__ultoa_invert>:
    135c:	fa 01       	movw	r30, r20
    135e:	aa 27       	eor	r26, r26
    1360:	28 30       	cpi	r18, 0x08	; 8
    1362:	51 f1       	breq	.+84     	; 0x13b8 <__ultoa_invert+0x5c>
    1364:	20 31       	cpi	r18, 0x10	; 16
    1366:	81 f1       	breq	.+96     	; 0x13c8 <__ultoa_invert+0x6c>
    1368:	e8 94       	clt
    136a:	6f 93       	push	r22
    136c:	6e 7f       	andi	r22, 0xFE	; 254
    136e:	6e 5f       	subi	r22, 0xFE	; 254
    1370:	7f 4f       	sbci	r23, 0xFF	; 255
    1372:	8f 4f       	sbci	r24, 0xFF	; 255
    1374:	9f 4f       	sbci	r25, 0xFF	; 255
    1376:	af 4f       	sbci	r26, 0xFF	; 255
    1378:	b1 e0       	ldi	r27, 0x01	; 1
    137a:	3e d0       	rcall	.+124    	; 0x13f8 <__ultoa_invert+0x9c>
    137c:	b4 e0       	ldi	r27, 0x04	; 4
    137e:	3c d0       	rcall	.+120    	; 0x13f8 <__ultoa_invert+0x9c>
    1380:	67 0f       	add	r22, r23
    1382:	78 1f       	adc	r23, r24
    1384:	89 1f       	adc	r24, r25
    1386:	9a 1f       	adc	r25, r26
    1388:	a1 1d       	adc	r26, r1
    138a:	68 0f       	add	r22, r24
    138c:	79 1f       	adc	r23, r25
    138e:	8a 1f       	adc	r24, r26
    1390:	91 1d       	adc	r25, r1
    1392:	a1 1d       	adc	r26, r1
    1394:	6a 0f       	add	r22, r26
    1396:	71 1d       	adc	r23, r1
    1398:	81 1d       	adc	r24, r1
    139a:	91 1d       	adc	r25, r1
    139c:	a1 1d       	adc	r26, r1
    139e:	20 d0       	rcall	.+64     	; 0x13e0 <__ultoa_invert+0x84>
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <__ultoa_invert+0x48>
    13a2:	68 94       	set
    13a4:	3f 91       	pop	r19
    13a6:	2a e0       	ldi	r18, 0x0A	; 10
    13a8:	26 9f       	mul	r18, r22
    13aa:	11 24       	eor	r1, r1
    13ac:	30 19       	sub	r19, r0
    13ae:	30 5d       	subi	r19, 0xD0	; 208
    13b0:	31 93       	st	Z+, r19
    13b2:	de f6       	brtc	.-74     	; 0x136a <__ultoa_invert+0xe>
    13b4:	cf 01       	movw	r24, r30
    13b6:	08 95       	ret
    13b8:	46 2f       	mov	r20, r22
    13ba:	47 70       	andi	r20, 0x07	; 7
    13bc:	40 5d       	subi	r20, 0xD0	; 208
    13be:	41 93       	st	Z+, r20
    13c0:	b3 e0       	ldi	r27, 0x03	; 3
    13c2:	0f d0       	rcall	.+30     	; 0x13e2 <__ultoa_invert+0x86>
    13c4:	c9 f7       	brne	.-14     	; 0x13b8 <__ultoa_invert+0x5c>
    13c6:	f6 cf       	rjmp	.-20     	; 0x13b4 <__ultoa_invert+0x58>
    13c8:	46 2f       	mov	r20, r22
    13ca:	4f 70       	andi	r20, 0x0F	; 15
    13cc:	40 5d       	subi	r20, 0xD0	; 208
    13ce:	4a 33       	cpi	r20, 0x3A	; 58
    13d0:	18 f0       	brcs	.+6      	; 0x13d8 <__ultoa_invert+0x7c>
    13d2:	49 5d       	subi	r20, 0xD9	; 217
    13d4:	31 fd       	sbrc	r19, 1
    13d6:	40 52       	subi	r20, 0x20	; 32
    13d8:	41 93       	st	Z+, r20
    13da:	02 d0       	rcall	.+4      	; 0x13e0 <__ultoa_invert+0x84>
    13dc:	a9 f7       	brne	.-22     	; 0x13c8 <__ultoa_invert+0x6c>
    13de:	ea cf       	rjmp	.-44     	; 0x13b4 <__ultoa_invert+0x58>
    13e0:	b4 e0       	ldi	r27, 0x04	; 4
    13e2:	a6 95       	lsr	r26
    13e4:	97 95       	ror	r25
    13e6:	87 95       	ror	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	ba 95       	dec	r27
    13ee:	c9 f7       	brne	.-14     	; 0x13e2 <__ultoa_invert+0x86>
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	61 05       	cpc	r22, r1
    13f4:	71 05       	cpc	r23, r1
    13f6:	08 95       	ret
    13f8:	9b 01       	movw	r18, r22
    13fa:	ac 01       	movw	r20, r24
    13fc:	0a 2e       	mov	r0, r26
    13fe:	06 94       	lsr	r0
    1400:	57 95       	ror	r21
    1402:	47 95       	ror	r20
    1404:	37 95       	ror	r19
    1406:	27 95       	ror	r18
    1408:	ba 95       	dec	r27
    140a:	c9 f7       	brne	.-14     	; 0x13fe <__ultoa_invert+0xa2>
    140c:	62 0f       	add	r22, r18
    140e:	73 1f       	adc	r23, r19
    1410:	84 1f       	adc	r24, r20
    1412:	95 1f       	adc	r25, r21
    1414:	a0 1d       	adc	r26, r0
    1416:	08 95       	ret

00001418 <_exit>:
    1418:	f8 94       	cli

0000141a <__stop_program>:
    141a:	ff cf       	rjmp	.-2      	; 0x141a <__stop_program>
