
pjt12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f6  00800200  000028fe  00002992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000028fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000141  008003f6  008003f6  00002b88  2**0
                  ALLOC
  3 .stab         00001314  00000000  00000000  00002b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000492  00000000  00000000  00003e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000470  00000000  00000000  00004330  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004805  00000000  00000000  000047a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002334  00000000  00000000  00008fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002396  00000000  00000000  0000b2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c70  00000000  00000000  0000d670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c2e  00000000  00000000  0000e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034a6  00000000  00000000  0000ef0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000123b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__ctors_end>
       4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
       c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      10:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      14:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      18:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      1c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      20:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      24:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      28:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      2c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      30:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      34:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      38:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      3c:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_15>
      40:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      44:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      48:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      50:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      54:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      58:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      5c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      60:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      64:	0c 94 91 05 	jmp	0xb22	; 0xb22 <__vector_25>
      68:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      6c:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__vector_27>
      70:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      74:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__vector_29>
      78:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      7c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      80:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      84:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      88:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      8c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      90:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      94:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      98:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      9c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      a8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      ac:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      b8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      bc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      c8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      cc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d4:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      d8:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      dc:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>
      e0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__bad_interrupt>

000000e4 <__c.2043>:
      e4:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	13 e0       	ldi	r17, 0x03	; 3
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	ee ef       	ldi	r30, 0xFE	; 254
     108:	f8 e2       	ldi	r31, 0x28	; 40
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a6 3f       	cpi	r26, 0xF6	; 246
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
     11a:	1b be       	out	0x3b, r1	; 59

0000011c <__do_clear_bss>:
     11c:	15 e0       	ldi	r17, 0x05	; 5
     11e:	a6 ef       	ldi	r26, 0xF6	; 246
     120:	b3 e0       	ldi	r27, 0x03	; 3
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a7 33       	cpi	r26, 0x37	; 55
     128:	b1 07       	cpc	r27, r17
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>
     12c:	0e 94 85 0b 	call	0x170a	; 0x170a <main>
     130:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <_exit>

00000134 <__bad_interrupt>:
     134:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000138 <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = ( struct node *)malloc(sizeof(struct node));
     138:	84 e0       	ldi	r24, 0x04	; 4
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 0f 0c 	call	0x181e	; 0x181e <malloc>
	return(cp);
}
     140:	08 95       	ret

00000142 <free_node>:

void free_node(struct node *np)
{
	free(np);
     142:	0e 94 a5 0c 	call	0x194a	; 0x194a <free>
}
     146:	08 95       	ret

00000148 <insert_node_head>:

void insert_node_head(struct node *np)
{
     148:	fc 01       	movw	r30, r24
	if(!Head) {
     14a:	80 91 f6 03 	lds	r24, 0x03F6
     14e:	90 91 f7 03 	lds	r25, 0x03F7
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	39 f4       	brne	.+14     	; 0x164 <insert_node_head+0x1c>
		Head = np;
     156:	f0 93 f7 03 	sts	0x03F7, r31
     15a:	e0 93 f6 03 	sts	0x03F6, r30
		np->link = NULL;
     15e:	13 82       	std	Z+3, r1	; 0x03
     160:	12 82       	std	Z+2, r1	; 0x02
     162:	08 95       	ret
	}
	else {
		np->link = Head;
     164:	93 83       	std	Z+3, r25	; 0x03
     166:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     168:	f0 93 f7 03 	sts	0x03F7, r31
     16c:	e0 93 f6 03 	sts	0x03F6, r30
     170:	08 95       	ret

00000172 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     172:	e0 91 f6 03 	lds	r30, 0x03F6
     176:	f0 91 f7 03 	lds	r31, 0x03F7
     17a:	30 97       	sbiw	r30, 0x00	; 0
     17c:	31 f4       	brne	.+12     	; 0x18a <insert_node_tail+0x18>
		Head = np;
     17e:	90 93 f7 03 	sts	0x03F7, r25
     182:	80 93 f6 03 	sts	0x03F6, r24
     186:	08 c0       	rjmp	.+16     	; 0x198 <insert_node_tail+0x26>
	else {
			for (cp = Head; cp->link != NULL; cp = cp->link)
     188:	f9 01       	movw	r30, r18
     18a:	22 81       	ldd	r18, Z+2	; 0x02
     18c:	33 81       	ldd	r19, Z+3	; 0x03
     18e:	21 15       	cp	r18, r1
     190:	31 05       	cpc	r19, r1
     192:	d1 f7       	brne	.-12     	; 0x188 <insert_node_tail+0x16>
			;
			cp->link = np;
     194:	93 83       	std	Z+3, r25	; 0x03
     196:	82 83       	std	Z+2, r24	; 0x02
		}
		np->link=NULL;
     198:	fc 01       	movw	r30, r24
     19a:	13 82       	std	Z+3, r1	; 0x03
     19c:	12 82       	std	Z+2, r1	; 0x02
}
     19e:	08 95       	ret

000001a0 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	fc 01       	movw	r30, r24
	struct node *cp, *pp;

	if(!Head){
     1a6:	20 91 f6 03 	lds	r18, 0x03F6
     1aa:	30 91 f7 03 	lds	r19, 0x03F7
     1ae:	21 15       	cp	r18, r1
     1b0:	31 05       	cpc	r19, r1
     1b2:	31 f0       	breq	.+12     	; 0x1c0 <insert_node_ascn+0x20>
		Head = np;
		np->link = NULL;
	}
	else {
		for(cp=Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     1b4:	40 81       	ld	r20, Z
     1b6:	51 81       	ldd	r21, Z+1	; 0x01
     1b8:	d9 01       	movw	r26, r18
     1ba:	c0 e0       	ldi	r28, 0x00	; 0
     1bc:	d0 e0       	ldi	r29, 0x00	; 0
     1be:	0f c0       	rjmp	.+30     	; 0x1de <insert_node_ascn+0x3e>
void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;

	if(!Head){
		Head = np;
     1c0:	90 93 f7 03 	sts	0x03F7, r25
     1c4:	80 93 f6 03 	sts	0x03F6, r24
		np->link = NULL;
     1c8:	13 82       	std	Z+3, r1	; 0x03
     1ca:	12 82       	std	Z+2, r1	; 0x02
     1cc:	1d c0       	rjmp	.+58     	; 0x208 <insert_node_ascn+0x68>
	}
	else {
		for(cp=Head, pp = NULL; cp != NULL && cp->data < np->data; pp = cp, cp = cp->link)
     1ce:	12 96       	adiw	r26, 0x02	; 2
     1d0:	8d 91       	ld	r24, X+
     1d2:	9c 91       	ld	r25, X
     1d4:	13 97       	sbiw	r26, 0x03	; 3
     1d6:	ed 01       	movw	r28, r26
     1d8:	00 97       	sbiw	r24, 0x00	; 0
     1da:	39 f0       	breq	.+14     	; 0x1ea <insert_node_ascn+0x4a>
     1dc:	dc 01       	movw	r26, r24
     1de:	8d 91       	ld	r24, X+
     1e0:	9c 91       	ld	r25, X
     1e2:	11 97       	sbiw	r26, 0x01	; 1
     1e4:	84 17       	cp	r24, r20
     1e6:	95 07       	cpc	r25, r21
     1e8:	94 f3       	brlt	.-28     	; 0x1ce <insert_node_ascn+0x2e>
			;
		if(pp==NULL){
     1ea:	20 97       	sbiw	r28, 0x00	; 0
     1ec:	39 f4       	brne	.+14     	; 0x1fc <insert_node_ascn+0x5c>
			np->link = Head;
     1ee:	33 83       	std	Z+3, r19	; 0x03
     1f0:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     1f2:	f0 93 f7 03 	sts	0x03F7, r31
     1f6:	e0 93 f6 03 	sts	0x03F6, r30
     1fa:	06 c0       	rjmp	.+12     	; 0x208 <insert_node_ascn+0x68>
		} else {
			np->link =  pp->link;
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	9b 81       	ldd	r25, Y+3	; 0x03
     200:	93 83       	std	Z+3, r25	; 0x03
     202:	82 83       	std	Z+2, r24	; 0x02
			pp->link = np;
     204:	fb 83       	std	Y+3, r31	; 0x03
     206:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <tour_list>:
void tour_list()
{
     20e:	0f 93       	push	r16
     210:	1f 93       	push	r17
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
	struct node *cp;

	printf("\n");
     216:	8a e0       	ldi	r24, 0x0A	; 10
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <putchar>
	for (cp=Head; cp != NULL; cp = cp->link)
     21e:	c0 91 f6 03 	lds	r28, 0x03F6
     222:	d0 91 f7 03 	lds	r29, 0x03F7
		printf("-->%c ", cp->data);
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	12 e0       	ldi	r17, 0x02	; 2
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp=Head; cp != NULL; cp = cp->link)
     22a:	13 c0       	rjmp	.+38     	; 0x252 <tour_list+0x44>
		printf("-->%c ", cp->data);
     22c:	00 d0       	rcall	.+0      	; 0x22e <tour_list+0x20>
     22e:	0f 92       	push	r0
     230:	ed b7       	in	r30, 0x3d	; 61
     232:	fe b7       	in	r31, 0x3e	; 62
     234:	12 83       	std	Z+2, r17	; 0x02
     236:	01 83       	std	Z+1, r16	; 0x01
     238:	88 81       	ld	r24, Y
     23a:	99 81       	ldd	r25, Y+1	; 0x01
     23c:	94 83       	std	Z+4, r25	; 0x04
     23e:	83 83       	std	Z+3, r24	; 0x03
     240:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
void tour_list()
{
	struct node *cp;

	printf("\n");
	for (cp=Head; cp != NULL; cp = cp->link)
     244:	0a 80       	ldd	r0, Y+2	; 0x02
     246:	db 81       	ldd	r29, Y+3	; 0x03
     248:	c0 2d       	mov	r28, r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	20 97       	sbiw	r28, 0x00	; 0
     254:	59 f7       	brne	.-42     	; 0x22c <tour_list+0x1e>
		printf("-->%c ", cp->data);
		printf("\n");
     256:	8a e0       	ldi	r24, 0x0A	; 10
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <putchar>
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	0f 91       	pop	r16
     266:	08 95       	ret

00000268 <free_list>:

void free_list()
{
	struct node *cp;

	for (; Head != NULL; ) {
     268:	09 c0       	rjmp	.+18     	; 0x27c <free_list+0x14>
		cp = Head;
		Head = cp->link;
     26a:	fc 01       	movw	r30, r24
     26c:	22 81       	ldd	r18, Z+2	; 0x02
     26e:	33 81       	ldd	r19, Z+3	; 0x03
     270:	30 93 f7 03 	sts	0x03F7, r19
     274:	20 93 f6 03 	sts	0x03F6, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     278:	0e 94 a5 0c 	call	0x194a	; 0x194a <free>

void free_list()
{
	struct node *cp;

	for (; Head != NULL; ) {
     27c:	80 91 f6 03 	lds	r24, 0x03F6
     280:	90 91 f7 03 	lds	r25, 0x03F7
     284:	00 97       	sbiw	r24, 0x00	; 0
     286:	89 f7       	brne	.-30     	; 0x26a <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}
     288:	08 95       	ret

0000028a <app_list>:

void app_list(char *ap){
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	1f 93       	push	r17
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	28 97       	sbiw	r28, 0x08	; 8
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a';
	struct node *np;

	if (ap) how = *ap;
     2a4:	00 97       	sbiw	r24, 0x00	; 0
     2a6:	19 f0       	breq	.+6      	; 0x2ae <app_list+0x24>
     2a8:	fc 01       	movw	r30, r24
     2aa:	10 81       	ld	r17, Z
     2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <app_list+0x26>
		free_node(cp);
	}
}

void app_list(char *ap){
	char buf[8], how = 'a';
     2ae:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf( "> ");
     2b0:	87 e0       	ldi	r24, 0x07	; 7
     2b2:	e8 2e       	mov	r14, r24
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	f8 2e       	mov	r15, r24
     2b8:	0f 92       	push	r0
     2ba:	0f 92       	push	r0
     2bc:	ed b7       	in	r30, 0x3d	; 61
     2be:	fe b7       	in	r31, 0x3e	; 62
     2c0:	f2 82       	std	Z+2, r15	; 0x02
     2c2:	e1 82       	std	Z+1, r14	; 0x01
     2c4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
		if(fgets(buf, 8, stdin) == NULL)
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	40 91 31 05 	lds	r20, 0x0531
     2d0:	50 91 32 05 	lds	r21, 0x0532
     2d4:	ce 01       	movw	r24, r28
     2d6:	01 96       	adiw	r24, 0x01	; 1
     2d8:	68 e0       	ldi	r22, 0x08	; 8
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgets>
     2e0:	00 97       	sbiw	r24, 0x00	; 0
     2e2:	a1 f0       	breq	.+40     	; 0x30c <app_list+0x82>
			break;
		np = get_node();
     2e4:	0e 94 9c 00 	call	0x138	; 0x138 <get_node>
		np->data = buf[0];
     2e8:	29 81       	ldd	r18, Y+1	; 0x01
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
     2ee:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     2f0:	18 36       	cpi	r17, 0x68	; 104
     2f2:	19 f0       	breq	.+6      	; 0x2fa <app_list+0x70>
     2f4:	14 37       	cpi	r17, 0x74	; 116
     2f6:	39 f4       	brne	.+14     	; 0x306 <app_list+0x7c>
     2f8:	03 c0       	rjmp	.+6      	; 0x300 <app_list+0x76>
			case 'h' : insert_node_head(np); break;
     2fa:	0e 94 a4 00 	call	0x148	; 0x148 <insert_node_head>
     2fe:	dc cf       	rjmp	.-72     	; 0x2b8 <app_list+0x2e>
			case 't' : insert_node_tail(np); break;
     300:	0e 94 b9 00 	call	0x172	; 0x172 <insert_node_tail>
     304:	d9 cf       	rjmp	.-78     	; 0x2b8 <app_list+0x2e>
			default : insert_node_ascn(np);
     306:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <insert_node_ascn>
     30a:	d6 cf       	rjmp	.-84     	; 0x2b8 <app_list+0x2e>
		}
	}
	tour_list();
     30c:	0e 94 07 01 	call	0x20e	; 0x20e <tour_list>
	free_list();
     310:	0e 94 34 01 	call	0x268	; 0x268 <free_list>
}
     314:	28 96       	adiw	r28, 0x08	; 8
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	cd bf       	out	0x3d, r28	; 61
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	1f 91       	pop	r17
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	08 95       	ret

0000032c <is_prime>:
#include <avr/io.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int is_prime(int n) {
     32c:	cf 93       	push	r28
     32e:	df 93       	push	r29
     330:	fc 01       	movw	r30, r24
	int i;
	for (i=2; i<=n/2; i++)
     332:	62 e0       	ldi	r22, 0x02	; 2
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     33a:	eb 01       	movw	r28, r22
     33c:	22 e0       	ldi	r18, 0x02	; 2
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	08 c0       	rjmp	.+16     	; 0x352 <is_prime+0x26>
		if((n % i) == 0) return 0;
     342:	cf 01       	movw	r24, r30
     344:	b9 01       	movw	r22, r18
     346:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	41 f0       	breq	.+16     	; 0x35e <is_prime+0x32>
#include <string.h>
#include <stdlib.h>

int is_prime(int n) {
	int i;
	for (i=2; i<=n/2; i++)
     34e:	2f 5f       	subi	r18, 0xFF	; 255
     350:	3f 4f       	sbci	r19, 0xFF	; 255
     352:	c2 17       	cp	r28, r18
     354:	d3 07       	cpc	r29, r19
     356:	ac f7       	brge	.-22     	; 0x342 <is_prime+0x16>
		if((n % i) == 0) return 0;
	return(1);
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	02 c0       	rjmp	.+4      	; 0x362 <is_prime+0x36>
#include <stdlib.h>

int is_prime(int n) {
	int i;
	for (i=2; i<=n/2; i++)
		if((n % i) == 0) return 0;
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
	return(1);
}
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <app_prime>:

void app_prime(char *ap){
     368:	cf 92       	push	r12
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
	int n, count = 0,t=2000;
	if(ap) t = atoi(ap);
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	21 f0       	breq	.+8      	; 0x384 <app_prime+0x1c>
     37c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <atoi>
     380:	7c 01       	movw	r14, r24
     382:	04 c0       	rjmp	.+8      	; 0x38c <app_prime+0x24>
		if((n % i) == 0) return 0;
	return(1);
}

void app_prime(char *ap){
	int n, count = 0,t=2000;
     384:	90 ed       	ldi	r25, 0xD0	; 208
     386:	e9 2e       	mov	r14, r25
     388:	97 e0       	ldi	r25, 0x07	; 7
     38a:	f9 2e       	mov	r15, r25
     38c:	00 e0       	ldi	r16, 0x00	; 0
     38e:	10 e0       	ldi	r17, 0x00	; 0
	if(ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     390:	c2 e0       	ldi	r28, 0x02	; 2
     392:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)){
			count ++;
			printf( "%d is a prime number !!!\n" , n);
     394:	8d e0       	ldi	r24, 0x0D	; 13
     396:	c8 2e       	mov	r12, r24
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	d8 2e       	mov	r13, r24
}

void app_prime(char *ap){
	int n, count = 0,t=2000;
	if(ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     39c:	16 c0       	rjmp	.+44     	; 0x3ca <app_prime+0x62>
		if (is_prime(n)){
     39e:	ce 01       	movw	r24, r28
     3a0:	0e 94 96 01 	call	0x32c	; 0x32c <is_prime>
     3a4:	00 97       	sbiw	r24, 0x00	; 0
     3a6:	81 f0       	breq	.+32     	; 0x3c8 <app_prime+0x60>
			count ++;
     3a8:	0f 5f       	subi	r16, 0xFF	; 255
     3aa:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime number !!!\n" , n);
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <app_prime+0x46>
     3ae:	0f 92       	push	r0
     3b0:	ed b7       	in	r30, 0x3d	; 61
     3b2:	fe b7       	in	r31, 0x3e	; 62
     3b4:	d2 82       	std	Z+2, r13	; 0x02
     3b6:	c1 82       	std	Z+1, r12	; 0x01
     3b8:	d4 83       	std	Z+4, r29	; 0x04
     3ba:	c3 83       	std	Z+3, r28	; 0x03
     3bc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
     3c0:	0f 90       	pop	r0
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
}

void app_prime(char *ap){
	int n, count = 0,t=2000;
	if(ap) t = atoi(ap);
	for (n = 2; n <= t; n++){
     3c8:	21 96       	adiw	r28, 0x01	; 1
     3ca:	ec 16       	cp	r14, r28
     3cc:	fd 06       	cpc	r15, r29
     3ce:	3c f7       	brge	.-50     	; 0x39e <app_prime+0x36>
		if (is_prime(n)){
			count ++;
			printf( "%d is a prime number !!!\n" , n);
		}
	}
	printf( "count=%d\n", count);
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <app_prime+0x6a>
     3d2:	0f 92       	push	r0
     3d4:	87 e2       	ldi	r24, 0x27	; 39
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	ed b7       	in	r30, 0x3d	; 61
     3da:	fe b7       	in	r31, 0x3e	; 62
     3dc:	92 83       	std	Z+2, r25	; 0x02
     3de:	81 83       	std	Z+1, r24	; 0x01
     3e0:	14 83       	std	Z+4, r17	; 0x04
     3e2:	03 83       	std	Z+3, r16	; 0x03
     3e4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	08 95       	ret

00000402 <app_add>:

void app_add(char *ap, char *bp){
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	eb 01       	movw	r28, r22

    int a, b, s;
	a=atoi(ap);
     40c:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <atoi>
     410:	8c 01       	movw	r16, r24
	b=atoi(bp);
     412:	ce 01       	movw	r24, r28
     414:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <atoi>

	s = a+b;
	printf("%d", s);
     418:	00 d0       	rcall	.+0      	; 0x41a <app_add+0x18>
     41a:	0f 92       	push	r0
     41c:	21 e3       	ldi	r18, 0x31	; 49
     41e:	32 e0       	ldi	r19, 0x02	; 2
     420:	ed b7       	in	r30, 0x3d	; 61
     422:	fe b7       	in	r31, 0x3e	; 62
     424:	32 83       	std	Z+2, r19	; 0x02
     426:	21 83       	std	Z+1, r18	; 0x01

    int a, b, s;
	a=atoi(ap);
	b=atoi(bp);

	s = a+b;
     428:	08 0f       	add	r16, r24
     42a:	19 1f       	adc	r17, r25
	printf("%d", s);
     42c:	14 83       	std	Z+4, r17	; 0x04
     42e:	03 83       	std	Z+3, r16	; 0x03
     430:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
	printf("\n");
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	8a e0       	ldi	r24, 0x0A	; 10
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <putchar>

 }
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	08 95       	ret

0000044e <cal>:

void cal(char *ap){
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	00 d0       	rcall	.+0      	; 0x454 <cal+0x6>
     454:	0f 92       	push	r0
     456:	0f 92       	push	r0
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	int a,b;
	char c;
	sscanf(ap, "%d%c%d", &a,&c,&b); 
     45c:	2d b7       	in	r18, 0x3d	; 61
     45e:	3e b7       	in	r19, 0x3e	; 62
     460:	2a 50       	subi	r18, 0x0A	; 10
     462:	30 40       	sbci	r19, 0x00	; 0
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	3e bf       	out	0x3e, r19	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	2d bf       	out	0x3d, r18	; 61
     46e:	ed b7       	in	r30, 0x3d	; 61
     470:	fe b7       	in	r31, 0x3e	; 62
     472:	31 96       	adiw	r30, 0x01	; 1
     474:	ad b7       	in	r26, 0x3d	; 61
     476:	be b7       	in	r27, 0x3e	; 62
     478:	12 96       	adiw	r26, 0x02	; 2
     47a:	9c 93       	st	X, r25
     47c:	8e 93       	st	-X, r24
     47e:	11 97       	sbiw	r26, 0x01	; 1
     480:	84 e3       	ldi	r24, 0x34	; 52
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	93 83       	std	Z+3, r25	; 0x03
     486:	82 83       	std	Z+2, r24	; 0x02
     488:	ce 01       	movw	r24, r28
     48a:	04 96       	adiw	r24, 0x04	; 4
     48c:	95 83       	std	Z+5, r25	; 0x05
     48e:	84 83       	std	Z+4, r24	; 0x04
     490:	ce 01       	movw	r24, r28
     492:	01 96       	adiw	r24, 0x01	; 1
     494:	97 83       	std	Z+7, r25	; 0x07
     496:	86 83       	std	Z+6, r24	; 0x06
     498:	ce 01       	movw	r24, r28
     49a:	02 96       	adiw	r24, 0x02	; 2
     49c:	91 87       	std	Z+9, r25	; 0x09
     49e:	80 87       	std	Z+8, r24	; 0x08
     4a0:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <sscanf>
	
	switch(c){
     4a4:	ed b7       	in	r30, 0x3d	; 61
     4a6:	fe b7       	in	r31, 0x3e	; 62
     4a8:	3a 96       	adiw	r30, 0x0a	; 10
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	fe bf       	out	0x3e, r31	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	ed bf       	out	0x3d, r30	; 61
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	8b 32       	cpi	r24, 0x2B	; 43
     4b8:	61 f0       	breq	.+24     	; 0x4d2 <cal+0x84>
     4ba:	8c 32       	cpi	r24, 0x2C	; 44
     4bc:	20 f4       	brcc	.+8      	; 0x4c6 <cal+0x78>
     4be:	8a 32       	cpi	r24, 0x2A	; 42
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <cal+0x76>
     4c2:	59 c0       	rjmp	.+178    	; 0x576 <cal+0x128>
     4c4:	28 c0       	rjmp	.+80     	; 0x516 <cal+0xc8>
     4c6:	8d 32       	cpi	r24, 0x2D	; 45
     4c8:	a9 f0       	breq	.+42     	; 0x4f4 <cal+0xa6>
     4ca:	8f 32       	cpi	r24, 0x2F	; 47
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <cal+0x82>
     4ce:	53 c0       	rjmp	.+166    	; 0x576 <cal+0x128>
     4d0:	3c c0       	rjmp	.+120    	; 0x54a <cal+0xfc>
		case '+':
			printf("%d \n", a+b);
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <cal+0x86>
     4d4:	0f 92       	push	r0
     4d6:	8b e3       	ldi	r24, 0x3B	; 59
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	ad b7       	in	r26, 0x3d	; 61
     4dc:	be b7       	in	r27, 0x3e	; 62
     4de:	12 96       	adiw	r26, 0x02	; 2
     4e0:	9c 93       	st	X, r25
     4e2:	8e 93       	st	-X, r24
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	8c 81       	ldd	r24, Y+4	; 0x04
     4e8:	9d 81       	ldd	r25, Y+5	; 0x05
     4ea:	2a 81       	ldd	r18, Y+2	; 0x02
     4ec:	3b 81       	ldd	r19, Y+3	; 0x03
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	26 c0       	rjmp	.+76     	; 0x540 <cal+0xf2>
			break;
		case '-':
			printf("%d \n", a-b);
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <cal+0xa8>
     4f6:	0f 92       	push	r0
     4f8:	8b e3       	ldi	r24, 0x3B	; 59
     4fa:	92 e0       	ldi	r25, 0x02	; 2
     4fc:	ed b7       	in	r30, 0x3d	; 61
     4fe:	fe b7       	in	r31, 0x3e	; 62
     500:	92 83       	std	Z+2, r25	; 0x02
     502:	81 83       	std	Z+1, r24	; 0x01
     504:	8c 81       	ldd	r24, Y+4	; 0x04
     506:	9d 81       	ldd	r25, Y+5	; 0x05
     508:	2a 81       	ldd	r18, Y+2	; 0x02
     50a:	3b 81       	ldd	r19, Y+3	; 0x03
     50c:	82 1b       	sub	r24, r18
     50e:	93 0b       	sbc	r25, r19
     510:	94 83       	std	Z+4, r25	; 0x04
     512:	83 83       	std	Z+3, r24	; 0x03
     514:	2a c0       	rjmp	.+84     	; 0x56a <cal+0x11c>
			break;
		case '*':
			printf("%d \n", a*b);
     516:	00 d0       	rcall	.+0      	; 0x518 <cal+0xca>
     518:	0f 92       	push	r0
     51a:	8b e3       	ldi	r24, 0x3B	; 59
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	ad b7       	in	r26, 0x3d	; 61
     520:	be b7       	in	r27, 0x3e	; 62
     522:	12 96       	adiw	r26, 0x02	; 2
     524:	9c 93       	st	X, r25
     526:	8e 93       	st	-X, r24
     528:	11 97       	sbiw	r26, 0x01	; 1
     52a:	4c 81       	ldd	r20, Y+4	; 0x04
     52c:	5d 81       	ldd	r21, Y+5	; 0x05
     52e:	2a 81       	ldd	r18, Y+2	; 0x02
     530:	3b 81       	ldd	r19, Y+3	; 0x03
     532:	42 9f       	mul	r20, r18
     534:	c0 01       	movw	r24, r0
     536:	43 9f       	mul	r20, r19
     538:	90 0d       	add	r25, r0
     53a:	52 9f       	mul	r21, r18
     53c:	90 0d       	add	r25, r0
     53e:	11 24       	eor	r1, r1
     540:	14 96       	adiw	r26, 0x04	; 4
     542:	9c 93       	st	X, r25
     544:	8e 93       	st	-X, r24
     546:	13 97       	sbiw	r26, 0x03	; 3
     548:	10 c0       	rjmp	.+32     	; 0x56a <cal+0x11c>
			break;
		case '/':
			printf("%d \n", a/b);
     54a:	00 d0       	rcall	.+0      	; 0x54c <cal+0xfe>
     54c:	0f 92       	push	r0
     54e:	8b e3       	ldi	r24, 0x3B	; 59
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	ed b7       	in	r30, 0x3d	; 61
     554:	fe b7       	in	r31, 0x3e	; 62
     556:	92 83       	std	Z+2, r25	; 0x02
     558:	81 83       	std	Z+1, r24	; 0x01
     55a:	8c 81       	ldd	r24, Y+4	; 0x04
     55c:	9d 81       	ldd	r25, Y+5	; 0x05
     55e:	6a 81       	ldd	r22, Y+2	; 0x02
     560:	7b 81       	ldd	r23, Y+3	; 0x03
     562:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     566:	74 83       	std	Z+4, r23	; 0x04
     568:	63 83       	std	Z+3, r22	; 0x03
     56a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
			break;
     56e:	0f 90       	pop	r0
     570:	0f 90       	pop	r0
     572:	0f 90       	pop	r0
     574:	0f 90       	pop	r0
	}
}
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <task_prime>:

void task_prime(char *ap)
{
     586:	cf 92       	push	r12
     588:	df 92       	push	r13
     58a:	ef 92       	push	r14
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
	int n, t = 2000, count=0;

	if(ap && *ap) t = atoi(ap);
     596:	00 97       	sbiw	r24, 0x00	; 0
     598:	41 f0       	breq	.+16     	; 0x5aa <task_prime+0x24>
     59a:	fc 01       	movw	r30, r24
     59c:	20 81       	ld	r18, Z
     59e:	22 23       	and	r18, r18
     5a0:	21 f0       	breq	.+8      	; 0x5aa <task_prime+0x24>
     5a2:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <atoi>
     5a6:	8c 01       	movw	r16, r24
     5a8:	02 c0       	rjmp	.+4      	; 0x5ae <task_prime+0x28>
	}
}

void task_prime(char *ap)
{
	int n, t = 2000, count=0;
     5aa:	00 ed       	ldi	r16, 0xD0	; 208
     5ac:	17 e0       	ldi	r17, 0x07	; 7
     5ae:	ee 24       	eor	r14, r14
     5b0:	ff 24       	eor	r15, r15

	if(ap && *ap) t = atoi(ap);
	for (n = 2; n<= t; n++) {
     5b2:	c2 e0       	ldi	r28, 0x02	; 2
     5b4:	d0 e0       	ldi	r29, 0x00	; 0
		if (is_prime(n)){
			count++;
			printf("%d is a prime number !!!\n",  n);
     5b6:	2d e0       	ldi	r18, 0x0D	; 13
     5b8:	c2 2e       	mov	r12, r18
     5ba:	22 e0       	ldi	r18, 0x02	; 2
     5bc:	d2 2e       	mov	r13, r18
void task_prime(char *ap)
{
	int n, t = 2000, count=0;

	if(ap && *ap) t = atoi(ap);
	for (n = 2; n<= t; n++) {
     5be:	17 c0       	rjmp	.+46     	; 0x5ee <task_prime+0x68>
		if (is_prime(n)){
     5c0:	ce 01       	movw	r24, r28
     5c2:	0e 94 96 01 	call	0x32c	; 0x32c <is_prime>
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	89 f0       	breq	.+34     	; 0x5ec <task_prime+0x66>
			count++;
     5ca:	08 94       	sec
     5cc:	e1 1c       	adc	r14, r1
     5ce:	f1 1c       	adc	r15, r1
			printf("%d is a prime number !!!\n",  n);
     5d0:	00 d0       	rcall	.+0      	; 0x5d2 <task_prime+0x4c>
     5d2:	0f 92       	push	r0
     5d4:	ed b7       	in	r30, 0x3d	; 61
     5d6:	fe b7       	in	r31, 0x3e	; 62
     5d8:	d2 82       	std	Z+2, r13	; 0x02
     5da:	c1 82       	std	Z+1, r12	; 0x01
     5dc:	d4 83       	std	Z+4, r29	; 0x04
     5de:	c3 83       	std	Z+3, r28	; 0x03
     5e0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
void task_prime(char *ap)
{
	int n, t = 2000, count=0;

	if(ap && *ap) t = atoi(ap);
	for (n = 2; n<= t; n++) {
     5ec:	21 96       	adiw	r28, 0x01	; 1
     5ee:	0c 17       	cp	r16, r28
     5f0:	1d 07       	cpc	r17, r29
     5f2:	34 f7       	brge	.-52     	; 0x5c0 <task_prime+0x3a>
		if (is_prime(n)){
			count++;
			printf("%d is a prime number !!!\n",  n);
		}
	}
	printf("count=%d\n", count);
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <task_prime+0x70>
     5f6:	0f 92       	push	r0
     5f8:	87 e2       	ldi	r24, 0x27	; 39
     5fa:	92 e0       	ldi	r25, 0x02	; 2
     5fc:	ed b7       	in	r30, 0x3d	; 61
     5fe:	fe b7       	in	r31, 0x3e	; 62
     600:	92 83       	std	Z+2, r25	; 0x02
     602:	81 83       	std	Z+1, r24	; 0x01
     604:	f4 82       	std	Z+4, r15	; 0x04
     606:	e3 82       	std	Z+3, r14	; 0x03
     608:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	08 95       	ret

00000626 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri = fo = ro = 0;
     626:	10 92 e9 04 	sts	0x04E9, r1
     62a:	10 92 e8 04 	sts	0x04E8, r1
     62e:	10 92 e7 04 	sts	0x04E7, r1
     632:	10 92 e6 04 	sts	0x04E6, r1
     636:	10 92 eb 04 	sts	0x04EB, r1
     63a:	10 92 ea 04 	sts	0x04EA, r1
     63e:	10 92 a5 04 	sts	0x04A5, r1
     642:	10 92 a4 04 	sts	0x04A4, r1
}
     646:	08 95       	ret

00000648 <qi_insert>:
int qi_insert(char ch)
{
     648:	48 2f       	mov	r20, r24
	if((ri + 1) % QI_SIZE == fi)
     64a:	20 91 ea 04 	lds	r18, 0x04EA
     64e:	30 91 eb 04 	lds	r19, 0x04EB
     652:	2f 5f       	subi	r18, 0xFF	; 255
     654:	3f 4f       	sbci	r19, 0xFF	; 255
     656:	c9 01       	movw	r24, r18
     658:	60 e4       	ldi	r22, 0x40	; 64
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     660:	9c 01       	movw	r18, r24
     662:	80 91 a4 04 	lds	r24, 0x04A4
     666:	90 91 a5 04 	lds	r25, 0x04A5
     66a:	28 17       	cp	r18, r24
     66c:	39 07       	cpc	r19, r25
     66e:	59 f0       	breq	.+22     	; 0x686 <qi_insert+0x3e>
			return 0;
	ri = (ri + 1) % QI_SIZE;
     670:	30 93 eb 04 	sts	0x04EB, r19
     674:	20 93 ea 04 	sts	0x04EA, r18
	qi[ri] = ch;
     678:	24 51       	subi	r18, 0x14	; 20
     67a:	3b 4f       	sbci	r19, 0xFB	; 251
     67c:	f9 01       	movw	r30, r18
     67e:	40 83       	st	Z, r20
	return(1);
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	08 95       	ret
	fi = ri = fo = ro = 0;
}
int qi_insert(char ch)
{
	if((ri + 1) % QI_SIZE == fi)
			return 0;
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return(1);
}
     68a:	08 95       	ret

0000068c <qi_delete>:
int qi_delete()
{
	if(ri == fi)
     68c:	80 91 a4 04 	lds	r24, 0x04A4
     690:	90 91 a5 04 	lds	r25, 0x04A5
     694:	20 91 ea 04 	lds	r18, 0x04EA
     698:	30 91 eb 04 	lds	r19, 0x04EB
     69c:	28 17       	cp	r18, r24
     69e:	39 07       	cpc	r19, r25
     6a0:	79 f0       	breq	.+30     	; 0x6c0 <qi_delete+0x34>
		return(0);
	fi = (fi + 1) % QI_SIZE;
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	60 e4       	ldi	r22, 0x40	; 64
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     6ac:	90 93 a5 04 	sts	0x04A5, r25
     6b0:	80 93 a4 04 	sts	0x04A4, r24
	return(qi[fi]);
     6b4:	84 51       	subi	r24, 0x14	; 20
     6b6:	9b 4f       	sbci	r25, 0xFB	; 251
     6b8:	fc 01       	movw	r30, r24
     6ba:	80 81       	ld	r24, Z
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	08 95       	ret
	return(1);
}
int qi_delete()
{
	if(ri == fi)
		return(0);
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return(qi[fi]);
}
     6c4:	08 95       	ret

000006c6 <qo_insert>:
int qo_insert(char ch)
{
     6c6:	48 2f       	mov	r20, r24
	if((ro + 1) % QO_SIZE == fo)
     6c8:	20 91 e8 04 	lds	r18, 0x04E8
     6cc:	30 91 e9 04 	lds	r19, 0x04E9
     6d0:	2f 5f       	subi	r18, 0xFF	; 255
     6d2:	3f 4f       	sbci	r19, 0xFF	; 255
     6d4:	c9 01       	movw	r24, r18
     6d6:	60 e4       	ldi	r22, 0x40	; 64
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     6de:	9c 01       	movw	r18, r24
     6e0:	80 91 e6 04 	lds	r24, 0x04E6
     6e4:	90 91 e7 04 	lds	r25, 0x04E7
     6e8:	28 17       	cp	r18, r24
     6ea:	39 07       	cpc	r19, r25
     6ec:	59 f0       	breq	.+22     	; 0x704 <qo_insert+0x3e>
			return 0;
	ro = (ro + 1) % QO_SIZE;
     6ee:	30 93 e9 04 	sts	0x04E9, r19
     6f2:	20 93 e8 04 	sts	0x04E8, r18
	qo[ro] = ch;
     6f6:	2a 55       	subi	r18, 0x5A	; 90
     6f8:	3b 4f       	sbci	r19, 0xFB	; 251
     6fa:	f9 01       	movw	r30, r18
     6fc:	40 83       	st	Z, r20
	return(1);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	08 95       	ret
	return(qi[fi]);
}
int qo_insert(char ch)
{
	if((ro + 1) % QO_SIZE == fo)
			return 0;
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return(1);
}
     708:	08 95       	ret

0000070a <qo_delete>:
int qo_delete()
{
	if(ro == fo)
     70a:	80 91 e6 04 	lds	r24, 0x04E6
     70e:	90 91 e7 04 	lds	r25, 0x04E7
     712:	20 91 e8 04 	lds	r18, 0x04E8
     716:	30 91 e9 04 	lds	r19, 0x04E9
     71a:	28 17       	cp	r18, r24
     71c:	39 07       	cpc	r19, r25
     71e:	79 f0       	breq	.+30     	; 0x73e <qo_delete+0x34>
		return(0);
	fo = (fo + 1) % QO_SIZE;
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	60 e4       	ldi	r22, 0x40	; 64
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     72a:	90 93 e7 04 	sts	0x04E7, r25
     72e:	80 93 e6 04 	sts	0x04E6, r24
	return(qo[fo]);
     732:	8a 55       	subi	r24, 0x5A	; 90
     734:	9b 4f       	sbci	r25, 0xFB	; 251
     736:	fc 01       	movw	r30, r24
     738:	80 81       	ld	r24, Z
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	08 95       	ret
	return(1);
}
int qo_delete()
{
	if(ro == fo)
		return(0);
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return(qo[fo]);
}
     742:	08 95       	ret

00000744 <get_timer>:

struct timer *get_timer()
{
	struct timer *tp;

	tp = (struct timer *)malloc(sizeof(*tp));
     744:	8e e0       	ldi	r24, 0x0E	; 14
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 0f 0c 	call	0x181e	; 0x181e <malloc>
	return(tp);
}
     74c:	08 95       	ret

0000074e <insert_timer>:
struct timer *Thread = NULL;

void insert_timer(struct task *tskp, int ms)
{
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	f8 2e       	mov	r15, r24
     75c:	e9 2e       	mov	r14, r25
     75e:	8b 01       	movw	r16, r22
	int	total;
	struct timer *tp, *cp, *pp;

	tp = get_timer();
     760:	0e 94 a2 03 	call	0x744	; 0x744 <get_timer>
     764:	ec 01       	movw	r28, r24
	tp->task = *tskp;
     766:	dc 01       	movw	r26, r24
     768:	12 96       	adiw	r26, 0x02	; 2
     76a:	ef 2d       	mov	r30, r15
     76c:	fe 2d       	mov	r31, r14
     76e:	8a e0       	ldi	r24, 0x0A	; 10
     770:	01 90       	ld	r0, Z+
     772:	0d 92       	st	X+, r0
     774:	81 50       	subi	r24, 0x01	; 1
     776:	e1 f7       	brne	.-8      	; 0x770 <insert_timer+0x22>
	tp->time = ms;
     778:	19 83       	std	Y+1, r17	; 0x01
     77a:	08 83       	st	Y, r16

	if (Thread == NULL){
     77c:	e0 91 f8 03 	lds	r30, 0x03F8
     780:	f0 91 f9 03 	lds	r31, 0x03F9
     784:	30 97       	sbiw	r30, 0x00	; 0
     786:	29 f4       	brne	.+10     	; 0x792 <insert_timer+0x44>
		Thread = tp, tp->link = NULL;
     788:	d0 93 f9 03 	sts	0x03F9, r29
     78c:	c0 93 f8 03 	sts	0x03F8, r28
     790:	2f c0       	rjmp	.+94     	; 0x7f0 <insert_timer+0xa2>

	tp = get_timer();
	tp->task = *tskp;
	tp->time = ms;

	if (Thread == NULL){
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	01 c0       	rjmp	.+2      	; 0x79e <insert_timer+0x50>
		Thread = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total=0;
	for (cp = Thread; cp; cp = cp->link) {
     79c:	fd 01       	movw	r30, r26
		total += cp->time;
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	28 0f       	add	r18, r24
     7a4:	39 1f       	adc	r19, r25
		if(total >= ms)
     7a6:	20 17       	cp	r18, r16
     7a8:	31 07       	cpc	r19, r17
     7aa:	34 f4       	brge	.+12     	; 0x7b8 <insert_timer+0x6a>
		Thread = tp, tp->link = NULL;
		return;
	}

	pp = NULL, total=0;
	for (cp = Thread; cp; cp = cp->link) {
     7ac:	a4 85       	ldd	r26, Z+12	; 0x0c
     7ae:	b5 85       	ldd	r27, Z+13	; 0x0d
     7b0:	af 01       	movw	r20, r30
     7b2:	10 97       	sbiw	r26, 0x00	; 0
     7b4:	99 f7       	brne	.-26     	; 0x79c <insert_timer+0x4e>
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <insert_timer+0x6c>
		total += cp->time;
		if(total >= ms)
     7b8:	df 01       	movw	r26, r30
			break;
		pp = cp;
	}

	if (pp == NULL){
     7ba:	41 15       	cp	r20, r1
     7bc:	51 05       	cpc	r21, r1
     7be:	79 f4       	brne	.+30     	; 0x7de <insert_timer+0x90>
		cp->time -= tp->time;
     7c0:	8d 91       	ld	r24, X+
     7c2:	9c 91       	ld	r25, X
     7c4:	11 97       	sbiw	r26, 0x01	; 1
     7c6:	80 1b       	sub	r24, r16
     7c8:	91 0b       	sbc	r25, r17
     7ca:	11 96       	adiw	r26, 0x01	; 1
     7cc:	9c 93       	st	X, r25
     7ce:	8e 93       	st	-X, r24
		tp->link = cp, Thread = tp;
     7d0:	bd 87       	std	Y+13, r27	; 0x0d
     7d2:	ac 87       	std	Y+12, r26	; 0x0c
     7d4:	d0 93 f9 03 	sts	0x03F9, r29
     7d8:	c0 93 f8 03 	sts	0x03F8, r28
     7dc:	24 c0       	rjmp	.+72     	; 0x826 <insert_timer+0xd8>
	}
	else if (cp == NULL) {
     7de:	10 97       	sbiw	r26, 0x00	; 0
     7e0:	51 f4       	brne	.+20     	; 0x7f6 <insert_timer+0xa8>
		tp->time -= total;
     7e2:	02 1b       	sub	r16, r18
     7e4:	13 0b       	sbc	r17, r19
     7e6:	19 83       	std	Y+1, r17	; 0x01
     7e8:	08 83       	st	Y, r16
		pp->link = tp;
     7ea:	fa 01       	movw	r30, r20
     7ec:	d5 87       	std	Z+13, r29	; 0x0d
     7ee:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = NULL;
     7f0:	1d 86       	std	Y+13, r1	; 0x0d
     7f2:	1c 86       	std	Y+12, r1	; 0x0c
     7f4:	18 c0       	rjmp	.+48     	; 0x826 <insert_timer+0xd8>
	}
	else{
		total -= cp->time;
     7f6:	8d 91       	ld	r24, X+
     7f8:	9c 91       	ld	r25, X
     7fa:	11 97       	sbiw	r26, 0x01	; 1
     7fc:	b9 01       	movw	r22, r18
     7fe:	68 1b       	sub	r22, r24
     800:	79 0b       	sbc	r23, r25
		tp->time -= total;
     802:	98 01       	movw	r18, r16
     804:	26 1b       	sub	r18, r22
     806:	37 0b       	sbc	r19, r23
     808:	39 83       	std	Y+1, r19	; 0x01
     80a:	28 83       	st	Y, r18
		cp->time -= tp->time;
     80c:	8d 91       	ld	r24, X+
     80e:	9c 91       	ld	r25, X
     810:	11 97       	sbiw	r26, 0x01	; 1
     812:	82 1b       	sub	r24, r18
     814:	93 0b       	sbc	r25, r19
     816:	11 96       	adiw	r26, 0x01	; 1
     818:	9c 93       	st	X, r25
     81a:	8e 93       	st	-X, r24
		pp->link = tp;
     81c:	fa 01       	movw	r30, r20
     81e:	d5 87       	std	Z+13, r29	; 0x0d
     820:	c4 87       	std	Z+12, r28	; 0x0c
		tp->link = cp;
     822:	bd 87       	std	Y+13, r27	; 0x0d
     824:	ac 87       	std	Y+12, r26	; 0x0c
	}
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	08 95       	ret

00000834 <tour_timer>:

void tour_timer()
{
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
	struct timer *cp;
	int total = 0;

	printf("\n");
     840:	8a e0       	ldi	r24, 0x0A	; 10
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <putchar>
	for(cp = Thread; cp != NULL; cp = cp->link){
     848:	c0 91 f8 03 	lds	r28, 0x03F8
     84c:	d0 91 f9 03 	lds	r29, 0x03F9
}

void tour_timer()
{
	struct timer *cp;
	int total = 0;
     850:	00 e0       	ldi	r16, 0x00	; 0
     852:	10 e0       	ldi	r17, 0x00	; 0

	printf("\n");
	for(cp = Thread; cp != NULL; cp = cp->link){
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
     854:	80 e4       	ldi	r24, 0x40	; 64
     856:	e8 2e       	mov	r14, r24
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	f8 2e       	mov	r15, r24
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thread; cp != NULL; cp = cp->link){
     85c:	20 c0       	rjmp	.+64     	; 0x89e <tour_timer+0x6a>
		total += cp->time;
     85e:	88 81       	ld	r24, Y
     860:	99 81       	ldd	r25, Y+1	; 0x01
     862:	08 0f       	add	r16, r24
     864:	19 1f       	adc	r17, r25
		printf("-->%d(%d) ", cp->time, total);
     866:	00 d0       	rcall	.+0      	; 0x868 <tour_timer+0x34>
     868:	00 d0       	rcall	.+0      	; 0x86a <tour_timer+0x36>
     86a:	ed b7       	in	r30, 0x3d	; 61
     86c:	fe b7       	in	r31, 0x3e	; 62
     86e:	31 96       	adiw	r30, 0x01	; 1
     870:	ad b7       	in	r26, 0x3d	; 61
     872:	be b7       	in	r27, 0x3e	; 62
     874:	12 96       	adiw	r26, 0x02	; 2
     876:	fc 92       	st	X, r15
     878:	ee 92       	st	-X, r14
     87a:	11 97       	sbiw	r26, 0x01	; 1
     87c:	93 83       	std	Z+3, r25	; 0x03
     87e:	82 83       	std	Z+2, r24	; 0x02
     880:	15 83       	std	Z+5, r17	; 0x05
     882:	04 83       	std	Z+4, r16	; 0x04
     884:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
{
	struct timer *cp;
	int total = 0;

	printf("\n");
	for(cp = Thread; cp != NULL; cp = cp->link){
     888:	0c 84       	ldd	r0, Y+12	; 0x0c
     88a:	dd 85       	ldd	r29, Y+13	; 0x0d
     88c:	c0 2d       	mov	r28, r0
     88e:	8d b7       	in	r24, 0x3d	; 61
     890:	9e b7       	in	r25, 0x3e	; 62
     892:	06 96       	adiw	r24, 0x06	; 6
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	9e bf       	out	0x3e, r25	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	8d bf       	out	0x3d, r24	; 61
     89e:	20 97       	sbiw	r28, 0x00	; 0
     8a0:	f1 f6       	brne	.-68     	; 0x85e <tour_timer+0x2a>
		total += cp->time;
		printf("-->%d(%d) ", cp->time, total);
	}
	printf("\n");
     8a2:	8a e0       	ldi	r24, 0x0A	; 10
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <putchar>
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	1f 91       	pop	r17
     8b0:	0f 91       	pop	r16
     8b2:	ff 90       	pop	r15
     8b4:	ef 90       	pop	r14
     8b6:	08 95       	ret

000008b8 <free_timer>:
void free_timer()
{
	struct timer *cp;

	for( ; Thread != NULL;) {
     8b8:	09 c0       	rjmp	.+18     	; 0x8cc <free_timer+0x14>
		cp = Thread;
		Thread = cp->link;
     8ba:	fc 01       	movw	r30, r24
     8bc:	24 85       	ldd	r18, Z+12	; 0x0c
     8be:	35 85       	ldd	r19, Z+13	; 0x0d
     8c0:	30 93 f9 03 	sts	0x03F9, r19
     8c4:	20 93 f8 03 	sts	0x03F8, r18
		free(cp);
     8c8:	0e 94 a5 0c 	call	0x194a	; 0x194a <free>
}
void free_timer()
{
	struct timer *cp;

	for( ; Thread != NULL;) {
     8cc:	80 91 f8 03 	lds	r24, 0x03F8
     8d0:	90 91 f9 03 	lds	r25, 0x03F9
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	89 f7       	brne	.-30     	; 0x8ba <free_timer+0x2>
		cp = Thread;
		Thread = cp->link;
		free(cp);
		}
}
     8d8:	08 95       	ret

000008da <app_timer>:
void app_timer(char *ap)
{
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	62 97       	sbiw	r28, 0x12	; 18
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
	char 	buf[8];
	int		ms;
	struct task tsk;

	while(1) {
		printf(">> ");
     8f2:	0b e4       	ldi	r16, 0x4B	; 75
     8f4:	12 e0       	ldi	r17, 0x02	; 2
     8f6:	0f 92       	push	r0
     8f8:	0f 92       	push	r0
     8fa:	ed b7       	in	r30, 0x3d	; 61
     8fc:	fe b7       	in	r31, 0x3e	; 62
     8fe:	12 83       	std	Z+2, r17	; 0x02
     900:	01 83       	std	Z+1, r16	; 0x01
     902:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
		if(fgets(buf, 8, stdin) == NULL || (ms = atoi(buf)) == 0)
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	40 91 31 05 	lds	r20, 0x0531
     90e:	50 91 32 05 	lds	r21, 0x0532
     912:	ce 01       	movw	r24, r28
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	68 e0       	ldi	r22, 0x08	; 8
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <fgets>
     91e:	00 97       	sbiw	r24, 0x00	; 0
     920:	61 f0       	breq	.+24     	; 0x93a <app_timer+0x60>
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <atoi>
     92a:	bc 01       	movw	r22, r24
     92c:	00 97       	sbiw	r24, 0x00	; 0
     92e:	29 f0       	breq	.+10     	; 0x93a <app_timer+0x60>
			break;

		insert_timer(&tsk, ms);
     930:	ce 01       	movw	r24, r28
     932:	09 96       	adiw	r24, 0x09	; 9
     934:	0e 94 a7 03 	call	0x74e	; 0x74e <insert_timer>
	}
     938:	de cf       	rjmp	.-68     	; 0x8f6 <app_timer+0x1c>
	tour_timer();
     93a:	0e 94 1a 04 	call	0x834	; 0x834 <tour_timer>
	free_timer();
     93e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <free_timer>
}
     942:	62 96       	adiw	r28, 0x12	; 18
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <timer_init>:

void timer_init(){
	TCNT2 = 0;
     958:	10 92 b2 00 	sts	0x00B2, r1
	sbi(ASSR, AS2);
     95c:	e6 eb       	ldi	r30, 0xB6	; 182
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	80 81       	ld	r24, Z
     962:	80 62       	ori	r24, 0x20	; 32
     964:	80 83       	st	Z, r24
	sbi(TIMSK2, TOIE2);
     966:	e0 e7       	ldi	r30, 0x70	; 112
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	81 60       	ori	r24, 0x01	; 1
     96e:	80 83       	st	Z, r24
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
     970:	e1 eb       	ldi	r30, 0xB1	; 177
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	81 60       	ori	r24, 0x01	; 1
     978:	80 83       	st	Z, r24
     97a:	80 81       	ld	r24, Z
     97c:	82 60       	ori	r24, 0x02	; 2
     97e:	80 83       	st	Z, r24
}
     980:	08 95       	ret

00000982 <task_init>:
}

//task 
void task_init()
{
	Task_f = Task_r = 0;
     982:	10 92 01 04 	sts	0x0401, r1
     986:	10 92 00 04 	sts	0x0400, r1
     98a:	10 92 a3 04 	sts	0x04A3, r1
     98e:	10 92 a2 04 	sts	0x04A2, r1
}
     992:	08 95       	ret

00000994 <task_insert>:

int task_insert(struct task *tskp)
{
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	48 2f       	mov	r20, r24
     99a:	e9 2f       	mov	r30, r25
	if((Task_r + 1) % MAX_TASK == Task_f)
     99c:	80 91 00 04 	lds	r24, 0x0400
     9a0:	90 91 01 04 	lds	r25, 0x0401
     9a4:	c0 91 a2 04 	lds	r28, 0x04A2
     9a8:	d0 91 a3 04 	lds	r29, 0x04A3
     9ac:	01 96       	adiw	r24, 0x01	; 1
     9ae:	20 e1       	ldi	r18, 0x10	; 16
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	b9 01       	movw	r22, r18
     9b4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     9b8:	8c 17       	cp	r24, r28
     9ba:	9d 07       	cpc	r25, r29
     9bc:	31 f1       	breq	.+76     	; 0xa0a <task_insert+0x76>
		return(0);
	Task_r = (Task_r + 1) % MAX_TASK;
     9be:	80 91 00 04 	lds	r24, 0x0400
     9c2:	90 91 01 04 	lds	r25, 0x0401
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	b9 01       	movw	r22, r18
     9ca:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     9ce:	90 93 01 04 	sts	0x0401, r25
     9d2:	80 93 00 04 	sts	0x0400, r24
	Task_q[Task_r] = *tskp;
     9d6:	80 91 00 04 	lds	r24, 0x0400
     9da:	90 91 01 04 	lds	r25, 0x0401
     9de:	dc 01       	movw	r26, r24
     9e0:	aa 0f       	add	r26, r26
     9e2:	bb 1f       	adc	r27, r27
     9e4:	63 e0       	ldi	r22, 0x03	; 3
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	6a 95       	dec	r22
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <task_insert+0x52>
     9ee:	a8 0f       	add	r26, r24
     9f0:	b9 1f       	adc	r27, r25
     9f2:	ae 5f       	subi	r26, 0xFE	; 254
     9f4:	bb 4f       	sbci	r27, 0xFB	; 251
     9f6:	c4 2f       	mov	r28, r20
     9f8:	de 2f       	mov	r29, r30
     9fa:	8a e0       	ldi	r24, 0x0A	; 10
     9fc:	09 90       	ld	r0, Y+
     9fe:	0d 92       	st	X+, r0
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	e1 f7       	brne	.-8      	; 0x9fc <task_insert+0x68>
	return(1);
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <task_insert+0x7a>
}

int task_insert(struct task *tskp)
{
	if((Task_r + 1) % MAX_TASK == Task_f)
		return(0);
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
	Task_r = (Task_r + 1) % MAX_TASK;
	Task_q[Task_r] = *tskp;
	return(1);
}
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <timer_expire>:
	if(--Thread->time == 0)
			timer_expire();
}

void timer_expire(void)
{
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
	struct timer *tp;

	for(; Thread != NULL && !Thread->time; ) {
     a18:	0d c0       	rjmp	.+26     	; 0xa34 <timer_expire+0x20>
		tp = Thread, Thread = tp->link;
     a1a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a1c:	9d 85       	ldd	r25, Y+13	; 0x0d
     a1e:	90 93 f9 03 	sts	0x03F9, r25
     a22:	80 93 f8 03 	sts	0x03F8, r24

		task_insert(&tp->task);
     a26:	ce 01       	movw	r24, r28
     a28:	02 96       	adiw	r24, 0x02	; 2
     a2a:	0e 94 ca 04 	call	0x994	; 0x994 <task_insert>

		free(tp);
     a2e:	ce 01       	movw	r24, r28
     a30:	0e 94 a5 0c 	call	0x194a	; 0x194a <free>

void timer_expire(void)
{
	struct timer *tp;

	for(; Thread != NULL && !Thread->time; ) {
     a34:	c0 91 f8 03 	lds	r28, 0x03F8
     a38:	d0 91 f9 03 	lds	r29, 0x03F9
     a3c:	20 97       	sbiw	r28, 0x00	; 0
     a3e:	21 f0       	breq	.+8      	; 0xa48 <timer_expire+0x34>
     a40:	88 81       	ld	r24, Y
     a42:	99 81       	ldd	r25, Y+1	; 0x01
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	49 f3       	breq	.-46     	; 0xa1a <timer_expire+0x6>

		task_insert(&tp->task);

		free(tp);
		}
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <__vector_15>:
	sbi(TIMSK2, TOIE2);
	sbi(TCCR2B, CS20); sbi(TCCR2B, CS21);
}

ISR(TIMER2_OVF_vect)
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	0f 92       	push	r0
     a56:	0b b6       	in	r0, 0x3b	; 59
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	2f 93       	push	r18
     a5e:	3f 93       	push	r19
     a60:	4f 93       	push	r20
     a62:	5f 93       	push	r21
     a64:	6f 93       	push	r22
     a66:	7f 93       	push	r23
     a68:	8f 93       	push	r24
     a6a:	9f 93       	push	r25
     a6c:	af 93       	push	r26
     a6e:	bf 93       	push	r27
     a70:	ef 93       	push	r30
     a72:	ff 93       	push	r31
	if(!Thread)
     a74:	e0 91 f8 03 	lds	r30, 0x03F8
     a78:	f0 91 f9 03 	lds	r31, 0x03F9
     a7c:	30 97       	sbiw	r30, 0x00	; 0
     a7e:	49 f0       	breq	.+18     	; 0xa92 <__vector_15+0x44>
		return;
	if(--Thread->time == 0)
     a80:	80 81       	ld	r24, Z
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	01 97       	sbiw	r24, 0x01	; 1
     a86:	91 83       	std	Z+1, r25	; 0x01
     a88:	80 83       	st	Z, r24
     a8a:	00 97       	sbiw	r24, 0x00	; 0
     a8c:	11 f4       	brne	.+4      	; 0xa92 <__vector_15+0x44>
			timer_expire();
     a8e:	0e 94 0a 05 	call	0xa14	; 0xa14 <timer_expire>
}
     a92:	ff 91       	pop	r31
     a94:	ef 91       	pop	r30
     a96:	bf 91       	pop	r27
     a98:	af 91       	pop	r26
     a9a:	9f 91       	pop	r25
     a9c:	8f 91       	pop	r24
     a9e:	7f 91       	pop	r23
     aa0:	6f 91       	pop	r22
     aa2:	5f 91       	pop	r21
     aa4:	4f 91       	pop	r20
     aa6:	3f 91       	pop	r19
     aa8:	2f 91       	pop	r18
     aaa:	0f 90       	pop	r0
     aac:	0b be       	out	0x3b, r0	; 59
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	0f 90       	pop	r0
     ab4:	1f 90       	pop	r1
     ab6:	18 95       	reti

00000ab8 <task_delete>:
	Task_q[Task_r] = *tskp;
	return(1);
}

int task_delete(struct task *tskp)
{
     ab8:	9c 01       	movw	r18, r24
	if(Task_r == Task_f)
     aba:	40 91 00 04 	lds	r20, 0x0400
     abe:	50 91 01 04 	lds	r21, 0x0401
     ac2:	80 91 a2 04 	lds	r24, 0x04A2
     ac6:	90 91 a3 04 	lds	r25, 0x04A3
     aca:	48 17       	cp	r20, r24
     acc:	59 07       	cpc	r21, r25
     ace:	31 f1       	breq	.+76     	; 0xb1c <task_delete+0x64>
		return(0);
	Task_f = (Task_f + 1) % MAX_TASK;
     ad0:	80 91 a2 04 	lds	r24, 0x04A2
     ad4:	90 91 a3 04 	lds	r25, 0x04A3
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	60 e1       	ldi	r22, 0x10	; 16
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     ae2:	90 93 a3 04 	sts	0x04A3, r25
     ae6:	80 93 a2 04 	sts	0x04A2, r24
	*tskp = Task_q[Task_f];
     aea:	80 91 a2 04 	lds	r24, 0x04A2
     aee:	90 91 a3 04 	lds	r25, 0x04A3
     af2:	fc 01       	movw	r30, r24
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	a3 e0       	ldi	r26, 0x03	; 3
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	aa 95       	dec	r26
     b00:	e1 f7       	brne	.-8      	; 0xafa <task_delete+0x42>
     b02:	e8 0f       	add	r30, r24
     b04:	f9 1f       	adc	r31, r25
     b06:	d9 01       	movw	r26, r18
     b08:	ee 5f       	subi	r30, 0xFE	; 254
     b0a:	fb 4f       	sbci	r31, 0xFB	; 251
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	01 90       	ld	r0, Z+
     b10:	0d 92       	st	X+, r0
     b12:	81 50       	subi	r24, 0x01	; 1
     b14:	e1 f7       	brne	.-8      	; 0xb0e <task_delete+0x56>
	return(1);
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	08 95       	ret
}

int task_delete(struct task *tskp)
{
	if(Task_r == Task_f)
		return(0);
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
	Task_f = (Task_f + 1) % MAX_TASK;
	*tskp = Task_q[Task_f];
	return(1);
}
     b20:	08 95       	ret

00000b22 <__vector_25>:


static int echo_mode = 1;

ISR(USART0_RX_vect)
{
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	0f 92       	push	r0
     b2a:	0b b6       	in	r0, 0x3b	; 59
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	1f 93       	push	r17
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	2a 97       	sbiw	r28, 0x0a	; 10
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	cd bf       	out	0x3d, r28	; 61
	struct task task;
	char ch;

	ch = UDR0;
     b58:	10 91 c6 00 	lds	r17, 0x00C6
	if(ch == ESC){
     b5c:	1b 31       	cpi	r17, 0x1B	; 27
     b5e:	61 f4       	brne	.+24     	; 0xb78 <__vector_25+0x56>
		echo_mode = (echo_mode+1) & 0x01;
     b60:	80 91 a3 02 	lds	r24, 0x02A3
     b64:	90 91 a4 02 	lds	r25, 0x02A4
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	81 70       	andi	r24, 0x01	; 1
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	90 93 a4 02 	sts	0x02A4, r25
     b72:	80 93 a3 02 	sts	0x02A3, r24
		return;
     b76:	24 c0       	rjmp	.+72     	; 0xbc0 <__vector_25+0x9e>
	}
	if(ch != EOT) {
     b78:	14 30       	cpi	r17, 0x04	; 4
     b7a:	69 f0       	breq	.+26     	; 0xb96 <__vector_25+0x74>
		if( ch == '\r') ch = '\n';
     b7c:	1d 30       	cpi	r17, 0x0D	; 13
     b7e:	09 f4       	brne	.+2      	; 0xb82 <__vector_25+0x60>
     b80:	1a e0       	ldi	r17, 0x0A	; 10
		if(echo_mode) uart_echo(ch);
     b82:	20 91 a3 02 	lds	r18, 0x02A3
     b86:	30 91 a4 02 	lds	r19, 0x02A4
     b8a:	21 15       	cp	r18, r1
     b8c:	31 05       	cpc	r19, r1
     b8e:	19 f0       	breq	.+6      	; 0xb96 <__vector_25+0x74>
     b90:	81 2f       	mov	r24, r17
     b92:	0e 94 1e 07 	call	0xe3c	; 0xe3c <uart_echo>
	}
	qi_insert(ch);
     b96:	81 2f       	mov	r24, r17
     b98:	0e 94 24 03 	call	0x648	; 0x648 <qi_insert>
	if(ch == EOT || ch == '\n' ) {
     b9c:	14 30       	cpi	r17, 0x04	; 4
     b9e:	11 f0       	breq	.+4      	; 0xba4 <__vector_25+0x82>
     ba0:	1a 30       	cpi	r17, 0x0A	; 10
     ba2:	71 f4       	brne	.+28     	; 0xbc0 <__vector_25+0x9e>
		task.fun = task_cmd;
     ba4:	82 e1       	ldi	r24, 0x12	; 18
     ba6:	96 e0       	ldi	r25, 0x06	; 6
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	89 83       	std	Y+1, r24	; 0x01
		strcpy(task.arg, "");
     bac:	ce 01       	movw	r24, r28
     bae:	03 96       	adiw	r24, 0x03	; 3
     bb0:	6f e4       	ldi	r22, 0x4F	; 79
     bb2:	72 e0       	ldi	r23, 0x02	; 2
     bb4:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <strcpy>
		task_insert(&task);
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	0e 94 ca 04 	call	0x994	; 0x994 <task_insert>
	}
}
     bc0:	2a 96       	adiw	r28, 0x0a	; 10
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
     bce:	bf 91       	pop	r27
     bd0:	af 91       	pop	r26
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	7f 91       	pop	r23
     bd8:	6f 91       	pop	r22
     bda:	5f 91       	pop	r21
     bdc:	4f 91       	pop	r20
     bde:	3f 91       	pop	r19
     be0:	2f 91       	pop	r18
     be2:	1f 91       	pop	r17
     be4:	0f 90       	pop	r0
     be6:	0b be       	out	0x3b, r0	; 59
     be8:	0f 90       	pop	r0
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	0f 90       	pop	r0
     bee:	1f 90       	pop	r1
     bf0:	18 95       	reti

00000bf2 <qi_peek>:

int qi_peek()
{
	if(fi == ri)
     bf2:	80 91 a4 04 	lds	r24, 0x04A4
     bf6:	90 91 a5 04 	lds	r25, 0x04A5
     bfa:	20 91 ea 04 	lds	r18, 0x04EA
     bfe:	30 91 eb 04 	lds	r19, 0x04EB
     c02:	82 17       	cp	r24, r18
     c04:	93 07       	cpc	r25, r19
     c06:	59 f0       	breq	.+22     	; 0xc1e <qi_peek+0x2c>
		return 0;
	else
		return(qi[(fi + 1) % QI_SIZE]);
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	60 e4       	ldi	r22, 0x40	; 64
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
     c12:	84 51       	subi	r24, 0x14	; 20
     c14:	9b 4f       	sbci	r25, 0xFB	; 251
     c16:	fc 01       	movw	r30, r24
     c18:	80 81       	ld	r24, Z
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	08 95       	ret
}

int qi_peek()
{
	if(fi == ri)
		return 0;
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	90 e0       	ldi	r25, 0x00	; 0
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
     c22:	08 95       	ret

00000c24 <task_cmd>:
	*tskp = Task_q[Task_f];
	return(1);
}

void task_cmd(char *arg)
{
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	ca 54       	subi	r28, 0x4A	; 74
     c3e:	d0 40       	sbci	r29, 0x00	; 0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
int uart_peek()
{
	return(qi_peek());
     c4a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <qi_peek>
{
	char buf[64], *cp0, *cp1, *cp2, *cp3;
	struct task task;
	int ms;

	if(!uart_peek()) return;
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	09 f4       	brne	.+2      	; 0xc54 <task_cmd+0x30>
     c52:	88 c0       	rjmp	.+272    	; 0xd64 <task_cmd+0x140>

	if(gets(buf) == NULL) {
     c54:	ce 01       	movw	r24, r28
     c56:	0b 96       	adiw	r24, 0x0b	; 11
     c58:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <gets>
     c5c:	00 97       	sbiw	r24, 0x00	; 0
     c5e:	29 f4       	brne	.+10     	; 0xc6a <task_cmd+0x46>
		printf("logout, good bye !!!\n");
     c60:	80 e5       	ldi	r24, 0x50	; 80
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <puts>
     c68:	ff cf       	rjmp	.-2      	; 0xc68 <task_cmd+0x44>
		while(1);
	}

	cp0 = strtok(buf, " \t\n\r" );
     c6a:	ce 01       	movw	r24, r28
     c6c:	0b 96       	adiw	r24, 0x0b	; 11
     c6e:	65 e6       	ldi	r22, 0x65	; 101
     c70:	72 e0       	ldi	r23, 0x02	; 2
     c72:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <strtok>
     c76:	8c 01       	movw	r16, r24
	cp1 = strtok(NULL, " \t\n\r" );
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	65 e6       	ldi	r22, 0x65	; 101
     c7e:	72 e0       	ldi	r23, 0x02	; 2
     c80:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <strtok>
     c84:	7c 01       	movw	r14, r24
	cp2 = strtok(NULL, " \t\n\r" );
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	65 e6       	ldi	r22, 0x65	; 101
     c8c:	72 e0       	ldi	r23, 0x02	; 2
     c8e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <strtok>
     c92:	5c 01       	movw	r10, r24
	cp3 = strtok(NULL, " \t\n\r" );
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	65 e6       	ldi	r22, 0x65	; 101
     c9a:	72 e0       	ldi	r23, 0x02	; 2
     c9c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <strtok>
     ca0:	6c 01       	movw	r12, r24

	if(cp0 == NULL) {
     ca2:	01 15       	cp	r16, r1
     ca4:	11 05       	cpc	r17, r1
     ca6:	09 f4       	brne	.+2      	; 0xcaa <task_cmd+0x86>
     ca8:	51 c0       	rjmp	.+162    	; 0xd4c <task_cmd+0x128>
	printf( "$ "); return;
	}

	if(!strcmp(cp0, "prime"))
     caa:	c8 01       	movw	r24, r16
     cac:	6d e6       	ldi	r22, 0x6D	; 109
     cae:	72 e0       	ldi	r23, 0x02	; 2
     cb0:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <strcmp>
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	21 f4       	brne	.+8      	; 0xcc0 <task_cmd+0x9c>
		task_prime(cp1);
     cb8:	c7 01       	movw	r24, r14
     cba:	0e 94 c3 02 	call	0x586	; 0x586 <task_prime>
     cbe:	46 c0       	rjmp	.+140    	; 0xd4c <task_cmd+0x128>
	else if(!strcmp(cp0, "tc1047"))
     cc0:	c8 01       	movw	r24, r16
     cc2:	63 e7       	ldi	r22, 0x73	; 115
     cc4:	72 e0       	ldi	r23, 0x02	; 2
     cc6:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <strcmp>
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	29 f4       	brne	.+10     	; 0xcd8 <task_cmd+0xb4>
		task_tc1047("");
     cce:	8f e4       	ldi	r24, 0x4F	; 79
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <task_tc1047>
     cd6:	3a c0       	rjmp	.+116    	; 0xd4c <task_cmd+0x128>
	else if(!strcmp(cp0, "timer")) {
     cd8:	c8 01       	movw	r24, r16
     cda:	6a e7       	ldi	r22, 0x7A	; 122
     cdc:	72 e0       	ldi	r23, 0x02	; 2
     cde:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <strcmp>
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	79 f5       	brne	.+94     	; 0xd44 <task_cmd+0x120>
		if (cp1 == NULL) {
     ce6:	e1 14       	cp	r14, r1
     ce8:	f1 04       	cpc	r15, r1
     cea:	19 f4       	brne	.+6      	; 0xcf2 <task_cmd+0xce>
			printf( "!!!-222\n");
     cec:	80 e8       	ldi	r24, 0x80	; 128
     cee:	92 e0       	ldi	r25, 0x02	; 2
     cf0:	2b c0       	rjmp	.+86     	; 0xd48 <task_cmd+0x124>
			printf("$ ");
			return;
		}
		ms = atoi(cp1) / 256;
     cf2:	c7 01       	movw	r24, r14
     cf4:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <atoi>
     cf8:	8c 01       	movw	r16, r24
		if(!strcmp(cp2, "prime")) {
     cfa:	c5 01       	movw	r24, r10
     cfc:	6d e6       	ldi	r22, 0x6D	; 109
     cfe:	72 e0       	ldi	r23, 0x02	; 2
     d00:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <strcmp>
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	d9 f4       	brne	.+54     	; 0xd3e <task_cmd+0x11a>
			task.fun = task_prime;
     d08:	83 ec       	ldi	r24, 0xC3	; 195
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	89 83       	std	Y+1, r24	; 0x01
			if(cp3) strcpy(task.arg, cp3);
     d10:	ce 01       	movw	r24, r28
     d12:	03 96       	adiw	r24, 0x03	; 3
     d14:	c1 14       	cp	r12, r1
     d16:	d1 04       	cpc	r13, r1
     d18:	11 f0       	breq	.+4      	; 0xd1e <task_cmd+0xfa>
     d1a:	b6 01       	movw	r22, r12
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <task_cmd+0xfe>
			else	strcpy(task.arg, "");
     d1e:	6f e4       	ldi	r22, 0x4F	; 79
     d20:	72 e0       	ldi	r23, 0x02	; 2
     d22:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <strcpy>
			cli();
     d26:	f8 94       	cli
		if (cp1 == NULL) {
			printf( "!!!-222\n");
			printf("$ ");
			return;
		}
		ms = atoi(cp1) / 256;
     d28:	c8 01       	movw	r24, r16
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	71 e0       	ldi	r23, 0x01	; 1
     d2e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
		if(!strcmp(cp2, "prime")) {
			task.fun = task_prime;
			if(cp3) strcpy(task.arg, cp3);
			else	strcpy(task.arg, "");
			cli();
			insert_timer(&task, ms);
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	0e 94 a7 03 	call	0x74e	; 0x74e <insert_timer>
			sei();
     d3a:	78 94       	sei
     d3c:	07 c0       	rjmp	.+14     	; 0xd4c <task_cmd+0x128>
		}
		else printf("!!!-333\n");
     d3e:	88 e8       	ldi	r24, 0x88	; 136
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <task_cmd+0x124>
	}
	else printf("Unknown command...\n");
     d44:	80 e9       	ldi	r24, 0x90	; 144
     d46:	92 e0       	ldi	r25, 0x02	; 2
     d48:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <puts>

	printf("$ ");
     d4c:	0f 92       	push	r0
     d4e:	0f 92       	push	r0
     d50:	8a e6       	ldi	r24, 0x6A	; 106
     d52:	92 e0       	ldi	r25, 0x02	; 2
     d54:	ed b7       	in	r30, 0x3d	; 61
     d56:	fe b7       	in	r31, 0x3e	; 62
     d58:	92 83       	std	Z+2, r25	; 0x02
     d5a:	81 83       	std	Z+1, r24	; 0x01
     d5c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
}
     d64:	c6 5b       	subi	r28, 0xB6	; 182
     d66:	df 4f       	sbci	r29, 0xFF	; 255
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	08 95       	ret

00000d88 <uart_peek>:
	else
		return(qi[(fi + 1) % QI_SIZE]);
}
int uart_peek()
{
	return(qi_peek());
     d88:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <qi_peek>
}
     d8c:	08 95       	ret

00000d8e <uart_putchar>:
		if (ch == EOT) return(-1);
		else		   return(ch);
}

int uart_putchar(char ch, FILE *stream)
{
     d8e:	cf 93       	push	r28
     d90:	c8 2f       	mov	r28, r24
	if(ch == '\n') uart_putchar( '\r' , stream);
     d92:	8a 30       	cpi	r24, 0x0A	; 10
     d94:	19 f4       	brne	.+6      	; 0xd9c <uart_putchar+0xe>
     d96:	8d e0       	ldi	r24, 0x0D	; 13
     d98:	0e 94 c7 06 	call	0xd8e	; 0xd8e <uart_putchar>

	cli();
     d9c:	f8 94       	cli
	if(!uart_busy) {
     d9e:	80 91 2c 05 	lds	r24, 0x052C
     da2:	88 23       	and	r24, r24
     da4:	59 f4       	brne	.+22     	; 0xdbc <uart_putchar+0x2e>
		UDR0 = ch;
     da6:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 2c 05 	sts	0x052C, r24
     db0:	0a c0       	rjmp	.+20     	; 0xdc6 <uart_putchar+0x38>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     db2:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     db4:	86 ef       	ldi	r24, 0xF6	; 246
     db6:	8a 95       	dec	r24
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <uart_putchar+0x28>
			_delay_us(100);
			cli();
     dba:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     dbc:	8c 2f       	mov	r24, r28
     dbe:	0e 94 63 03 	call	0x6c6	; 0x6c6 <qo_insert>
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	b1 f3       	breq	.-20     	; 0xdb2 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     dc6:	78 94       	sei

	return(1);
}
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do{
		cli();
     dd0:	f8 94       	cli
		ch = qi_delete();
     dd2:	0e 94 46 03 	call	0x68c	; 0x68c <qi_delete>
		sei();
     dd6:	78 94       	sei
		}while (ch == 0);
     dd8:	88 23       	and	r24, r24
     dda:	d1 f3       	breq	.-12     	; 0xdd0 <uart_getchar>

		if (ch == EOT) return(-1);
     ddc:	84 30       	cpi	r24, 0x04	; 4
     dde:	11 f0       	breq	.+4      	; 0xde4 <uart_getchar+0x14>
		else		   return(ch);
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
		}while (ch == 0);

		if (ch == EOT) return(-1);
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	9f ef       	ldi	r25, 0xFF	; 255
		else		   return(ch);
}
     de8:	08 95       	ret

00000dea <uart_init>:
FILE Mystdin  = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin;
     dea:	88 ea       	ldi	r24, 0xA8	; 168
     dec:	92 e0       	ldi	r25, 0x02	; 2
     dee:	90 93 32 05 	sts	0x0532, r25
     df2:	80 93 31 05 	sts	0x0531, r24
	stdout = &Mystdout;
     df6:	86 eb       	ldi	r24, 0xB6	; 182
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	90 93 34 05 	sts	0x0534, r25
     dfe:	80 93 33 05 	sts	0x0533, r24
	uart_busy = 0;
     e02:	10 92 2c 05 	sts	0x052C, r1
	q_init();
     e06:	0e 94 13 03 	call	0x626	; 0x626 <q_init>
	UBRR0H = 0x00; UBRR0L = 0x07;
     e0a:	10 92 c5 00 	sts	0x00C5, r1
     e0e:	87 e0       	ldi	r24, 0x07	; 7
     e10:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     e14:	e0 ec       	ldi	r30, 0xC0	; 192
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	82 60       	ori	r24, 0x02	; 2
     e1c:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     e1e:	e1 ec       	ldi	r30, 0xC1	; 193
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	88 60       	ori	r24, 0x08	; 8
     e26:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     e28:	80 81       	ld	r24, Z
     e2a:	80 64       	ori	r24, 0x40	; 64
     e2c:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     e2e:	80 81       	ld	r24, Z
     e30:	80 61       	ori	r24, 0x10	; 16
     e32:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     e34:	80 81       	ld	r24, Z
     e36:	80 68       	ori	r24, 0x80	; 128
     e38:	80 83       	st	Z, r24
}
     e3a:	08 95       	ret

00000e3c <uart_echo>:
}



void uart_echo(char ch)
{
     e3c:	cf 93       	push	r28
     e3e:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     e40:	8a 30       	cpi	r24, 0x0A	; 10
     e42:	19 f4       	brne	.+6      	; 0xe4a <uart_echo+0xe>
     e44:	8d e0       	ldi	r24, 0x0D	; 13
     e46:	0e 94 1e 07 	call	0xe3c	; 0xe3c <uart_echo>
	if (!uart_busy) {
     e4a:	80 91 2c 05 	lds	r24, 0x052C
     e4e:	88 23       	and	r24, r24
     e50:	31 f4       	brne	.+12     	; 0xe5e <uart_echo+0x22>
			UDR0 = ch;
     e52:	c0 93 c6 00 	sts	0x00C6, r28
			uart_busy = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 2c 05 	sts	0x052C, r24
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     e5e:	8c 2f       	mov	r24, r28
     e60:	0e 94 63 03 	call	0x6c6	; 0x6c6 <qo_insert>
}
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <__vector_27>:

ISR(USART0_TX_vect)
{
     e68:	1f 92       	push	r1
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	0f 92       	push	r0
     e70:	0b b6       	in	r0, 0x3b	; 59
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
	char ch;

	if((ch = qo_delete()) == 0)
     e8e:	0e 94 85 03 	call	0x70a	; 0x70a <qo_delete>
     e92:	88 23       	and	r24, r24
     e94:	19 f4       	brne	.+6      	; 0xe9c <__vector_27+0x34>
		uart_busy = 0;
     e96:	10 92 2c 05 	sts	0x052C, r1
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <__vector_27+0x38>
	else
		UDR0 = ch;
     e9c:	80 93 c6 00 	sts	0x00C6, r24
}
     ea0:	ff 91       	pop	r31
     ea2:	ef 91       	pop	r30
     ea4:	bf 91       	pop	r27
     ea6:	af 91       	pop	r26
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	7f 91       	pop	r23
     eae:	6f 91       	pop	r22
     eb0:	5f 91       	pop	r21
     eb2:	4f 91       	pop	r20
     eb4:	3f 91       	pop	r19
     eb6:	2f 91       	pop	r18
     eb8:	0f 90       	pop	r0
     eba:	0b be       	out	0x3b, r0	; 59
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <__vector_29>:

ISR(ADC_vect)
{
     ec6:	1f 92       	push	r1
     ec8:	0f 92       	push	r0
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	0f 92       	push	r0
     ece:	0b b6       	in	r0, 0x3b	; 59
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	28 97       	sbiw	r28, 0x08	; 8
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	cd bf       	out	0x3d, r28	; 61
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
     efe:	80 91 78 00 	lds	r24, 0x0078
     f02:	90 91 79 00 	lds	r25, 0x0079
	cbi(ADCSRA, ADEN);
     f06:	ea e7       	ldi	r30, 0x7A	; 122
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	20 81       	ld	r18, Z
     f0c:	2f 77       	andi	r18, 0x7F	; 127
     f0e:	20 83       	st	Z, r18

	sprintf(arg, "%d", data);
     f10:	00 d0       	rcall	.+0      	; 0xf12 <__vector_29+0x4c>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <__vector_29+0x4e>
     f14:	ed b7       	in	r30, 0x3d	; 61
     f16:	fe b7       	in	r31, 0x3e	; 62
     f18:	31 96       	adiw	r30, 0x01	; 1
     f1a:	8e 01       	movw	r16, r28
     f1c:	0f 5f       	subi	r16, 0xFF	; 255
     f1e:	1f 4f       	sbci	r17, 0xFF	; 255
     f20:	ad b7       	in	r26, 0x3d	; 61
     f22:	be b7       	in	r27, 0x3e	; 62
     f24:	12 96       	adiw	r26, 0x02	; 2
     f26:	1c 93       	st	X, r17
     f28:	0e 93       	st	-X, r16
     f2a:	11 97       	sbiw	r26, 0x01	; 1
     f2c:	25 ea       	ldi	r18, 0xA5	; 165
     f2e:	32 e0       	ldi	r19, 0x02	; 2
     f30:	33 83       	std	Z+3, r19	; 0x03
     f32:	22 83       	std	Z+2, r18	; 0x02
ISR(ADC_vect)
{
	uint16_t	data;
	char		arg[8];

	data = ADCW & 0x03ff;
     f34:	93 70       	andi	r25, 0x03	; 3
	cbi(ADCSRA, ADEN);

	sprintf(arg, "%d", data);
     f36:	95 83       	std	Z+5, r25	; 0x05
     f38:	84 83       	std	Z+4, r24	; 0x04
     f3a:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <sprintf>
	task_tc1047(arg);
     f3e:	8d b7       	in	r24, 0x3d	; 61
     f40:	9e b7       	in	r25, 0x3e	; 62
     f42:	06 96       	adiw	r24, 0x06	; 6
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	9e bf       	out	0x3e, r25	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	8d bf       	out	0x3d, r24	; 61
     f4e:	c8 01       	movw	r24, r16
     f50:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <task_tc1047>
}
     f54:	28 96       	adiw	r28, 0x08	; 8
     f56:	de bf       	out	0x3e, r29	; 62
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	ff 91       	pop	r31
     f60:	ef 91       	pop	r30
     f62:	bf 91       	pop	r27
     f64:	af 91       	pop	r26
     f66:	9f 91       	pop	r25
     f68:	8f 91       	pop	r24
     f6a:	7f 91       	pop	r23
     f6c:	6f 91       	pop	r22
     f6e:	5f 91       	pop	r21
     f70:	4f 91       	pop	r20
     f72:	3f 91       	pop	r19
     f74:	2f 91       	pop	r18
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	0f 90       	pop	r0
     f7c:	0b be       	out	0x3b, r0	; 59
     f7e:	0f 90       	pop	r0
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	0f 90       	pop	r0
     f84:	1f 90       	pop	r1
     f86:	18 95       	reti

00000f88 <adc_init>:
#include <compat/deprecated.h>
#include <stdlib.h>

void adc_init()
{
	cbi(DDRF, PF0);
     f88:	80 98       	cbi	0x10, 0	; 16
	ADMUX = 0x80 | 0x00;
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	80 93 7c 00 	sts	0x007C, r24
}
     f90:	08 95       	ret

00000f92 <adc_start>:

void adc_start()
{
	sbi(ADCSRA, ADEN);
     f92:	ea e7       	ldi	r30, 0x7A	; 122
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	80 68       	ori	r24, 0x80	; 128
     f9a:	80 83       	st	Z, r24
     f9c:	8d ed       	ldi	r24, 0xDD	; 221
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <adc_start+0xe>
	_delay_us(120);
	sbi(ADCSRA, ADIE);
     fa4:	80 81       	ld	r24, Z
     fa6:	88 60       	ori	r24, 0x08	; 8
     fa8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADSC);
     faa:	80 81       	ld	r24, Z
     fac:	80 64       	ori	r24, 0x40	; 64
     fae:	80 83       	st	Z, r24
}
     fb0:	08 95       	ret

00000fb2 <task_tc1047>:

void task_tc1047(char *arg)
{
	static int value;
	static int volatile in_adc = 0;
	if(!strcmp(arg, "")){
     fb2:	fc 01       	movw	r30, r24
     fb4:	20 81       	ld	r18, Z
     fb6:	22 23       	and	r18, r18
     fb8:	19 f5       	brne	.+70     	; 0x1000 <task_tc1047+0x4e>
		adc_start(); in_adc = 1; while(in_adc);
     fba:	0e 94 c9 07 	call	0xf92	; 0xf92 <adc_start>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	90 93 fb 03 	sts	0x03FB, r25
     fc6:	80 93 fa 03 	sts	0x03FA, r24
     fca:	80 91 fa 03 	lds	r24, 0x03FA
     fce:	90 91 fb 03 	lds	r25, 0x03FB
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	d1 f7       	brne	.-12     	; 0xfca <task_tc1047+0x18>
		printf("Current temperature is %d degree.\n", value);
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <task_tc1047+0x26>
     fd8:	0f 92       	push	r0
     fda:	84 ec       	ldi	r24, 0xC4	; 196
     fdc:	92 e0       	ldi	r25, 0x02	; 2
     fde:	ed b7       	in	r30, 0x3d	; 61
     fe0:	fe b7       	in	r31, 0x3e	; 62
     fe2:	92 83       	std	Z+2, r25	; 0x02
     fe4:	81 83       	std	Z+1, r24	; 0x01
     fe6:	80 91 fc 03 	lds	r24, 0x03FC
     fea:	90 91 fd 03 	lds	r25, 0x03FD
     fee:	94 83       	std	Z+4, r25	; 0x04
     ff0:	83 83       	std	Z+3, r24	; 0x03
     ff2:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	08 95       	ret
	}
	else {
		value = atoi(arg) * (1.1/1023) * 1000;
    1000:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <atoi>
    1004:	9c 01       	movw	r18, r24
    1006:	b9 01       	movw	r22, r18
    1008:	88 27       	eor	r24, r24
    100a:	77 fd       	sbrc	r23, 7
    100c:	80 95       	com	r24
    100e:	98 2f       	mov	r25, r24
    1010:	0e 94 2a 09 	call	0x1254	; 0x1254 <__floatsisf>
    1014:	29 e0       	ldi	r18, 0x09	; 9
    1016:	30 ef       	ldi	r19, 0xF0	; 240
    1018:	4c e8       	ldi	r20, 0x8C	; 140
    101a:	5a e3       	ldi	r21, 0x3A	; 58
    101c:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	4a e7       	ldi	r20, 0x7A	; 122
    1026:	54 e4       	ldi	r21, 0x44	; 68
    1028:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
    102c:	0e 94 a1 09 	call	0x1342	; 0x1342 <__fixsfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
		value = (value - 500) / 10;
    1034:	84 5f       	subi	r24, 0xF4	; 244
    1036:	91 40       	sbci	r25, 0x01	; 1
    1038:	6a e0       	ldi	r22, 0x0A	; 10
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodhi4>
    1040:	70 93 fd 03 	sts	0x03FD, r23
    1044:	60 93 fc 03 	sts	0x03FC, r22
		in_adc = 0;
    1048:	10 92 fb 03 	sts	0x03FB, r1
    104c:	10 92 fa 03 	sts	0x03FA, r1
    1050:	08 95       	ret

00001052 <__mulsf3>:
    1052:	a0 e2       	ldi	r26, 0x20	; 32
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ef e2       	ldi	r30, 0x2F	; 47
    1058:	f8 e0       	ldi	r31, 0x08	; 8
    105a:	0c 94 da 0b 	jmp	0x17b4	; 0x17b4 <__prologue_saves__+0x4>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8d 83       	std	Y+5, r24	; 0x05
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	af 83       	std	Y+7, r26	; 0x07
    1068:	b8 87       	std	Y+8, r27	; 0x08
    106a:	29 83       	std	Y+1, r18	; 0x01
    106c:	3a 83       	std	Y+2, r19	; 0x02
    106e:	4b 83       	std	Y+3, r20	; 0x03
    1070:	5c 83       	std	Y+4, r21	; 0x04
    1072:	ce 01       	movw	r24, r28
    1074:	05 96       	adiw	r24, 0x05	; 5
    1076:	be 01       	movw	r22, r28
    1078:	67 5e       	subi	r22, 0xE7	; 231
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__unpack_f>
    1080:	ce 01       	movw	r24, r28
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	be 01       	movw	r22, r28
    1086:	6f 5e       	subi	r22, 0xEF	; 239
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__unpack_f>
    108e:	99 8d       	ldd	r25, Y+25	; 0x19
    1090:	92 30       	cpi	r25, 0x02	; 2
    1092:	78 f0       	brcs	.+30     	; 0x10b2 <__mulsf3+0x60>
    1094:	89 89       	ldd	r24, Y+17	; 0x11
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	c0 f0       	brcs	.+48     	; 0x10ca <__mulsf3+0x78>
    109a:	94 30       	cpi	r25, 0x04	; 4
    109c:	19 f4       	brne	.+6      	; 0x10a4 <__mulsf3+0x52>
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	41 f4       	brne	.+16     	; 0x10b2 <__mulsf3+0x60>
    10a2:	ca c0       	rjmp	.+404    	; 0x1238 <__mulsf3+0x1e6>
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	19 f4       	brne	.+6      	; 0x10ae <__mulsf3+0x5c>
    10a8:	92 30       	cpi	r25, 0x02	; 2
    10aa:	79 f4       	brne	.+30     	; 0x10ca <__mulsf3+0x78>
    10ac:	c5 c0       	rjmp	.+394    	; 0x1238 <__mulsf3+0x1e6>
    10ae:	92 30       	cpi	r25, 0x02	; 2
    10b0:	51 f4       	brne	.+20     	; 0x10c6 <__mulsf3+0x74>
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10b6:	9a 89       	ldd	r25, Y+18	; 0x12
    10b8:	29 17       	cp	r18, r25
    10ba:	09 f4       	brne	.+2      	; 0x10be <__mulsf3+0x6c>
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	8a 8f       	std	Y+26, r24	; 0x1a
    10c0:	ce 01       	movw	r24, r28
    10c2:	49 96       	adiw	r24, 0x19	; 25
    10c4:	bb c0       	rjmp	.+374    	; 0x123c <__mulsf3+0x1ea>
    10c6:	82 30       	cpi	r24, 0x02	; 2
    10c8:	51 f4       	brne	.+20     	; 0x10de <__mulsf3+0x8c>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    10ce:	9a 89       	ldd	r25, Y+18	; 0x12
    10d0:	29 17       	cp	r18, r25
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <__mulsf3+0x84>
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	8a 8b       	std	Y+18, r24	; 0x12
    10d8:	ce 01       	movw	r24, r28
    10da:	41 96       	adiw	r24, 0x11	; 17
    10dc:	af c0       	rjmp	.+350    	; 0x123c <__mulsf3+0x1ea>
    10de:	4d 8c       	ldd	r4, Y+29	; 0x1d
    10e0:	5e 8c       	ldd	r5, Y+30	; 0x1e
    10e2:	6f 8c       	ldd	r6, Y+31	; 0x1f
    10e4:	78 a0       	lds	r23, 0x88
    10e6:	0d 89       	ldd	r16, Y+21	; 0x15
    10e8:	1e 89       	ldd	r17, Y+22	; 0x16
    10ea:	2f 89       	ldd	r18, Y+23	; 0x17
    10ec:	38 8d       	ldd	r19, Y+24	; 0x18
    10ee:	e0 e2       	ldi	r30, 0x20	; 32
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	40 e0       	ldi	r20, 0x00	; 0
    10f4:	50 e0       	ldi	r21, 0x00	; 0
    10f6:	ba 01       	movw	r22, r20
    10f8:	88 24       	eor	r8, r8
    10fa:	99 24       	eor	r9, r9
    10fc:	54 01       	movw	r10, r8
    10fe:	cc 24       	eor	r12, r12
    1100:	dd 24       	eor	r13, r13
    1102:	76 01       	movw	r14, r12
    1104:	c2 01       	movw	r24, r4
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	90 70       	andi	r25, 0x00	; 0
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	d1 f0       	breq	.+52     	; 0x1142 <__mulsf3+0xf0>
    110e:	c0 0e       	add	r12, r16
    1110:	d1 1e       	adc	r13, r17
    1112:	e2 1e       	adc	r14, r18
    1114:	f3 1e       	adc	r15, r19
    1116:	db 01       	movw	r26, r22
    1118:	ca 01       	movw	r24, r20
    111a:	88 0d       	add	r24, r8
    111c:	99 1d       	adc	r25, r9
    111e:	aa 1d       	adc	r26, r10
    1120:	bb 1d       	adc	r27, r11
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	c0 16       	cp	r12, r16
    112c:	d1 06       	cpc	r13, r17
    112e:	e2 06       	cpc	r14, r18
    1130:	f3 06       	cpc	r15, r19
    1132:	18 f0       	brcs	.+6      	; 0x113a <__mulsf3+0xe8>
    1134:	40 e0       	ldi	r20, 0x00	; 0
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	ba 01       	movw	r22, r20
    113a:	48 0f       	add	r20, r24
    113c:	59 1f       	adc	r21, r25
    113e:	6a 1f       	adc	r22, r26
    1140:	7b 1f       	adc	r23, r27
    1142:	88 0c       	add	r8, r8
    1144:	99 1c       	adc	r9, r9
    1146:	aa 1c       	adc	r10, r10
    1148:	bb 1c       	adc	r11, r11
    114a:	37 ff       	sbrs	r19, 7
    114c:	08 c0       	rjmp	.+16     	; 0x115e <__mulsf3+0x10c>
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a0 e0       	ldi	r26, 0x00	; 0
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	88 2a       	or	r8, r24
    1158:	99 2a       	or	r9, r25
    115a:	aa 2a       	or	r10, r26
    115c:	bb 2a       	or	r11, r27
    115e:	00 0f       	add	r16, r16
    1160:	11 1f       	adc	r17, r17
    1162:	22 1f       	adc	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	76 94       	lsr	r7
    1168:	67 94       	ror	r6
    116a:	57 94       	ror	r5
    116c:	47 94       	ror	r4
    116e:	31 97       	sbiw	r30, 0x01	; 1
    1170:	49 f6       	brne	.-110    	; 0x1104 <__mulsf3+0xb2>
    1172:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1174:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1176:	2b 89       	ldd	r18, Y+19	; 0x13
    1178:	3c 89       	ldd	r19, Y+20	; 0x14
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	02 96       	adiw	r24, 0x02	; 2
    1180:	9c 87       	std	Y+12, r25	; 0x0c
    1182:	8b 87       	std	Y+11, r24	; 0x0b
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1188:	9a 89       	ldd	r25, Y+18	; 0x12
    118a:	29 17       	cp	r18, r25
    118c:	09 f4       	brne	.+2      	; 0x1190 <__mulsf3+0x13e>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	8a 87       	std	Y+10, r24	; 0x0a
    1192:	2b 85       	ldd	r18, Y+11	; 0x0b
    1194:	3c 85       	ldd	r19, Y+12	; 0x0c
    1196:	17 c0       	rjmp	.+46     	; 0x11c6 <__mulsf3+0x174>
    1198:	ca 01       	movw	r24, r20
    119a:	81 70       	andi	r24, 0x01	; 1
    119c:	90 70       	andi	r25, 0x00	; 0
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	61 f0       	breq	.+24     	; 0x11ba <__mulsf3+0x168>
    11a2:	f6 94       	lsr	r15
    11a4:	e7 94       	ror	r14
    11a6:	d7 94       	ror	r13
    11a8:	c7 94       	ror	r12
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	a0 e0       	ldi	r26, 0x00	; 0
    11b0:	b0 e8       	ldi	r27, 0x80	; 128
    11b2:	c8 2a       	or	r12, r24
    11b4:	d9 2a       	or	r13, r25
    11b6:	ea 2a       	or	r14, r26
    11b8:	fb 2a       	or	r15, r27
    11ba:	76 95       	lsr	r23
    11bc:	67 95       	ror	r22
    11be:	57 95       	ror	r21
    11c0:	47 95       	ror	r20
    11c2:	2f 5f       	subi	r18, 0xFF	; 255
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	77 fd       	sbrc	r23, 7
    11c8:	e7 cf       	rjmp	.-50     	; 0x1198 <__mulsf3+0x146>
    11ca:	c9 01       	movw	r24, r18
    11cc:	0b c0       	rjmp	.+22     	; 0x11e4 <__mulsf3+0x192>
    11ce:	44 0f       	add	r20, r20
    11d0:	55 1f       	adc	r21, r21
    11d2:	66 1f       	adc	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	f7 fc       	sbrc	r15, 7
    11d8:	41 60       	ori	r20, 0x01	; 1
    11da:	cc 0c       	add	r12, r12
    11dc:	dd 1c       	adc	r13, r13
    11de:	ee 1c       	adc	r14, r14
    11e0:	ff 1c       	adc	r15, r15
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	40 30       	cpi	r20, 0x00	; 0
    11e6:	a0 e0       	ldi	r26, 0x00	; 0
    11e8:	5a 07       	cpc	r21, r26
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	6a 07       	cpc	r22, r26
    11ee:	a0 e4       	ldi	r26, 0x40	; 64
    11f0:	7a 07       	cpc	r23, r26
    11f2:	68 f3       	brcs	.-38     	; 0x11ce <__mulsf3+0x17c>
    11f4:	8b 87       	std	Y+11, r24	; 0x0b
    11f6:	9c 87       	std	Y+12, r25	; 0x0c
    11f8:	db 01       	movw	r26, r22
    11fa:	ca 01       	movw	r24, r20
    11fc:	8f 77       	andi	r24, 0x7F	; 127
    11fe:	90 70       	andi	r25, 0x00	; 0
    1200:	a0 70       	andi	r26, 0x00	; 0
    1202:	b0 70       	andi	r27, 0x00	; 0
    1204:	80 34       	cpi	r24, 0x40	; 64
    1206:	91 05       	cpc	r25, r1
    1208:	a1 05       	cpc	r26, r1
    120a:	b1 05       	cpc	r27, r1
    120c:	61 f4       	brne	.+24     	; 0x1226 <__mulsf3+0x1d4>
    120e:	47 fd       	sbrc	r20, 7
    1210:	0a c0       	rjmp	.+20     	; 0x1226 <__mulsf3+0x1d4>
    1212:	c1 14       	cp	r12, r1
    1214:	d1 04       	cpc	r13, r1
    1216:	e1 04       	cpc	r14, r1
    1218:	f1 04       	cpc	r15, r1
    121a:	29 f0       	breq	.+10     	; 0x1226 <__mulsf3+0x1d4>
    121c:	40 5c       	subi	r20, 0xC0	; 192
    121e:	5f 4f       	sbci	r21, 0xFF	; 255
    1220:	6f 4f       	sbci	r22, 0xFF	; 255
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	40 78       	andi	r20, 0x80	; 128
    1226:	4d 87       	std	Y+13, r20	; 0x0d
    1228:	5e 87       	std	Y+14, r21	; 0x0e
    122a:	6f 87       	std	Y+15, r22	; 0x0f
    122c:	78 8b       	std	Y+16, r23	; 0x10
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	89 87       	std	Y+9, r24	; 0x09
    1232:	ce 01       	movw	r24, r28
    1234:	09 96       	adiw	r24, 0x09	; 9
    1236:	02 c0       	rjmp	.+4      	; 0x123c <__mulsf3+0x1ea>
    1238:	87 ee       	ldi	r24, 0xE7	; 231
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	0e 94 45 0a 	call	0x148a	; 0x148a <__pack_f>
    1240:	46 2f       	mov	r20, r22
    1242:	57 2f       	mov	r21, r23
    1244:	68 2f       	mov	r22, r24
    1246:	79 2f       	mov	r23, r25
    1248:	cb 01       	movw	r24, r22
    124a:	ba 01       	movw	r22, r20
    124c:	a0 96       	adiw	r28, 0x20	; 32
    124e:	e0 e1       	ldi	r30, 0x10	; 16
    1250:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__epilogue_restores__+0x4>

00001254 <__floatsisf>:
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	28 97       	sbiw	r28, 0x08	; 8
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	6b 01       	movw	r12, r22
    1272:	7c 01       	movw	r14, r24
    1274:	83 e0       	ldi	r24, 0x03	; 3
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	d7 01       	movw	r26, r14
    127a:	c6 01       	movw	r24, r12
    127c:	88 27       	eor	r24, r24
    127e:	b7 fd       	sbrc	r27, 7
    1280:	83 95       	inc	r24
    1282:	99 27       	eor	r25, r25
    1284:	aa 27       	eor	r26, r26
    1286:	bb 27       	eor	r27, r27
    1288:	28 2f       	mov	r18, r24
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	c1 14       	cp	r12, r1
    128e:	d1 04       	cpc	r13, r1
    1290:	e1 04       	cpc	r14, r1
    1292:	f1 04       	cpc	r15, r1
    1294:	19 f4       	brne	.+6      	; 0x129c <__floatsisf+0x48>
    1296:	82 e0       	ldi	r24, 0x02	; 2
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	35 c0       	rjmp	.+106    	; 0x1306 <__floatsisf+0xb2>
    129c:	8e e1       	ldi	r24, 0x1E	; 30
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
    12a4:	22 23       	and	r18, r18
    12a6:	89 f0       	breq	.+34     	; 0x12ca <__floatsisf+0x76>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	c8 16       	cp	r12, r24
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	d8 06       	cpc	r13, r24
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	e8 06       	cpc	r14, r24
    12b4:	80 e8       	ldi	r24, 0x80	; 128
    12b6:	f8 06       	cpc	r15, r24
    12b8:	59 f1       	breq	.+86     	; 0x1310 <__floatsisf+0xbc>
    12ba:	f0 94       	com	r15
    12bc:	e0 94       	com	r14
    12be:	d0 94       	com	r13
    12c0:	c0 94       	com	r12
    12c2:	c1 1c       	adc	r12, r1
    12c4:	d1 1c       	adc	r13, r1
    12c6:	e1 1c       	adc	r14, r1
    12c8:	f1 1c       	adc	r15, r1
    12ca:	cd 82       	std	Y+5, r12	; 0x05
    12cc:	de 82       	std	Y+6, r13	; 0x06
    12ce:	ef 82       	std	Y+7, r14	; 0x07
    12d0:	f8 86       	std	Y+8, r15	; 0x08
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <__clzsi2>
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	18 16       	cp	r1, r24
    12de:	19 06       	cpc	r1, r25
    12e0:	94 f4       	brge	.+36     	; 0x1306 <__floatsisf+0xb2>
    12e2:	08 2e       	mov	r0, r24
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <__floatsisf+0x9a>
    12e6:	cc 0c       	add	r12, r12
    12e8:	dd 1c       	adc	r13, r13
    12ea:	ee 1c       	adc	r14, r14
    12ec:	ff 1c       	adc	r15, r15
    12ee:	0a 94       	dec	r0
    12f0:	d2 f7       	brpl	.-12     	; 0x12e6 <__floatsisf+0x92>
    12f2:	cd 82       	std	Y+5, r12	; 0x05
    12f4:	de 82       	std	Y+6, r13	; 0x06
    12f6:	ef 82       	std	Y+7, r14	; 0x07
    12f8:	f8 86       	std	Y+8, r15	; 0x08
    12fa:	2e e1       	ldi	r18, 0x1E	; 30
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	28 1b       	sub	r18, r24
    1300:	39 0b       	sbc	r19, r25
    1302:	3c 83       	std	Y+4, r19	; 0x04
    1304:	2b 83       	std	Y+3, r18	; 0x03
    1306:	ce 01       	movw	r24, r28
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	0e 94 45 0a 	call	0x148a	; 0x148a <__pack_f>
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__floatsisf+0xc4>
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	9f ec       	ldi	r25, 0xCF	; 207
    1318:	38 2f       	mov	r19, r24
    131a:	29 2f       	mov	r18, r25
    131c:	86 2f       	mov	r24, r22
    131e:	97 2f       	mov	r25, r23
    1320:	a3 2f       	mov	r26, r19
    1322:	b2 2f       	mov	r27, r18
    1324:	bc 01       	movw	r22, r24
    1326:	cd 01       	movw	r24, r26
    1328:	28 96       	adiw	r28, 0x08	; 8
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	08 95       	ret

00001342 <__fixsfsi>:
    1342:	ac e0       	ldi	r26, 0x0C	; 12
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e7 ea       	ldi	r30, 0xA7	; 167
    1348:	f9 e0       	ldi	r31, 0x09	; 9
    134a:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__prologue_saves__+0x1c>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	89 83       	std	Y+1, r24	; 0x01
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	ab 83       	std	Y+3, r26	; 0x03
    1358:	bc 83       	std	Y+4, r27	; 0x04
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	be 01       	movw	r22, r28
    1360:	6b 5f       	subi	r22, 0xFB	; 251
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__unpack_f>
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	69 f1       	breq	.+90     	; 0x13c8 <__fixsfsi+0x86>
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	58 f1       	brcs	.+86     	; 0x13c8 <__fixsfsi+0x86>
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	39 f0       	breq	.+14     	; 0x1384 <__fixsfsi+0x42>
    1376:	2f 81       	ldd	r18, Y+7	; 0x07
    1378:	38 85       	ldd	r19, Y+8	; 0x08
    137a:	37 fd       	sbrc	r19, 7
    137c:	25 c0       	rjmp	.+74     	; 0x13c8 <__fixsfsi+0x86>
    137e:	2f 31       	cpi	r18, 0x1F	; 31
    1380:	31 05       	cpc	r19, r1
    1382:	44 f0       	brlt	.+16     	; 0x1394 <__fixsfsi+0x52>
    1384:	8e 81       	ldd	r24, Y+6	; 0x06
    1386:	88 23       	and	r24, r24
    1388:	19 f1       	breq	.+70     	; 0x13d0 <__fixsfsi+0x8e>
    138a:	00 e0       	ldi	r16, 0x00	; 0
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e8       	ldi	r19, 0x80	; 128
    1392:	22 c0       	rjmp	.+68     	; 0x13d8 <__fixsfsi+0x96>
    1394:	8e e1       	ldi	r24, 0x1E	; 30
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	82 1b       	sub	r24, r18
    139a:	93 0b       	sbc	r25, r19
    139c:	09 85       	ldd	r16, Y+9	; 0x09
    139e:	1a 85       	ldd	r17, Y+10	; 0x0a
    13a0:	2b 85       	ldd	r18, Y+11	; 0x0b
    13a2:	3c 85       	ldd	r19, Y+12	; 0x0c
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <__fixsfsi+0x6c>
    13a6:	36 95       	lsr	r19
    13a8:	27 95       	ror	r18
    13aa:	17 95       	ror	r17
    13ac:	07 95       	ror	r16
    13ae:	8a 95       	dec	r24
    13b0:	d2 f7       	brpl	.-12     	; 0x13a6 <__fixsfsi+0x64>
    13b2:	8e 81       	ldd	r24, Y+6	; 0x06
    13b4:	88 23       	and	r24, r24
    13b6:	81 f0       	breq	.+32     	; 0x13d8 <__fixsfsi+0x96>
    13b8:	30 95       	com	r19
    13ba:	20 95       	com	r18
    13bc:	10 95       	com	r17
    13be:	01 95       	neg	r16
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	2f 4f       	sbci	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	08 c0       	rjmp	.+16     	; 0x13d8 <__fixsfsi+0x96>
    13c8:	00 e0       	ldi	r16, 0x00	; 0
    13ca:	10 e0       	ldi	r17, 0x00	; 0
    13cc:	98 01       	movw	r18, r16
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <__fixsfsi+0x96>
    13d0:	0f ef       	ldi	r16, 0xFF	; 255
    13d2:	1f ef       	ldi	r17, 0xFF	; 255
    13d4:	2f ef       	ldi	r18, 0xFF	; 255
    13d6:	3f e7       	ldi	r19, 0x7F	; 127
    13d8:	b8 01       	movw	r22, r16
    13da:	c9 01       	movw	r24, r18
    13dc:	2c 96       	adiw	r28, 0x0c	; 12
    13de:	e4 e0       	ldi	r30, 0x04	; 4
    13e0:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__epilogue_restores__+0x1c>

000013e4 <__clzsi2>:
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	8b 01       	movw	r16, r22
    13f2:	9c 01       	movw	r18, r24
    13f4:	00 30       	cpi	r16, 0x00	; 0
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	18 07       	cpc	r17, r24
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	28 07       	cpc	r18, r24
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	38 07       	cpc	r19, r24
    1402:	50 f4       	brcc	.+20     	; 0x1418 <__clzsi2+0x34>
    1404:	0f 3f       	cpi	r16, 0xFF	; 255
    1406:	11 05       	cpc	r17, r1
    1408:	21 05       	cpc	r18, r1
    140a:	31 05       	cpc	r19, r1
    140c:	09 f0       	breq	.+2      	; 0x1410 <__clzsi2+0x2c>
    140e:	88 f4       	brcc	.+34     	; 0x1432 <__clzsi2+0x4e>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	dc 01       	movw	r26, r24
    1416:	16 c0       	rjmp	.+44     	; 0x1444 <__clzsi2+0x60>
    1418:	00 30       	cpi	r16, 0x00	; 0
    141a:	e0 e0       	ldi	r30, 0x00	; 0
    141c:	1e 07       	cpc	r17, r30
    141e:	e0 e0       	ldi	r30, 0x00	; 0
    1420:	2e 07       	cpc	r18, r30
    1422:	e1 e0       	ldi	r30, 0x01	; 1
    1424:	3e 07       	cpc	r19, r30
    1426:	50 f4       	brcc	.+20     	; 0x143c <__clzsi2+0x58>
    1428:	80 e1       	ldi	r24, 0x10	; 16
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a0 e0       	ldi	r26, 0x00	; 0
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <__clzsi2+0x60>
    1432:	88 e0       	ldi	r24, 0x08	; 8
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	a0 e0       	ldi	r26, 0x00	; 0
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <__clzsi2+0x60>
    143c:	88 e1       	ldi	r24, 0x18	; 24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	48 1b       	sub	r20, r24
    144e:	59 0b       	sbc	r21, r25
    1450:	6a 0b       	sbc	r22, r26
    1452:	7b 0b       	sbc	r23, r27
    1454:	68 01       	movw	r12, r16
    1456:	79 01       	movw	r14, r18
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <__clzsi2+0x7e>
    145a:	f6 94       	lsr	r15
    145c:	e7 94       	ror	r14
    145e:	d7 94       	ror	r13
    1460:	c7 94       	ror	r12
    1462:	8a 95       	dec	r24
    1464:	d2 f7       	brpl	.-12     	; 0x145a <__clzsi2+0x76>
    1466:	d7 01       	movw	r26, r14
    1468:	c6 01       	movw	r24, r12
    146a:	81 51       	subi	r24, 0x11	; 17
    146c:	9d 4f       	sbci	r25, 0xFD	; 253
    146e:	fc 01       	movw	r30, r24
    1470:	80 81       	ld	r24, Z
    1472:	48 1b       	sub	r20, r24
    1474:	51 09       	sbc	r21, r1
    1476:	61 09       	sbc	r22, r1
    1478:	71 09       	sbc	r23, r1
    147a:	ca 01       	movw	r24, r20
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	ff 90       	pop	r15
    1482:	ef 90       	pop	r14
    1484:	df 90       	pop	r13
    1486:	cf 90       	pop	r12
    1488:	08 95       	ret

0000148a <__pack_f>:
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	dc 01       	movw	r26, r24
    1498:	14 96       	adiw	r26, 0x04	; 4
    149a:	4d 91       	ld	r20, X+
    149c:	5d 91       	ld	r21, X+
    149e:	6d 91       	ld	r22, X+
    14a0:	7c 91       	ld	r23, X
    14a2:	17 97       	sbiw	r26, 0x07	; 7
    14a4:	11 96       	adiw	r26, 0x01	; 1
    14a6:	ec 91       	ld	r30, X
    14a8:	11 97       	sbiw	r26, 0x01	; 1
    14aa:	8c 91       	ld	r24, X
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	20 f4       	brcc	.+8      	; 0x14b8 <__pack_f+0x2e>
    14b0:	60 61       	ori	r22, 0x10	; 16
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a5 c0       	rjmp	.+330    	; 0x1602 <__pack_f+0x178>
    14b8:	84 30       	cpi	r24, 0x04	; 4
    14ba:	09 f4       	brne	.+2      	; 0x14be <__pack_f+0x34>
    14bc:	9d c0       	rjmp	.+314    	; 0x15f8 <__pack_f+0x16e>
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <__pack_f+0x3a>
    14c2:	94 c0       	rjmp	.+296    	; 0x15ec <__pack_f+0x162>
    14c4:	41 15       	cp	r20, r1
    14c6:	51 05       	cpc	r21, r1
    14c8:	61 05       	cpc	r22, r1
    14ca:	71 05       	cpc	r23, r1
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <__pack_f+0x46>
    14ce:	91 c0       	rjmp	.+290    	; 0x15f2 <__pack_f+0x168>
    14d0:	12 96       	adiw	r26, 0x02	; 2
    14d2:	8d 91       	ld	r24, X+
    14d4:	9c 91       	ld	r25, X
    14d6:	13 97       	sbiw	r26, 0x03	; 3
    14d8:	2f ef       	ldi	r18, 0xFF	; 255
    14da:	82 38       	cpi	r24, 0x82	; 130
    14dc:	92 07       	cpc	r25, r18
    14de:	0c f0       	brlt	.+2      	; 0x14e2 <__pack_f+0x58>
    14e0:	59 c0       	rjmp	.+178    	; 0x1594 <__pack_f+0x10a>
    14e2:	22 e8       	ldi	r18, 0x82	; 130
    14e4:	3f ef       	ldi	r19, 0xFF	; 255
    14e6:	28 1b       	sub	r18, r24
    14e8:	39 0b       	sbc	r19, r25
    14ea:	2a 31       	cpi	r18, 0x1A	; 26
    14ec:	31 05       	cpc	r19, r1
    14ee:	64 f5       	brge	.+88     	; 0x1548 <__pack_f+0xbe>
    14f0:	6a 01       	movw	r12, r20
    14f2:	7b 01       	movw	r14, r22
    14f4:	02 2e       	mov	r0, r18
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <__pack_f+0x76>
    14f8:	f6 94       	lsr	r15
    14fa:	e7 94       	ror	r14
    14fc:	d7 94       	ror	r13
    14fe:	c7 94       	ror	r12
    1500:	0a 94       	dec	r0
    1502:	d2 f7       	brpl	.-12     	; 0x14f8 <__pack_f+0x6e>
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	a0 e0       	ldi	r26, 0x00	; 0
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <__pack_f+0x8c>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	aa 1f       	adc	r26, r26
    1514:	bb 1f       	adc	r27, r27
    1516:	2a 95       	dec	r18
    1518:	d2 f7       	brpl	.-12     	; 0x150e <__pack_f+0x84>
    151a:	01 97       	sbiw	r24, 0x01	; 1
    151c:	a1 09       	sbc	r26, r1
    151e:	b1 09       	sbc	r27, r1
    1520:	84 23       	and	r24, r20
    1522:	95 23       	and	r25, r21
    1524:	a6 23       	and	r26, r22
    1526:	b7 23       	and	r27, r23
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	50 e0       	ldi	r21, 0x00	; 0
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	a1 05       	cpc	r26, r1
    1534:	b1 05       	cpc	r27, r1
    1536:	19 f4       	brne	.+6      	; 0x153e <__pack_f+0xb4>
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	ba 01       	movw	r22, r20
    153e:	4c 29       	or	r20, r12
    1540:	5d 29       	or	r21, r13
    1542:	6e 29       	or	r22, r14
    1544:	7f 29       	or	r23, r15
    1546:	03 c0       	rjmp	.+6      	; 0x154e <__pack_f+0xc4>
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	ba 01       	movw	r22, r20
    154e:	db 01       	movw	r26, r22
    1550:	ca 01       	movw	r24, r20
    1552:	8f 77       	andi	r24, 0x7F	; 127
    1554:	90 70       	andi	r25, 0x00	; 0
    1556:	a0 70       	andi	r26, 0x00	; 0
    1558:	b0 70       	andi	r27, 0x00	; 0
    155a:	80 34       	cpi	r24, 0x40	; 64
    155c:	91 05       	cpc	r25, r1
    155e:	a1 05       	cpc	r26, r1
    1560:	b1 05       	cpc	r27, r1
    1562:	39 f4       	brne	.+14     	; 0x1572 <__pack_f+0xe8>
    1564:	47 ff       	sbrs	r20, 7
    1566:	09 c0       	rjmp	.+18     	; 0x157a <__pack_f+0xf0>
    1568:	40 5c       	subi	r20, 0xC0	; 192
    156a:	5f 4f       	sbci	r21, 0xFF	; 255
    156c:	6f 4f       	sbci	r22, 0xFF	; 255
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	04 c0       	rjmp	.+8      	; 0x157a <__pack_f+0xf0>
    1572:	41 5c       	subi	r20, 0xC1	; 193
    1574:	5f 4f       	sbci	r21, 0xFF	; 255
    1576:	6f 4f       	sbci	r22, 0xFF	; 255
    1578:	7f 4f       	sbci	r23, 0xFF	; 255
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	40 30       	cpi	r20, 0x00	; 0
    1580:	20 e0       	ldi	r18, 0x00	; 0
    1582:	52 07       	cpc	r21, r18
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	62 07       	cpc	r22, r18
    1588:	20 e4       	ldi	r18, 0x40	; 64
    158a:	72 07       	cpc	r23, r18
    158c:	38 f5       	brcc	.+78     	; 0x15dc <__pack_f+0x152>
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	24 c0       	rjmp	.+72     	; 0x15dc <__pack_f+0x152>
    1594:	80 38       	cpi	r24, 0x80	; 128
    1596:	91 05       	cpc	r25, r1
    1598:	7c f5       	brge	.+94     	; 0x15f8 <__pack_f+0x16e>
    159a:	8a 01       	movw	r16, r20
    159c:	9b 01       	movw	r18, r22
    159e:	0f 77       	andi	r16, 0x7F	; 127
    15a0:	10 70       	andi	r17, 0x00	; 0
    15a2:	20 70       	andi	r18, 0x00	; 0
    15a4:	30 70       	andi	r19, 0x00	; 0
    15a6:	00 34       	cpi	r16, 0x40	; 64
    15a8:	11 05       	cpc	r17, r1
    15aa:	21 05       	cpc	r18, r1
    15ac:	31 05       	cpc	r19, r1
    15ae:	39 f4       	brne	.+14     	; 0x15be <__pack_f+0x134>
    15b0:	47 ff       	sbrs	r20, 7
    15b2:	09 c0       	rjmp	.+18     	; 0x15c6 <__pack_f+0x13c>
    15b4:	40 5c       	subi	r20, 0xC0	; 192
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	6f 4f       	sbci	r22, 0xFF	; 255
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <__pack_f+0x13c>
    15be:	41 5c       	subi	r20, 0xC1	; 193
    15c0:	5f 4f       	sbci	r21, 0xFF	; 255
    15c2:	6f 4f       	sbci	r22, 0xFF	; 255
    15c4:	7f 4f       	sbci	r23, 0xFF	; 255
    15c6:	77 fd       	sbrc	r23, 7
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <__pack_f+0x146>
    15ca:	81 58       	subi	r24, 0x81	; 129
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <__pack_f+0x152>
    15d0:	76 95       	lsr	r23
    15d2:	67 95       	ror	r22
    15d4:	57 95       	ror	r21
    15d6:	47 95       	ror	r20
    15d8:	80 58       	subi	r24, 0x80	; 128
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	97 e0       	ldi	r25, 0x07	; 7
    15de:	76 95       	lsr	r23
    15e0:	67 95       	ror	r22
    15e2:	57 95       	ror	r21
    15e4:	47 95       	ror	r20
    15e6:	9a 95       	dec	r25
    15e8:	d1 f7       	brne	.-12     	; 0x15de <__pack_f+0x154>
    15ea:	0b c0       	rjmp	.+22     	; 0x1602 <__pack_f+0x178>
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	05 c0       	rjmp	.+10     	; 0x15fc <__pack_f+0x172>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	05 c0       	rjmp	.+10     	; 0x1602 <__pack_f+0x178>
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	ba 01       	movw	r22, r20
    1602:	98 2f       	mov	r25, r24
    1604:	97 95       	ror	r25
    1606:	99 27       	eor	r25, r25
    1608:	97 95       	ror	r25
    160a:	a6 2f       	mov	r26, r22
    160c:	af 77       	andi	r26, 0x7F	; 127
    160e:	e7 95       	ror	r30
    1610:	ee 27       	eor	r30, r30
    1612:	e7 95       	ror	r30
    1614:	86 95       	lsr	r24
    1616:	3a 2f       	mov	r19, r26
    1618:	39 2b       	or	r19, r25
    161a:	28 2f       	mov	r18, r24
    161c:	2e 2b       	or	r18, r30
    161e:	84 2f       	mov	r24, r20
    1620:	95 2f       	mov	r25, r21
    1622:	a3 2f       	mov	r26, r19
    1624:	b2 2f       	mov	r27, r18
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	08 95       	ret

00001638 <__unpack_f>:
    1638:	dc 01       	movw	r26, r24
    163a:	fb 01       	movw	r30, r22
    163c:	4c 91       	ld	r20, X
    163e:	11 96       	adiw	r26, 0x01	; 1
    1640:	5c 91       	ld	r21, X
    1642:	11 97       	sbiw	r26, 0x01	; 1
    1644:	12 96       	adiw	r26, 0x02	; 2
    1646:	8c 91       	ld	r24, X
    1648:	12 97       	sbiw	r26, 0x02	; 2
    164a:	68 2f       	mov	r22, r24
    164c:	6f 77       	andi	r22, 0x7F	; 127
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	98 2f       	mov	r25, r24
    1652:	99 1f       	adc	r25, r25
    1654:	99 27       	eor	r25, r25
    1656:	99 1f       	adc	r25, r25
    1658:	13 96       	adiw	r26, 0x03	; 3
    165a:	2c 91       	ld	r18, X
    165c:	13 97       	sbiw	r26, 0x03	; 3
    165e:	82 2f       	mov	r24, r18
    1660:	88 0f       	add	r24, r24
    1662:	89 2b       	or	r24, r25
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	22 1f       	adc	r18, r18
    1668:	22 27       	eor	r18, r18
    166a:	22 1f       	adc	r18, r18
    166c:	21 83       	std	Z+1, r18	; 0x01
    166e:	00 97       	sbiw	r24, 0x00	; 0
    1670:	39 f5       	brne	.+78     	; 0x16c0 <__unpack_f+0x88>
    1672:	41 15       	cp	r20, r1
    1674:	51 05       	cpc	r21, r1
    1676:	61 05       	cpc	r22, r1
    1678:	71 05       	cpc	r23, r1
    167a:	11 f4       	brne	.+4      	; 0x1680 <__unpack_f+0x48>
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	29 c0       	rjmp	.+82     	; 0x16d2 <__unpack_f+0x9a>
    1680:	82 e8       	ldi	r24, 0x82	; 130
    1682:	9f ef       	ldi	r25, 0xFF	; 255
    1684:	93 83       	std	Z+3, r25	; 0x03
    1686:	82 83       	std	Z+2, r24	; 0x02
    1688:	27 e0       	ldi	r18, 0x07	; 7
    168a:	44 0f       	add	r20, r20
    168c:	55 1f       	adc	r21, r21
    168e:	66 1f       	adc	r22, r22
    1690:	77 1f       	adc	r23, r23
    1692:	2a 95       	dec	r18
    1694:	d1 f7       	brne	.-12     	; 0x168a <__unpack_f+0x52>
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	80 83       	st	Z, r24
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <__unpack_f+0x76>
    169c:	44 0f       	add	r20, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	66 1f       	adc	r22, r22
    16a2:	77 1f       	adc	r23, r23
    16a4:	82 81       	ldd	r24, Z+2	; 0x02
    16a6:	93 81       	ldd	r25, Z+3	; 0x03
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	93 83       	std	Z+3, r25	; 0x03
    16ac:	82 83       	std	Z+2, r24	; 0x02
    16ae:	40 30       	cpi	r20, 0x00	; 0
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	58 07       	cpc	r21, r24
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	68 07       	cpc	r22, r24
    16b8:	80 e4       	ldi	r24, 0x40	; 64
    16ba:	78 07       	cpc	r23, r24
    16bc:	78 f3       	brcs	.-34     	; 0x169c <__unpack_f+0x64>
    16be:	20 c0       	rjmp	.+64     	; 0x1700 <__unpack_f+0xc8>
    16c0:	8f 3f       	cpi	r24, 0xFF	; 255
    16c2:	91 05       	cpc	r25, r1
    16c4:	79 f4       	brne	.+30     	; 0x16e4 <__unpack_f+0xac>
    16c6:	41 15       	cp	r20, r1
    16c8:	51 05       	cpc	r21, r1
    16ca:	61 05       	cpc	r22, r1
    16cc:	71 05       	cpc	r23, r1
    16ce:	19 f4       	brne	.+6      	; 0x16d6 <__unpack_f+0x9e>
    16d0:	84 e0       	ldi	r24, 0x04	; 4
    16d2:	80 83       	st	Z, r24
    16d4:	08 95       	ret
    16d6:	64 ff       	sbrs	r22, 4
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <__unpack_f+0xa8>
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	80 83       	st	Z, r24
    16de:	10 c0       	rjmp	.+32     	; 0x1700 <__unpack_f+0xc8>
    16e0:	10 82       	st	Z, r1
    16e2:	0e c0       	rjmp	.+28     	; 0x1700 <__unpack_f+0xc8>
    16e4:	8f 57       	subi	r24, 0x7F	; 127
    16e6:	90 40       	sbci	r25, 0x00	; 0
    16e8:	93 83       	std	Z+3, r25	; 0x03
    16ea:	82 83       	std	Z+2, r24	; 0x02
    16ec:	83 e0       	ldi	r24, 0x03	; 3
    16ee:	80 83       	st	Z, r24
    16f0:	87 e0       	ldi	r24, 0x07	; 7
    16f2:	44 0f       	add	r20, r20
    16f4:	55 1f       	adc	r21, r21
    16f6:	66 1f       	adc	r22, r22
    16f8:	77 1f       	adc	r23, r23
    16fa:	8a 95       	dec	r24
    16fc:	d1 f7       	brne	.-12     	; 0x16f2 <__unpack_f+0xba>
    16fe:	70 64       	ori	r23, 0x40	; 64
    1700:	44 83       	std	Z+4, r20	; 0x04
    1702:	55 83       	std	Z+5, r21	; 0x05
    1704:	66 83       	std	Z+6, r22	; 0x06
    1706:	77 83       	std	Z+7, r23	; 0x07
    1708:	08 95       	ret

0000170a <main>:
#include "timer.h"
#include "q.h"
#include <avr/interrupt.h>

int main()
{
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	2a 97       	sbiw	r28, 0x0a	; 10
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
	int tag;
	struct task task;

	uart_init();
    171e:	0e 94 f5 06 	call	0xdea	; 0xdea <uart_init>
	task_init();
    1722:	0e 94 c1 04 	call	0x982	; 0x982 <task_init>
	timer_init();
    1726:	0e 94 ac 04 	call	0x958	; 0x958 <timer_init>
	adc_init();
    172a:	0e 94 c4 07 	call	0xf88	; 0xf88 <adc_init>

	printf("$ ");
    172e:	0f 92       	push	r0
    1730:	0f 92       	push	r0
    1732:	8a e0       	ldi	r24, 0x0A	; 10
    1734:	92 e0       	ldi	r25, 0x02	; 2
    1736:	ed b7       	in	r30, 0x3d	; 61
    1738:	fe b7       	in	r31, 0x3e	; 62
    173a:	92 83       	std	Z+2, r25	; 0x02
    173c:	81 83       	std	Z+1, r24	; 0x01
    173e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <printf>
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0

	while(1){
		cli();
    1746:	f8 94       	cli
		tag = task_delete(&task);
    1748:	ce 01       	movw	r24, r28
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	0e 94 5c 05 	call	0xab8	; 0xab8 <task_delete>
		sei();
    1750:	78 94       	sei
		if (tag)
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	c1 f3       	breq	.-16     	; 0x1746 <main+0x3c>
			(*(task.fun))(task.arg);
    1756:	e9 81       	ldd	r30, Y+1	; 0x01
    1758:	fa 81       	ldd	r31, Y+2	; 0x02
    175a:	ce 01       	movw	r24, r28
    175c:	03 96       	adiw	r24, 0x03	; 3
    175e:	19 95       	eicall
    1760:	f2 cf       	rjmp	.-28     	; 0x1746 <main+0x3c>

00001762 <__divmodhi4>:
    1762:	97 fb       	bst	r25, 7
    1764:	09 2e       	mov	r0, r25
    1766:	07 26       	eor	r0, r23
    1768:	0a d0       	rcall	.+20     	; 0x177e <__divmodhi4_neg1>
    176a:	77 fd       	sbrc	r23, 7
    176c:	04 d0       	rcall	.+8      	; 0x1776 <__divmodhi4_neg2>
    176e:	0c d0       	rcall	.+24     	; 0x1788 <__udivmodhi4>
    1770:	06 d0       	rcall	.+12     	; 0x177e <__divmodhi4_neg1>
    1772:	00 20       	and	r0, r0
    1774:	1a f4       	brpl	.+6      	; 0x177c <__divmodhi4_exit>

00001776 <__divmodhi4_neg2>:
    1776:	70 95       	com	r23
    1778:	61 95       	neg	r22
    177a:	7f 4f       	sbci	r23, 0xFF	; 255

0000177c <__divmodhi4_exit>:
    177c:	08 95       	ret

0000177e <__divmodhi4_neg1>:
    177e:	f6 f7       	brtc	.-4      	; 0x177c <__divmodhi4_exit>
    1780:	90 95       	com	r25
    1782:	81 95       	neg	r24
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	08 95       	ret

00001788 <__udivmodhi4>:
    1788:	aa 1b       	sub	r26, r26
    178a:	bb 1b       	sub	r27, r27
    178c:	51 e1       	ldi	r21, 0x11	; 17
    178e:	07 c0       	rjmp	.+14     	; 0x179e <__udivmodhi4_ep>

00001790 <__udivmodhi4_loop>:
    1790:	aa 1f       	adc	r26, r26
    1792:	bb 1f       	adc	r27, r27
    1794:	a6 17       	cp	r26, r22
    1796:	b7 07       	cpc	r27, r23
    1798:	10 f0       	brcs	.+4      	; 0x179e <__udivmodhi4_ep>
    179a:	a6 1b       	sub	r26, r22
    179c:	b7 0b       	sbc	r27, r23

0000179e <__udivmodhi4_ep>:
    179e:	88 1f       	adc	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	5a 95       	dec	r21
    17a4:	a9 f7       	brne	.-22     	; 0x1790 <__udivmodhi4_loop>
    17a6:	80 95       	com	r24
    17a8:	90 95       	com	r25
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	08 95       	ret

000017b0 <__prologue_saves__>:
    17b0:	2f 92       	push	r2
    17b2:	3f 92       	push	r3
    17b4:	4f 92       	push	r4
    17b6:	5f 92       	push	r5
    17b8:	6f 92       	push	r6
    17ba:	7f 92       	push	r7
    17bc:	8f 92       	push	r8
    17be:	9f 92       	push	r9
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	ca 1b       	sub	r28, r26
    17da:	db 0b       	sbc	r29, r27
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	19 94       	eijmp

000017e8 <__epilogue_restores__>:
    17e8:	2a 88       	ldd	r2, Y+18	; 0x12
    17ea:	39 88       	ldd	r3, Y+17	; 0x11
    17ec:	48 88       	ldd	r4, Y+16	; 0x10
    17ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    17f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    17f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    17f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    17f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    17f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    17fa:	b9 84       	ldd	r11, Y+9	; 0x09
    17fc:	c8 84       	ldd	r12, Y+8	; 0x08
    17fe:	df 80       	ldd	r13, Y+7	; 0x07
    1800:	ee 80       	ldd	r14, Y+6	; 0x06
    1802:	fd 80       	ldd	r15, Y+5	; 0x05
    1804:	0c 81       	ldd	r16, Y+4	; 0x04
    1806:	1b 81       	ldd	r17, Y+3	; 0x03
    1808:	aa 81       	ldd	r26, Y+2	; 0x02
    180a:	b9 81       	ldd	r27, Y+1	; 0x01
    180c:	ce 0f       	add	r28, r30
    180e:	d1 1d       	adc	r29, r1
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	ed 01       	movw	r28, r26
    181c:	08 95       	ret

0000181e <malloc>:
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	ac 01       	movw	r20, r24
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	91 05       	cpc	r25, r1
    1828:	10 f4       	brcc	.+4      	; 0x182e <malloc+0x10>
    182a:	42 e0       	ldi	r20, 0x02	; 2
    182c:	50 e0       	ldi	r21, 0x00	; 0
    182e:	e0 91 2f 05 	lds	r30, 0x052F
    1832:	f0 91 30 05 	lds	r31, 0x0530
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	a0 e0       	ldi	r26, 0x00	; 0
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	24 c0       	rjmp	.+72     	; 0x1888 <malloc+0x6a>
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	84 17       	cp	r24, r20
    1846:	95 07       	cpc	r25, r21
    1848:	d0 f0       	brcs	.+52     	; 0x187e <malloc+0x60>
    184a:	84 17       	cp	r24, r20
    184c:	95 07       	cpc	r25, r21
    184e:	71 f4       	brne	.+28     	; 0x186c <malloc+0x4e>
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	10 97       	sbiw	r26, 0x00	; 0
    1856:	29 f0       	breq	.+10     	; 0x1862 <malloc+0x44>
    1858:	13 96       	adiw	r26, 0x03	; 3
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
    185e:	12 97       	sbiw	r26, 0x02	; 2
    1860:	2c c0       	rjmp	.+88     	; 0x18ba <malloc+0x9c>
    1862:	90 93 30 05 	sts	0x0530, r25
    1866:	80 93 2f 05 	sts	0x052F, r24
    186a:	27 c0       	rjmp	.+78     	; 0x18ba <malloc+0x9c>
    186c:	21 15       	cp	r18, r1
    186e:	31 05       	cpc	r19, r1
    1870:	19 f0       	breq	.+6      	; 0x1878 <malloc+0x5a>
    1872:	82 17       	cp	r24, r18
    1874:	93 07       	cpc	r25, r19
    1876:	18 f4       	brcc	.+6      	; 0x187e <malloc+0x60>
    1878:	9c 01       	movw	r18, r24
    187a:	bd 01       	movw	r22, r26
    187c:	ef 01       	movw	r28, r30
    187e:	92 81       	ldd	r25, Z+2	; 0x02
    1880:	83 81       	ldd	r24, Z+3	; 0x03
    1882:	df 01       	movw	r26, r30
    1884:	e9 2f       	mov	r30, r25
    1886:	f8 2f       	mov	r31, r24
    1888:	30 97       	sbiw	r30, 0x00	; 0
    188a:	d1 f6       	brne	.-76     	; 0x1840 <malloc+0x22>
    188c:	21 15       	cp	r18, r1
    188e:	31 05       	cpc	r19, r1
    1890:	f9 f0       	breq	.+62     	; 0x18d0 <malloc+0xb2>
    1892:	c9 01       	movw	r24, r18
    1894:	84 1b       	sub	r24, r20
    1896:	95 0b       	sbc	r25, r21
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	91 05       	cpc	r25, r1
    189c:	80 f4       	brcc	.+32     	; 0x18be <malloc+0xa0>
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	9b 81       	ldd	r25, Y+3	; 0x03
    18a2:	61 15       	cp	r22, r1
    18a4:	71 05       	cpc	r23, r1
    18a6:	21 f0       	breq	.+8      	; 0x18b0 <malloc+0x92>
    18a8:	fb 01       	movw	r30, r22
    18aa:	93 83       	std	Z+3, r25	; 0x03
    18ac:	82 83       	std	Z+2, r24	; 0x02
    18ae:	04 c0       	rjmp	.+8      	; 0x18b8 <malloc+0x9a>
    18b0:	90 93 30 05 	sts	0x0530, r25
    18b4:	80 93 2f 05 	sts	0x052F, r24
    18b8:	fe 01       	movw	r30, r28
    18ba:	32 96       	adiw	r30, 0x02	; 2
    18bc:	42 c0       	rjmp	.+132    	; 0x1942 <malloc+0x124>
    18be:	fe 01       	movw	r30, r28
    18c0:	e8 0f       	add	r30, r24
    18c2:	f9 1f       	adc	r31, r25
    18c4:	41 93       	st	Z+, r20
    18c6:	51 93       	st	Z+, r21
    18c8:	02 97       	sbiw	r24, 0x02	; 2
    18ca:	99 83       	std	Y+1, r25	; 0x01
    18cc:	88 83       	st	Y, r24
    18ce:	39 c0       	rjmp	.+114    	; 0x1942 <malloc+0x124>
    18d0:	80 91 2d 05 	lds	r24, 0x052D
    18d4:	90 91 2e 05 	lds	r25, 0x052E
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	41 f4       	brne	.+16     	; 0x18ec <malloc+0xce>
    18dc:	80 91 f1 03 	lds	r24, 0x03F1
    18e0:	90 91 f2 03 	lds	r25, 0x03F2
    18e4:	90 93 2e 05 	sts	0x052E, r25
    18e8:	80 93 2d 05 	sts	0x052D, r24
    18ec:	20 91 ef 03 	lds	r18, 0x03EF
    18f0:	30 91 f0 03 	lds	r19, 0x03F0
    18f4:	21 15       	cp	r18, r1
    18f6:	31 05       	cpc	r19, r1
    18f8:	41 f4       	brne	.+16     	; 0x190a <malloc+0xec>
    18fa:	2d b7       	in	r18, 0x3d	; 61
    18fc:	3e b7       	in	r19, 0x3e	; 62
    18fe:	80 91 f3 03 	lds	r24, 0x03F3
    1902:	90 91 f4 03 	lds	r25, 0x03F4
    1906:	28 1b       	sub	r18, r24
    1908:	39 0b       	sbc	r19, r25
    190a:	e0 91 2d 05 	lds	r30, 0x052D
    190e:	f0 91 2e 05 	lds	r31, 0x052E
    1912:	e2 17       	cp	r30, r18
    1914:	f3 07       	cpc	r31, r19
    1916:	98 f4       	brcc	.+38     	; 0x193e <malloc+0x120>
    1918:	2e 1b       	sub	r18, r30
    191a:	3f 0b       	sbc	r19, r31
    191c:	24 17       	cp	r18, r20
    191e:	35 07       	cpc	r19, r21
    1920:	70 f0       	brcs	.+28     	; 0x193e <malloc+0x120>
    1922:	ca 01       	movw	r24, r20
    1924:	02 96       	adiw	r24, 0x02	; 2
    1926:	28 17       	cp	r18, r24
    1928:	39 07       	cpc	r19, r25
    192a:	48 f0       	brcs	.+18     	; 0x193e <malloc+0x120>
    192c:	8e 0f       	add	r24, r30
    192e:	9f 1f       	adc	r25, r31
    1930:	90 93 2e 05 	sts	0x052E, r25
    1934:	80 93 2d 05 	sts	0x052D, r24
    1938:	41 93       	st	Z+, r20
    193a:	51 93       	st	Z+, r21
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <malloc+0x124>
    193e:	e0 e0       	ldi	r30, 0x00	; 0
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	cf 01       	movw	r24, r30
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <free>:
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	9c 01       	movw	r18, r24
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	09 f4       	brne	.+2      	; 0x195a <free+0x10>
    1958:	8c c0       	rjmp	.+280    	; 0x1a72 <free+0x128>
    195a:	dc 01       	movw	r26, r24
    195c:	12 97       	sbiw	r26, 0x02	; 2
    195e:	13 96       	adiw	r26, 0x03	; 3
    1960:	1c 92       	st	X, r1
    1962:	1e 92       	st	-X, r1
    1964:	12 97       	sbiw	r26, 0x02	; 2
    1966:	60 91 2f 05 	lds	r22, 0x052F
    196a:	70 91 30 05 	lds	r23, 0x0530
    196e:	61 15       	cp	r22, r1
    1970:	71 05       	cpc	r23, r1
    1972:	89 f4       	brne	.+34     	; 0x1996 <free+0x4c>
    1974:	8d 91       	ld	r24, X+
    1976:	9c 91       	ld	r25, X
    1978:	11 97       	sbiw	r26, 0x01	; 1
    197a:	82 0f       	add	r24, r18
    197c:	93 1f       	adc	r25, r19
    197e:	20 91 2d 05 	lds	r18, 0x052D
    1982:	30 91 2e 05 	lds	r19, 0x052E
    1986:	28 17       	cp	r18, r24
    1988:	39 07       	cpc	r19, r25
    198a:	69 f5       	brne	.+90     	; 0x19e6 <free+0x9c>
    198c:	b0 93 2e 05 	sts	0x052E, r27
    1990:	a0 93 2d 05 	sts	0x052D, r26
    1994:	6e c0       	rjmp	.+220    	; 0x1a72 <free+0x128>
    1996:	fb 01       	movw	r30, r22
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <free+0x56>
    199e:	fc 01       	movw	r30, r24
    19a0:	ea 17       	cp	r30, r26
    19a2:	fb 07       	cpc	r31, r27
    19a4:	30 f4       	brcc	.+12     	; 0x19b2 <free+0x68>
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	af 01       	movw	r20, r30
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	b9 f7       	brne	.-18     	; 0x199e <free+0x54>
    19b0:	1f c0       	rjmp	.+62     	; 0x19f0 <free+0xa6>
    19b2:	e9 01       	movw	r28, r18
    19b4:	22 97       	sbiw	r28, 0x02	; 2
    19b6:	fb 83       	std	Y+3, r31	; 0x03
    19b8:	ea 83       	std	Y+2, r30	; 0x02
    19ba:	08 81       	ld	r16, Y
    19bc:	19 81       	ldd	r17, Y+1	; 0x01
    19be:	c9 01       	movw	r24, r18
    19c0:	80 0f       	add	r24, r16
    19c2:	91 1f       	adc	r25, r17
    19c4:	8e 17       	cp	r24, r30
    19c6:	9f 07       	cpc	r25, r31
    19c8:	59 f4       	brne	.+22     	; 0x19e0 <free+0x96>
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	80 0f       	add	r24, r16
    19d0:	91 1f       	adc	r25, r17
    19d2:	02 96       	adiw	r24, 0x02	; 2
    19d4:	99 83       	std	Y+1, r25	; 0x01
    19d6:	88 83       	st	Y, r24
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	93 81       	ldd	r25, Z+3	; 0x03
    19dc:	9b 83       	std	Y+3, r25	; 0x03
    19de:	8a 83       	std	Y+2, r24	; 0x02
    19e0:	41 15       	cp	r20, r1
    19e2:	51 05       	cpc	r21, r1
    19e4:	29 f4       	brne	.+10     	; 0x19f0 <free+0xa6>
    19e6:	b0 93 30 05 	sts	0x0530, r27
    19ea:	a0 93 2f 05 	sts	0x052F, r26
    19ee:	41 c0       	rjmp	.+130    	; 0x1a72 <free+0x128>
    19f0:	fa 01       	movw	r30, r20
    19f2:	b3 83       	std	Z+3, r27	; 0x03
    19f4:	a2 83       	std	Z+2, r26	; 0x02
    19f6:	c1 91       	ld	r28, Z+
    19f8:	d1 91       	ld	r29, Z+
    19fa:	ec 0f       	add	r30, r28
    19fc:	fd 1f       	adc	r31, r29
    19fe:	ae 17       	cp	r26, r30
    1a00:	bf 07       	cpc	r27, r31
    1a02:	81 f4       	brne	.+32     	; 0x1a24 <free+0xda>
    1a04:	f9 01       	movw	r30, r18
    1a06:	92 91       	ld	r25, -Z
    1a08:	82 91       	ld	r24, -Z
    1a0a:	8c 0f       	add	r24, r28
    1a0c:	9d 1f       	adc	r25, r29
    1a0e:	02 96       	adiw	r24, 0x02	; 2
    1a10:	da 01       	movw	r26, r20
    1a12:	11 96       	adiw	r26, 0x01	; 1
    1a14:	9c 93       	st	X, r25
    1a16:	8e 93       	st	-X, r24
    1a18:	82 81       	ldd	r24, Z+2	; 0x02
    1a1a:	93 81       	ldd	r25, Z+3	; 0x03
    1a1c:	13 96       	adiw	r26, 0x03	; 3
    1a1e:	9c 93       	st	X, r25
    1a20:	8e 93       	st	-X, r24
    1a22:	12 97       	sbiw	r26, 0x02	; 2
    1a24:	e0 e0       	ldi	r30, 0x00	; 0
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <free+0xe4>
    1a2a:	fb 01       	movw	r30, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	db 01       	movw	r26, r22
    1a30:	12 96       	adiw	r26, 0x02	; 2
    1a32:	8d 91       	ld	r24, X+
    1a34:	9c 91       	ld	r25, X
    1a36:	13 97       	sbiw	r26, 0x03	; 3
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	b9 f7       	brne	.-18     	; 0x1a2a <free+0xe0>
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	02 96       	adiw	r24, 0x02	; 2
    1a40:	2d 91       	ld	r18, X+
    1a42:	3c 91       	ld	r19, X
    1a44:	11 97       	sbiw	r26, 0x01	; 1
    1a46:	82 0f       	add	r24, r18
    1a48:	93 1f       	adc	r25, r19
    1a4a:	20 91 2d 05 	lds	r18, 0x052D
    1a4e:	30 91 2e 05 	lds	r19, 0x052E
    1a52:	28 17       	cp	r18, r24
    1a54:	39 07       	cpc	r19, r25
    1a56:	69 f4       	brne	.+26     	; 0x1a72 <free+0x128>
    1a58:	30 97       	sbiw	r30, 0x00	; 0
    1a5a:	29 f4       	brne	.+10     	; 0x1a66 <free+0x11c>
    1a5c:	10 92 30 05 	sts	0x0530, r1
    1a60:	10 92 2f 05 	sts	0x052F, r1
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <free+0x120>
    1a66:	13 82       	std	Z+3, r1	; 0x03
    1a68:	12 82       	std	Z+2, r1	; 0x02
    1a6a:	70 93 2e 05 	sts	0x052E, r23
    1a6e:	60 93 2d 05 	sts	0x052D, r22
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	08 95       	ret

00001a7c <atoi>:
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	88 27       	eor	r24, r24
    1a80:	99 27       	eor	r25, r25
    1a82:	e8 94       	clt
    1a84:	21 91       	ld	r18, Z+
    1a86:	20 32       	cpi	r18, 0x20	; 32
    1a88:	e9 f3       	breq	.-6      	; 0x1a84 <atoi+0x8>
    1a8a:	29 30       	cpi	r18, 0x09	; 9
    1a8c:	10 f0       	brcs	.+4      	; 0x1a92 <atoi+0x16>
    1a8e:	2e 30       	cpi	r18, 0x0E	; 14
    1a90:	c8 f3       	brcs	.-14     	; 0x1a84 <atoi+0x8>
    1a92:	2b 32       	cpi	r18, 0x2B	; 43
    1a94:	41 f0       	breq	.+16     	; 0x1aa6 <atoi+0x2a>
    1a96:	2d 32       	cpi	r18, 0x2D	; 45
    1a98:	39 f4       	brne	.+14     	; 0x1aa8 <atoi+0x2c>
    1a9a:	68 94       	set
    1a9c:	04 c0       	rjmp	.+8      	; 0x1aa6 <atoi+0x2a>
    1a9e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulhi_const_10>
    1aa2:	82 0f       	add	r24, r18
    1aa4:	91 1d       	adc	r25, r1
    1aa6:	21 91       	ld	r18, Z+
    1aa8:	20 53       	subi	r18, 0x30	; 48
    1aaa:	2a 30       	cpi	r18, 0x0A	; 10
    1aac:	c0 f3       	brcs	.-16     	; 0x1a9e <atoi+0x22>
    1aae:	1e f4       	brtc	.+6      	; 0x1ab6 <atoi+0x3a>
    1ab0:	90 95       	com	r25
    1ab2:	81 95       	neg	r24
    1ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab6:	08 95       	ret

00001ab8 <strtok>:
    1ab8:	4e ef       	ldi	r20, 0xFE	; 254
    1aba:	53 e0       	ldi	r21, 0x03	; 3
    1abc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <strtok_r>
    1ac0:	08 95       	ret

00001ac2 <strcmp>:
    1ac2:	fb 01       	movw	r30, r22
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	8d 91       	ld	r24, X+
    1ac8:	01 90       	ld	r0, Z+
    1aca:	80 19       	sub	r24, r0
    1acc:	01 10       	cpse	r0, r1
    1ace:	d9 f3       	breq	.-10     	; 0x1ac6 <strcmp+0x4>
    1ad0:	99 0b       	sbc	r25, r25
    1ad2:	08 95       	ret

00001ad4 <strcpy>:
    1ad4:	fb 01       	movw	r30, r22
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	01 90       	ld	r0, Z+
    1ada:	0d 92       	st	X+, r0
    1adc:	00 20       	and	r0, r0
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <strcpy+0x4>
    1ae0:	08 95       	ret

00001ae2 <strtok_r>:
    1ae2:	fa 01       	movw	r30, r20
    1ae4:	a1 91       	ld	r26, Z+
    1ae6:	b0 81       	ld	r27, Z
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	19 f4       	brne	.+6      	; 0x1af2 <strtok_r+0x10>
    1aec:	10 97       	sbiw	r26, 0x00	; 0
    1aee:	e1 f0       	breq	.+56     	; 0x1b28 <strtok_r+0x46>
    1af0:	cd 01       	movw	r24, r26
    1af2:	dc 01       	movw	r26, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0d 90       	ld	r0, X+
    1af8:	00 20       	and	r0, r0
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <strtok_r+0x1e>
    1afc:	c0 01       	movw	r24, r0
    1afe:	13 c0       	rjmp	.+38     	; 0x1b26 <strtok_r+0x44>
    1b00:	fb 01       	movw	r30, r22
    1b02:	21 91       	ld	r18, Z+
    1b04:	22 23       	and	r18, r18
    1b06:	19 f0       	breq	.+6      	; 0x1b0e <strtok_r+0x2c>
    1b08:	20 15       	cp	r18, r0
    1b0a:	d9 f7       	brne	.-10     	; 0x1b02 <strtok_r+0x20>
    1b0c:	f3 cf       	rjmp	.-26     	; 0x1af4 <strtok_r+0x12>
    1b0e:	fb 01       	movw	r30, r22
    1b10:	21 91       	ld	r18, Z+
    1b12:	20 15       	cp	r18, r0
    1b14:	19 f4       	brne	.+6      	; 0x1b1c <strtok_r+0x3a>
    1b16:	1e 92       	st	-X, r1
    1b18:	11 96       	adiw	r26, 0x01	; 1
    1b1a:	06 c0       	rjmp	.+12     	; 0x1b28 <strtok_r+0x46>
    1b1c:	22 23       	and	r18, r18
    1b1e:	c1 f7       	brne	.-16     	; 0x1b10 <strtok_r+0x2e>
    1b20:	0d 90       	ld	r0, X+
    1b22:	00 20       	and	r0, r0
    1b24:	a1 f7       	brne	.-24     	; 0x1b0e <strtok_r+0x2c>
    1b26:	d0 01       	movw	r26, r0
    1b28:	fa 01       	movw	r30, r20
    1b2a:	a1 93       	st	Z+, r26
    1b2c:	b0 83       	st	Z, r27
    1b2e:	08 95       	ret

00001b30 <__mulhi_const_10>:
    1b30:	7a e0       	ldi	r23, 0x0A	; 10
    1b32:	97 9f       	mul	r25, r23
    1b34:	90 2d       	mov	r25, r0
    1b36:	87 9f       	mul	r24, r23
    1b38:	80 2d       	mov	r24, r0
    1b3a:	91 0d       	add	r25, r1
    1b3c:	11 24       	eor	r1, r1
    1b3e:	08 95       	ret

00001b40 <fgets>:
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	1f 93       	push	r17
    1b4c:	cf 93       	push	r28
    1b4e:	df 93       	push	r29
    1b50:	8c 01       	movw	r16, r24
    1b52:	6a 01       	movw	r12, r20
    1b54:	fa 01       	movw	r30, r20
    1b56:	83 81       	ldd	r24, Z+3	; 0x03
    1b58:	80 ff       	sbrs	r24, 0
    1b5a:	1a c0       	rjmp	.+52     	; 0x1b90 <fgets+0x50>
    1b5c:	16 16       	cp	r1, r22
    1b5e:	17 06       	cpc	r1, r23
    1b60:	bc f4       	brge	.+46     	; 0x1b90 <fgets+0x50>
    1b62:	7b 01       	movw	r14, r22
    1b64:	e8 01       	movw	r28, r16
    1b66:	0e c0       	rjmp	.+28     	; 0x1b84 <fgets+0x44>
    1b68:	c6 01       	movw	r24, r12
    1b6a:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    1b6e:	ff ef       	ldi	r31, 0xFF	; 255
    1b70:	8f 3f       	cpi	r24, 0xFF	; 255
    1b72:	9f 07       	cpc	r25, r31
    1b74:	69 f0       	breq	.+26     	; 0x1b90 <fgets+0x50>
    1b76:	89 93       	st	Y+, r24
    1b78:	08 94       	sec
    1b7a:	e1 08       	sbc	r14, r1
    1b7c:	f1 08       	sbc	r15, r1
    1b7e:	8a 30       	cpi	r24, 0x0A	; 10
    1b80:	91 05       	cpc	r25, r1
    1b82:	21 f0       	breq	.+8      	; 0x1b8c <fgets+0x4c>
    1b84:	21 e0       	ldi	r18, 0x01	; 1
    1b86:	e2 16       	cp	r14, r18
    1b88:	f1 04       	cpc	r15, r1
    1b8a:	71 f7       	brne	.-36     	; 0x1b68 <fgets+0x28>
    1b8c:	18 82       	st	Y, r1
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <fgets+0x54>
    1b90:	00 e0       	ldi	r16, 0x00	; 0
    1b92:	10 e0       	ldi	r17, 0x00	; 0
    1b94:	c8 01       	movw	r24, r16
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	df 90       	pop	r13
    1ba4:	cf 90       	pop	r12
    1ba6:	08 95       	ret

00001ba8 <gets>:
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	8c 01       	movw	r16, r24
    1bb2:	e0 91 31 05 	lds	r30, 0x0531
    1bb6:	f0 91 32 05 	lds	r31, 0x0532
    1bba:	83 81       	ldd	r24, Z+3	; 0x03
    1bbc:	80 ff       	sbrs	r24, 0
    1bbe:	12 c0       	rjmp	.+36     	; 0x1be4 <gets+0x3c>
    1bc0:	e8 01       	movw	r28, r16
    1bc2:	80 91 31 05 	lds	r24, 0x0531
    1bc6:	90 91 32 05 	lds	r25, 0x0532
    1bca:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    1bce:	2f ef       	ldi	r18, 0xFF	; 255
    1bd0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bd2:	92 07       	cpc	r25, r18
    1bd4:	39 f0       	breq	.+14     	; 0x1be4 <gets+0x3c>
    1bd6:	89 93       	st	Y+, r24
    1bd8:	8a 30       	cpi	r24, 0x0A	; 10
    1bda:	91 05       	cpc	r25, r1
    1bdc:	91 f7       	brne	.-28     	; 0x1bc2 <gets+0x1a>
    1bde:	21 97       	sbiw	r28, 0x01	; 1
    1be0:	18 82       	st	Y, r1
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <gets+0x40>
    1be4:	00 e0       	ldi	r16, 0x00	; 0
    1be6:	10 e0       	ldi	r17, 0x00	; 0
    1be8:	c8 01       	movw	r24, r16
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	08 95       	ret

00001bf4 <printf>:
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	36 96       	adiw	r30, 0x06	; 6
    1c00:	61 91       	ld	r22, Z+
    1c02:	71 91       	ld	r23, Z+
    1c04:	80 91 33 05 	lds	r24, 0x0533
    1c08:	90 91 34 05 	lds	r25, 0x0534
    1c0c:	af 01       	movw	r20, r30
    1c0e:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vfprintf>
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	08 95       	ret

00001c18 <putchar>:
    1c18:	60 91 33 05 	lds	r22, 0x0533
    1c1c:	70 91 34 05 	lds	r23, 0x0534
    1c20:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    1c24:	08 95       	ret

00001c26 <puts>:
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	8c 01       	movw	r16, r24
    1c30:	e0 91 33 05 	lds	r30, 0x0533
    1c34:	f0 91 34 05 	lds	r31, 0x0534
    1c38:	83 81       	ldd	r24, Z+3	; 0x03
    1c3a:	81 ff       	sbrs	r24, 1
    1c3c:	1a c0       	rjmp	.+52     	; 0x1c72 <puts+0x4c>
    1c3e:	c0 e0       	ldi	r28, 0x00	; 0
    1c40:	d0 e0       	ldi	r29, 0x00	; 0
    1c42:	05 c0       	rjmp	.+10     	; 0x1c4e <puts+0x28>
    1c44:	19 95       	eicall
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	11 f0       	breq	.+4      	; 0x1c4e <puts+0x28>
    1c4a:	cf ef       	ldi	r28, 0xFF	; 255
    1c4c:	df ef       	ldi	r29, 0xFF	; 255
    1c4e:	f8 01       	movw	r30, r16
    1c50:	81 91       	ld	r24, Z+
    1c52:	8f 01       	movw	r16, r30
    1c54:	60 91 33 05 	lds	r22, 0x0533
    1c58:	70 91 34 05 	lds	r23, 0x0534
    1c5c:	db 01       	movw	r26, r22
    1c5e:	18 96       	adiw	r26, 0x08	; 8
    1c60:	ed 91       	ld	r30, X+
    1c62:	fc 91       	ld	r31, X
    1c64:	19 97       	sbiw	r26, 0x09	; 9
    1c66:	88 23       	and	r24, r24
    1c68:	69 f7       	brne	.-38     	; 0x1c44 <puts+0x1e>
    1c6a:	8a e0       	ldi	r24, 0x0A	; 10
    1c6c:	19 95       	eicall
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	11 f0       	breq	.+4      	; 0x1c76 <puts+0x50>
    1c72:	cf ef       	ldi	r28, 0xFF	; 255
    1c74:	df ef       	ldi	r29, 0xFF	; 255
    1c76:	ce 01       	movw	r24, r28
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	08 95       	ret

00001c82 <sprintf>:
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	2e 97       	sbiw	r28, 0x0e	; 14
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	0e 89       	ldd	r16, Y+22	; 0x16
    1c9c:	1f 89       	ldd	r17, Y+23	; 0x17
    1c9e:	86 e0       	ldi	r24, 0x06	; 6
    1ca0:	8c 83       	std	Y+4, r24	; 0x04
    1ca2:	1a 83       	std	Y+2, r17	; 0x02
    1ca4:	09 83       	std	Y+1, r16	; 0x01
    1ca6:	8f ef       	ldi	r24, 0xFF	; 255
    1ca8:	9f e7       	ldi	r25, 0x7F	; 127
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	ae 01       	movw	r20, r28
    1cb0:	46 5e       	subi	r20, 0xE6	; 230
    1cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	68 8d       	ldd	r22, Y+24	; 0x18
    1cba:	79 8d       	ldd	r23, Y+25	; 0x19
    1cbc:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <vfprintf>
    1cc0:	ef 81       	ldd	r30, Y+7	; 0x07
    1cc2:	f8 85       	ldd	r31, Y+8	; 0x08
    1cc4:	e0 0f       	add	r30, r16
    1cc6:	f1 1f       	adc	r31, r17
    1cc8:	10 82       	st	Z, r1
    1cca:	2e 96       	adiw	r28, 0x0e	; 14
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	08 95       	ret

00001ce0 <sscanf>:
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	2e 97       	sbiw	r28, 0x0e	; 14
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	85 e0       	ldi	r24, 0x05	; 5
    1cf6:	8c 83       	std	Y+4, r24	; 0x04
    1cf8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cfa:	9d 89       	ldd	r25, Y+21	; 0x15
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	ae 01       	movw	r20, r28
    1d02:	48 5e       	subi	r20, 0xE8	; 232
    1d04:	5f 4f       	sbci	r21, 0xFF	; 255
    1d06:	ce 01       	movw	r24, r28
    1d08:	01 96       	adiw	r24, 0x01	; 1
    1d0a:	6e 89       	ldd	r22, Y+22	; 0x16
    1d0c:	7f 89       	ldd	r23, Y+23	; 0x17
    1d0e:	0e 94 3d 12 	call	0x247a	; 0x247a <vfscanf>
    1d12:	2e 96       	adiw	r28, 0x0e	; 14
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	08 95       	ret

00001d24 <vfprintf>:
    1d24:	2f 92       	push	r2
    1d26:	3f 92       	push	r3
    1d28:	4f 92       	push	r4
    1d2a:	5f 92       	push	r5
    1d2c:	6f 92       	push	r6
    1d2e:	7f 92       	push	r7
    1d30:	8f 92       	push	r8
    1d32:	9f 92       	push	r9
    1d34:	af 92       	push	r10
    1d36:	bf 92       	push	r11
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	2d 97       	sbiw	r28, 0x0d	; 13
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	3c 01       	movw	r6, r24
    1d5a:	7d 87       	std	Y+13, r23	; 0x0d
    1d5c:	6c 87       	std	Y+12, r22	; 0x0c
    1d5e:	5a 01       	movw	r10, r20
    1d60:	fc 01       	movw	r30, r24
    1d62:	17 82       	std	Z+7, r1	; 0x07
    1d64:	16 82       	std	Z+6, r1	; 0x06
    1d66:	83 81       	ldd	r24, Z+3	; 0x03
    1d68:	81 ff       	sbrs	r24, 1
    1d6a:	c8 c1       	rjmp	.+912    	; 0x20fc <vfprintf+0x3d8>
    1d6c:	2e 01       	movw	r4, r28
    1d6e:	08 94       	sec
    1d70:	41 1c       	adc	r4, r1
    1d72:	51 1c       	adc	r5, r1
    1d74:	f3 01       	movw	r30, r6
    1d76:	93 81       	ldd	r25, Z+3	; 0x03
    1d78:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d7a:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d7c:	93 fd       	sbrc	r25, 3
    1d7e:	85 91       	lpm	r24, Z+
    1d80:	93 ff       	sbrs	r25, 3
    1d82:	81 91       	ld	r24, Z+
    1d84:	fd 87       	std	Y+13, r31	; 0x0d
    1d86:	ec 87       	std	Y+12, r30	; 0x0c
    1d88:	88 23       	and	r24, r24
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <vfprintf+0x6a>
    1d8c:	b3 c1       	rjmp	.+870    	; 0x20f4 <vfprintf+0x3d0>
    1d8e:	85 32       	cpi	r24, 0x25	; 37
    1d90:	41 f4       	brne	.+16     	; 0x1da2 <vfprintf+0x7e>
    1d92:	93 fd       	sbrc	r25, 3
    1d94:	85 91       	lpm	r24, Z+
    1d96:	93 ff       	sbrs	r25, 3
    1d98:	81 91       	ld	r24, Z+
    1d9a:	fd 87       	std	Y+13, r31	; 0x0d
    1d9c:	ec 87       	std	Y+12, r30	; 0x0c
    1d9e:	85 32       	cpi	r24, 0x25	; 37
    1da0:	29 f4       	brne	.+10     	; 0x1dac <vfprintf+0x88>
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	b3 01       	movw	r22, r6
    1da6:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    1daa:	e4 cf       	rjmp	.-56     	; 0x1d74 <vfprintf+0x50>
    1dac:	ff 24       	eor	r15, r15
    1dae:	ee 24       	eor	r14, r14
    1db0:	10 e0       	ldi	r17, 0x00	; 0
    1db2:	10 32       	cpi	r17, 0x20	; 32
    1db4:	b0 f4       	brcc	.+44     	; 0x1de2 <vfprintf+0xbe>
    1db6:	8b 32       	cpi	r24, 0x2B	; 43
    1db8:	69 f0       	breq	.+26     	; 0x1dd4 <vfprintf+0xb0>
    1dba:	8c 32       	cpi	r24, 0x2C	; 44
    1dbc:	28 f4       	brcc	.+10     	; 0x1dc8 <vfprintf+0xa4>
    1dbe:	80 32       	cpi	r24, 0x20	; 32
    1dc0:	51 f0       	breq	.+20     	; 0x1dd6 <vfprintf+0xb2>
    1dc2:	83 32       	cpi	r24, 0x23	; 35
    1dc4:	71 f4       	brne	.+28     	; 0x1de2 <vfprintf+0xbe>
    1dc6:	0b c0       	rjmp	.+22     	; 0x1dde <vfprintf+0xba>
    1dc8:	8d 32       	cpi	r24, 0x2D	; 45
    1dca:	39 f0       	breq	.+14     	; 0x1dda <vfprintf+0xb6>
    1dcc:	80 33       	cpi	r24, 0x30	; 48
    1dce:	49 f4       	brne	.+18     	; 0x1de2 <vfprintf+0xbe>
    1dd0:	11 60       	ori	r17, 0x01	; 1
    1dd2:	2c c0       	rjmp	.+88     	; 0x1e2c <vfprintf+0x108>
    1dd4:	12 60       	ori	r17, 0x02	; 2
    1dd6:	14 60       	ori	r17, 0x04	; 4
    1dd8:	29 c0       	rjmp	.+82     	; 0x1e2c <vfprintf+0x108>
    1dda:	18 60       	ori	r17, 0x08	; 8
    1ddc:	27 c0       	rjmp	.+78     	; 0x1e2c <vfprintf+0x108>
    1dde:	10 61       	ori	r17, 0x10	; 16
    1de0:	25 c0       	rjmp	.+74     	; 0x1e2c <vfprintf+0x108>
    1de2:	17 fd       	sbrc	r17, 7
    1de4:	2e c0       	rjmp	.+92     	; 0x1e42 <vfprintf+0x11e>
    1de6:	28 2f       	mov	r18, r24
    1de8:	20 53       	subi	r18, 0x30	; 48
    1dea:	2a 30       	cpi	r18, 0x0A	; 10
    1dec:	98 f4       	brcc	.+38     	; 0x1e14 <vfprintf+0xf0>
    1dee:	16 ff       	sbrs	r17, 6
    1df0:	08 c0       	rjmp	.+16     	; 0x1e02 <vfprintf+0xde>
    1df2:	8f 2d       	mov	r24, r15
    1df4:	88 0f       	add	r24, r24
    1df6:	f8 2e       	mov	r15, r24
    1df8:	ff 0c       	add	r15, r15
    1dfa:	ff 0c       	add	r15, r15
    1dfc:	f8 0e       	add	r15, r24
    1dfe:	f2 0e       	add	r15, r18
    1e00:	15 c0       	rjmp	.+42     	; 0x1e2c <vfprintf+0x108>
    1e02:	8e 2d       	mov	r24, r14
    1e04:	88 0f       	add	r24, r24
    1e06:	e8 2e       	mov	r14, r24
    1e08:	ee 0c       	add	r14, r14
    1e0a:	ee 0c       	add	r14, r14
    1e0c:	e8 0e       	add	r14, r24
    1e0e:	e2 0e       	add	r14, r18
    1e10:	10 62       	ori	r17, 0x20	; 32
    1e12:	0c c0       	rjmp	.+24     	; 0x1e2c <vfprintf+0x108>
    1e14:	8e 32       	cpi	r24, 0x2E	; 46
    1e16:	21 f4       	brne	.+8      	; 0x1e20 <vfprintf+0xfc>
    1e18:	16 fd       	sbrc	r17, 6
    1e1a:	6c c1       	rjmp	.+728    	; 0x20f4 <vfprintf+0x3d0>
    1e1c:	10 64       	ori	r17, 0x40	; 64
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <vfprintf+0x108>
    1e20:	8c 36       	cpi	r24, 0x6C	; 108
    1e22:	11 f4       	brne	.+4      	; 0x1e28 <vfprintf+0x104>
    1e24:	10 68       	ori	r17, 0x80	; 128
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <vfprintf+0x108>
    1e28:	88 36       	cpi	r24, 0x68	; 104
    1e2a:	59 f4       	brne	.+22     	; 0x1e42 <vfprintf+0x11e>
    1e2c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1e2e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1e30:	93 fd       	sbrc	r25, 3
    1e32:	85 91       	lpm	r24, Z+
    1e34:	93 ff       	sbrs	r25, 3
    1e36:	81 91       	ld	r24, Z+
    1e38:	fd 87       	std	Y+13, r31	; 0x0d
    1e3a:	ec 87       	std	Y+12, r30	; 0x0c
    1e3c:	88 23       	and	r24, r24
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <vfprintf+0x11e>
    1e40:	b8 cf       	rjmp	.-144    	; 0x1db2 <vfprintf+0x8e>
    1e42:	98 2f       	mov	r25, r24
    1e44:	95 54       	subi	r25, 0x45	; 69
    1e46:	93 30       	cpi	r25, 0x03	; 3
    1e48:	18 f0       	brcs	.+6      	; 0x1e50 <vfprintf+0x12c>
    1e4a:	90 52       	subi	r25, 0x20	; 32
    1e4c:	93 30       	cpi	r25, 0x03	; 3
    1e4e:	38 f4       	brcc	.+14     	; 0x1e5e <vfprintf+0x13a>
    1e50:	24 e0       	ldi	r18, 0x04	; 4
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	a2 0e       	add	r10, r18
    1e56:	b3 1e       	adc	r11, r19
    1e58:	3f e3       	ldi	r19, 0x3F	; 63
    1e5a:	39 83       	std	Y+1, r19	; 0x01
    1e5c:	0f c0       	rjmp	.+30     	; 0x1e7c <vfprintf+0x158>
    1e5e:	83 36       	cpi	r24, 0x63	; 99
    1e60:	31 f0       	breq	.+12     	; 0x1e6e <vfprintf+0x14a>
    1e62:	83 37       	cpi	r24, 0x73	; 115
    1e64:	81 f0       	breq	.+32     	; 0x1e86 <vfprintf+0x162>
    1e66:	83 35       	cpi	r24, 0x53	; 83
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <vfprintf+0x148>
    1e6a:	5a c0       	rjmp	.+180    	; 0x1f20 <vfprintf+0x1fc>
    1e6c:	22 c0       	rjmp	.+68     	; 0x1eb2 <vfprintf+0x18e>
    1e6e:	f5 01       	movw	r30, r10
    1e70:	80 81       	ld	r24, Z
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	22 e0       	ldi	r18, 0x02	; 2
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	a2 0e       	add	r10, r18
    1e7a:	b3 1e       	adc	r11, r19
    1e7c:	21 e0       	ldi	r18, 0x01	; 1
    1e7e:	c2 2e       	mov	r12, r18
    1e80:	d1 2c       	mov	r13, r1
    1e82:	42 01       	movw	r8, r4
    1e84:	14 c0       	rjmp	.+40     	; 0x1eae <vfprintf+0x18a>
    1e86:	92 e0       	ldi	r25, 0x02	; 2
    1e88:	29 2e       	mov	r2, r25
    1e8a:	31 2c       	mov	r3, r1
    1e8c:	2a 0c       	add	r2, r10
    1e8e:	3b 1c       	adc	r3, r11
    1e90:	f5 01       	movw	r30, r10
    1e92:	80 80       	ld	r8, Z
    1e94:	91 80       	ldd	r9, Z+1	; 0x01
    1e96:	16 ff       	sbrs	r17, 6
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <vfprintf+0x17c>
    1e9a:	6f 2d       	mov	r22, r15
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <vfprintf+0x180>
    1ea0:	6f ef       	ldi	r22, 0xFF	; 255
    1ea2:	7f ef       	ldi	r23, 0xFF	; 255
    1ea4:	c4 01       	movw	r24, r8
    1ea6:	0e 94 88 13 	call	0x2710	; 0x2710 <strnlen>
    1eaa:	6c 01       	movw	r12, r24
    1eac:	51 01       	movw	r10, r2
    1eae:	1f 77       	andi	r17, 0x7F	; 127
    1eb0:	15 c0       	rjmp	.+42     	; 0x1edc <vfprintf+0x1b8>
    1eb2:	82 e0       	ldi	r24, 0x02	; 2
    1eb4:	28 2e       	mov	r2, r24
    1eb6:	31 2c       	mov	r3, r1
    1eb8:	2a 0c       	add	r2, r10
    1eba:	3b 1c       	adc	r3, r11
    1ebc:	f5 01       	movw	r30, r10
    1ebe:	80 80       	ld	r8, Z
    1ec0:	91 80       	ldd	r9, Z+1	; 0x01
    1ec2:	16 ff       	sbrs	r17, 6
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <vfprintf+0x1a8>
    1ec6:	6f 2d       	mov	r22, r15
    1ec8:	70 e0       	ldi	r23, 0x00	; 0
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <vfprintf+0x1ac>
    1ecc:	6f ef       	ldi	r22, 0xFF	; 255
    1ece:	7f ef       	ldi	r23, 0xFF	; 255
    1ed0:	c4 01       	movw	r24, r8
    1ed2:	0e 94 7d 13 	call	0x26fa	; 0x26fa <strnlen_P>
    1ed6:	6c 01       	movw	r12, r24
    1ed8:	10 68       	ori	r17, 0x80	; 128
    1eda:	51 01       	movw	r10, r2
    1edc:	13 fd       	sbrc	r17, 3
    1ede:	1c c0       	rjmp	.+56     	; 0x1f18 <vfprintf+0x1f4>
    1ee0:	06 c0       	rjmp	.+12     	; 0x1eee <vfprintf+0x1ca>
    1ee2:	80 e2       	ldi	r24, 0x20	; 32
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	b3 01       	movw	r22, r6
    1ee8:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    1eec:	ea 94       	dec	r14
    1eee:	8e 2d       	mov	r24, r14
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	c8 16       	cp	r12, r24
    1ef4:	d9 06       	cpc	r13, r25
    1ef6:	a8 f3       	brcs	.-22     	; 0x1ee2 <vfprintf+0x1be>
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <vfprintf+0x1f4>
    1efa:	f4 01       	movw	r30, r8
    1efc:	17 fd       	sbrc	r17, 7
    1efe:	85 91       	lpm	r24, Z+
    1f00:	17 ff       	sbrs	r17, 7
    1f02:	81 91       	ld	r24, Z+
    1f04:	4f 01       	movw	r8, r30
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	b3 01       	movw	r22, r6
    1f0a:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    1f0e:	e1 10       	cpse	r14, r1
    1f10:	ea 94       	dec	r14
    1f12:	08 94       	sec
    1f14:	c1 08       	sbc	r12, r1
    1f16:	d1 08       	sbc	r13, r1
    1f18:	c1 14       	cp	r12, r1
    1f1a:	d1 04       	cpc	r13, r1
    1f1c:	71 f7       	brne	.-36     	; 0x1efa <vfprintf+0x1d6>
    1f1e:	e7 c0       	rjmp	.+462    	; 0x20ee <vfprintf+0x3ca>
    1f20:	84 36       	cpi	r24, 0x64	; 100
    1f22:	11 f0       	breq	.+4      	; 0x1f28 <vfprintf+0x204>
    1f24:	89 36       	cpi	r24, 0x69	; 105
    1f26:	51 f5       	brne	.+84     	; 0x1f7c <vfprintf+0x258>
    1f28:	f5 01       	movw	r30, r10
    1f2a:	17 ff       	sbrs	r17, 7
    1f2c:	07 c0       	rjmp	.+14     	; 0x1f3c <vfprintf+0x218>
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	a2 81       	ldd	r26, Z+2	; 0x02
    1f34:	b3 81       	ldd	r27, Z+3	; 0x03
    1f36:	24 e0       	ldi	r18, 0x04	; 4
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	08 c0       	rjmp	.+16     	; 0x1f4c <vfprintf+0x228>
    1f3c:	80 81       	ld	r24, Z
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
    1f40:	aa 27       	eor	r26, r26
    1f42:	97 fd       	sbrc	r25, 7
    1f44:	a0 95       	com	r26
    1f46:	ba 2f       	mov	r27, r26
    1f48:	22 e0       	ldi	r18, 0x02	; 2
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	a2 0e       	add	r10, r18
    1f4e:	b3 1e       	adc	r11, r19
    1f50:	01 2f       	mov	r16, r17
    1f52:	0f 76       	andi	r16, 0x6F	; 111
    1f54:	b7 ff       	sbrs	r27, 7
    1f56:	08 c0       	rjmp	.+16     	; 0x1f68 <vfprintf+0x244>
    1f58:	b0 95       	com	r27
    1f5a:	a0 95       	com	r26
    1f5c:	90 95       	com	r25
    1f5e:	81 95       	neg	r24
    1f60:	9f 4f       	sbci	r25, 0xFF	; 255
    1f62:	af 4f       	sbci	r26, 0xFF	; 255
    1f64:	bf 4f       	sbci	r27, 0xFF	; 255
    1f66:	00 68       	ori	r16, 0x80	; 128
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	a2 01       	movw	r20, r4
    1f6e:	2a e0       	ldi	r18, 0x0A	; 10
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	0e 94 1c 14 	call	0x2838	; 0x2838 <__ultoa_invert>
    1f76:	d8 2e       	mov	r13, r24
    1f78:	d4 18       	sub	r13, r4
    1f7a:	3f c0       	rjmp	.+126    	; 0x1ffa <vfprintf+0x2d6>
    1f7c:	85 37       	cpi	r24, 0x75	; 117
    1f7e:	21 f4       	brne	.+8      	; 0x1f88 <vfprintf+0x264>
    1f80:	1f 7e       	andi	r17, 0xEF	; 239
    1f82:	2a e0       	ldi	r18, 0x0A	; 10
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	20 c0       	rjmp	.+64     	; 0x1fc8 <vfprintf+0x2a4>
    1f88:	19 7f       	andi	r17, 0xF9	; 249
    1f8a:	8f 36       	cpi	r24, 0x6F	; 111
    1f8c:	a9 f0       	breq	.+42     	; 0x1fb8 <vfprintf+0x294>
    1f8e:	80 37       	cpi	r24, 0x70	; 112
    1f90:	20 f4       	brcc	.+8      	; 0x1f9a <vfprintf+0x276>
    1f92:	88 35       	cpi	r24, 0x58	; 88
    1f94:	09 f0       	breq	.+2      	; 0x1f98 <vfprintf+0x274>
    1f96:	ae c0       	rjmp	.+348    	; 0x20f4 <vfprintf+0x3d0>
    1f98:	0b c0       	rjmp	.+22     	; 0x1fb0 <vfprintf+0x28c>
    1f9a:	80 37       	cpi	r24, 0x70	; 112
    1f9c:	21 f0       	breq	.+8      	; 0x1fa6 <vfprintf+0x282>
    1f9e:	88 37       	cpi	r24, 0x78	; 120
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <vfprintf+0x280>
    1fa2:	a8 c0       	rjmp	.+336    	; 0x20f4 <vfprintf+0x3d0>
    1fa4:	01 c0       	rjmp	.+2      	; 0x1fa8 <vfprintf+0x284>
    1fa6:	10 61       	ori	r17, 0x10	; 16
    1fa8:	14 ff       	sbrs	r17, 4
    1faa:	09 c0       	rjmp	.+18     	; 0x1fbe <vfprintf+0x29a>
    1fac:	14 60       	ori	r17, 0x04	; 4
    1fae:	07 c0       	rjmp	.+14     	; 0x1fbe <vfprintf+0x29a>
    1fb0:	14 ff       	sbrs	r17, 4
    1fb2:	08 c0       	rjmp	.+16     	; 0x1fc4 <vfprintf+0x2a0>
    1fb4:	16 60       	ori	r17, 0x06	; 6
    1fb6:	06 c0       	rjmp	.+12     	; 0x1fc4 <vfprintf+0x2a0>
    1fb8:	28 e0       	ldi	r18, 0x08	; 8
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	05 c0       	rjmp	.+10     	; 0x1fc8 <vfprintf+0x2a4>
    1fbe:	20 e1       	ldi	r18, 0x10	; 16
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <vfprintf+0x2a4>
    1fc4:	20 e1       	ldi	r18, 0x10	; 16
    1fc6:	32 e0       	ldi	r19, 0x02	; 2
    1fc8:	f5 01       	movw	r30, r10
    1fca:	17 ff       	sbrs	r17, 7
    1fcc:	07 c0       	rjmp	.+14     	; 0x1fdc <vfprintf+0x2b8>
    1fce:	60 81       	ld	r22, Z
    1fd0:	71 81       	ldd	r23, Z+1	; 0x01
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	44 e0       	ldi	r20, 0x04	; 4
    1fd8:	50 e0       	ldi	r21, 0x00	; 0
    1fda:	06 c0       	rjmp	.+12     	; 0x1fe8 <vfprintf+0x2c4>
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	42 e0       	ldi	r20, 0x02	; 2
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	a4 0e       	add	r10, r20
    1fea:	b5 1e       	adc	r11, r21
    1fec:	a2 01       	movw	r20, r4
    1fee:	0e 94 1c 14 	call	0x2838	; 0x2838 <__ultoa_invert>
    1ff2:	d8 2e       	mov	r13, r24
    1ff4:	d4 18       	sub	r13, r4
    1ff6:	01 2f       	mov	r16, r17
    1ff8:	0f 77       	andi	r16, 0x7F	; 127
    1ffa:	06 ff       	sbrs	r16, 6
    1ffc:	09 c0       	rjmp	.+18     	; 0x2010 <vfprintf+0x2ec>
    1ffe:	0e 7f       	andi	r16, 0xFE	; 254
    2000:	df 14       	cp	r13, r15
    2002:	30 f4       	brcc	.+12     	; 0x2010 <vfprintf+0x2ec>
    2004:	04 ff       	sbrs	r16, 4
    2006:	06 c0       	rjmp	.+12     	; 0x2014 <vfprintf+0x2f0>
    2008:	02 fd       	sbrc	r16, 2
    200a:	04 c0       	rjmp	.+8      	; 0x2014 <vfprintf+0x2f0>
    200c:	0f 7e       	andi	r16, 0xEF	; 239
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <vfprintf+0x2f0>
    2010:	1d 2d       	mov	r17, r13
    2012:	01 c0       	rjmp	.+2      	; 0x2016 <vfprintf+0x2f2>
    2014:	1f 2d       	mov	r17, r15
    2016:	80 2f       	mov	r24, r16
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	04 ff       	sbrs	r16, 4
    201c:	0c c0       	rjmp	.+24     	; 0x2036 <vfprintf+0x312>
    201e:	fe 01       	movw	r30, r28
    2020:	ed 0d       	add	r30, r13
    2022:	f1 1d       	adc	r31, r1
    2024:	20 81       	ld	r18, Z
    2026:	20 33       	cpi	r18, 0x30	; 48
    2028:	11 f4       	brne	.+4      	; 0x202e <vfprintf+0x30a>
    202a:	09 7e       	andi	r16, 0xE9	; 233
    202c:	09 c0       	rjmp	.+18     	; 0x2040 <vfprintf+0x31c>
    202e:	02 ff       	sbrs	r16, 2
    2030:	06 c0       	rjmp	.+12     	; 0x203e <vfprintf+0x31a>
    2032:	1e 5f       	subi	r17, 0xFE	; 254
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <vfprintf+0x31c>
    2036:	86 78       	andi	r24, 0x86	; 134
    2038:	90 70       	andi	r25, 0x00	; 0
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	09 f0       	breq	.+2      	; 0x2040 <vfprintf+0x31c>
    203e:	1f 5f       	subi	r17, 0xFF	; 255
    2040:	80 2e       	mov	r8, r16
    2042:	99 24       	eor	r9, r9
    2044:	03 fd       	sbrc	r16, 3
    2046:	12 c0       	rjmp	.+36     	; 0x206c <vfprintf+0x348>
    2048:	00 ff       	sbrs	r16, 0
    204a:	0d c0       	rjmp	.+26     	; 0x2066 <vfprintf+0x342>
    204c:	fd 2c       	mov	r15, r13
    204e:	1e 15       	cp	r17, r14
    2050:	50 f4       	brcc	.+20     	; 0x2066 <vfprintf+0x342>
    2052:	fe 0c       	add	r15, r14
    2054:	f1 1a       	sub	r15, r17
    2056:	1e 2d       	mov	r17, r14
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <vfprintf+0x342>
    205a:	80 e2       	ldi	r24, 0x20	; 32
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	b3 01       	movw	r22, r6
    2060:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2064:	1f 5f       	subi	r17, 0xFF	; 255
    2066:	1e 15       	cp	r17, r14
    2068:	c0 f3       	brcs	.-16     	; 0x205a <vfprintf+0x336>
    206a:	04 c0       	rjmp	.+8      	; 0x2074 <vfprintf+0x350>
    206c:	1e 15       	cp	r17, r14
    206e:	10 f4       	brcc	.+4      	; 0x2074 <vfprintf+0x350>
    2070:	e1 1a       	sub	r14, r17
    2072:	01 c0       	rjmp	.+2      	; 0x2076 <vfprintf+0x352>
    2074:	ee 24       	eor	r14, r14
    2076:	84 fe       	sbrs	r8, 4
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <vfprintf+0x374>
    207a:	80 e3       	ldi	r24, 0x30	; 48
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	b3 01       	movw	r22, r6
    2080:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    2084:	82 fe       	sbrs	r8, 2
    2086:	1f c0       	rjmp	.+62     	; 0x20c6 <vfprintf+0x3a2>
    2088:	81 fe       	sbrs	r8, 1
    208a:	03 c0       	rjmp	.+6      	; 0x2092 <vfprintf+0x36e>
    208c:	88 e5       	ldi	r24, 0x58	; 88
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	10 c0       	rjmp	.+32     	; 0x20b2 <vfprintf+0x38e>
    2092:	88 e7       	ldi	r24, 0x78	; 120
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	0d c0       	rjmp	.+26     	; 0x20b2 <vfprintf+0x38e>
    2098:	c4 01       	movw	r24, r8
    209a:	86 78       	andi	r24, 0x86	; 134
    209c:	90 70       	andi	r25, 0x00	; 0
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	91 f0       	breq	.+36     	; 0x20c6 <vfprintf+0x3a2>
    20a2:	81 fc       	sbrc	r8, 1
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <vfprintf+0x386>
    20a6:	80 e2       	ldi	r24, 0x20	; 32
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <vfprintf+0x388>
    20aa:	8b e2       	ldi	r24, 0x2B	; 43
    20ac:	07 fd       	sbrc	r16, 7
    20ae:	8d e2       	ldi	r24, 0x2D	; 45
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	b3 01       	movw	r22, r6
    20b4:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    20b8:	06 c0       	rjmp	.+12     	; 0x20c6 <vfprintf+0x3a2>
    20ba:	80 e3       	ldi	r24, 0x30	; 48
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	b3 01       	movw	r22, r6
    20c0:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    20c4:	fa 94       	dec	r15
    20c6:	df 14       	cp	r13, r15
    20c8:	c0 f3       	brcs	.-16     	; 0x20ba <vfprintf+0x396>
    20ca:	da 94       	dec	r13
    20cc:	f2 01       	movw	r30, r4
    20ce:	ed 0d       	add	r30, r13
    20d0:	f1 1d       	adc	r31, r1
    20d2:	80 81       	ld	r24, Z
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	b3 01       	movw	r22, r6
    20d8:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    20dc:	dd 20       	and	r13, r13
    20de:	a9 f7       	brne	.-22     	; 0x20ca <vfprintf+0x3a6>
    20e0:	06 c0       	rjmp	.+12     	; 0x20ee <vfprintf+0x3ca>
    20e2:	80 e2       	ldi	r24, 0x20	; 32
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	b3 01       	movw	r22, r6
    20e8:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <fputc>
    20ec:	ea 94       	dec	r14
    20ee:	ee 20       	and	r14, r14
    20f0:	c1 f7       	brne	.-16     	; 0x20e2 <vfprintf+0x3be>
    20f2:	40 ce       	rjmp	.-896    	; 0x1d74 <vfprintf+0x50>
    20f4:	f3 01       	movw	r30, r6
    20f6:	86 81       	ldd	r24, Z+6	; 0x06
    20f8:	97 81       	ldd	r25, Z+7	; 0x07
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <vfprintf+0x3dc>
    20fc:	8f ef       	ldi	r24, 0xFF	; 255
    20fe:	9f ef       	ldi	r25, 0xFF	; 255
    2100:	2d 96       	adiw	r28, 0x0d	; 13
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	de bf       	out	0x3e, r29	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	cd bf       	out	0x3d, r28	; 61
    210c:	df 91       	pop	r29
    210e:	cf 91       	pop	r28
    2110:	1f 91       	pop	r17
    2112:	0f 91       	pop	r16
    2114:	ff 90       	pop	r15
    2116:	ef 90       	pop	r14
    2118:	df 90       	pop	r13
    211a:	cf 90       	pop	r12
    211c:	bf 90       	pop	r11
    211e:	af 90       	pop	r10
    2120:	9f 90       	pop	r9
    2122:	8f 90       	pop	r8
    2124:	7f 90       	pop	r7
    2126:	6f 90       	pop	r6
    2128:	5f 90       	pop	r5
    212a:	4f 90       	pop	r4
    212c:	3f 90       	pop	r3
    212e:	2f 90       	pop	r2
    2130:	08 95       	ret

00002132 <putval>:
    2132:	20 fd       	sbrc	r18, 0
    2134:	09 c0       	rjmp	.+18     	; 0x2148 <putval+0x16>
    2136:	fc 01       	movw	r30, r24
    2138:	23 fd       	sbrc	r18, 3
    213a:	05 c0       	rjmp	.+10     	; 0x2146 <putval+0x14>
    213c:	22 ff       	sbrs	r18, 2
    213e:	02 c0       	rjmp	.+4      	; 0x2144 <putval+0x12>
    2140:	73 83       	std	Z+3, r23	; 0x03
    2142:	62 83       	std	Z+2, r22	; 0x02
    2144:	51 83       	std	Z+1, r21	; 0x01
    2146:	40 83       	st	Z, r20
    2148:	08 95       	ret

0000214a <mulacc>:
    214a:	cf 92       	push	r12
    214c:	df 92       	push	r13
    214e:	ef 92       	push	r14
    2150:	ff 92       	push	r15
    2152:	6b 01       	movw	r12, r22
    2154:	7c 01       	movw	r14, r24
    2156:	44 fd       	sbrc	r20, 4
    2158:	10 c0       	rjmp	.+32     	; 0x217a <mulacc+0x30>
    215a:	46 fd       	sbrc	r20, 6
    215c:	10 c0       	rjmp	.+32     	; 0x217e <mulacc+0x34>
    215e:	d6 01       	movw	r26, r12
    2160:	f7 01       	movw	r30, r14
    2162:	aa 0f       	add	r26, r26
    2164:	bb 1f       	adc	r27, r27
    2166:	ee 1f       	adc	r30, r30
    2168:	ff 1f       	adc	r31, r31
    216a:	10 94       	com	r1
    216c:	d1 f7       	brne	.-12     	; 0x2162 <mulacc+0x18>
    216e:	ca 0e       	add	r12, r26
    2170:	db 1e       	adc	r13, r27
    2172:	ee 1e       	adc	r14, r30
    2174:	ff 1e       	adc	r15, r31
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <mulacc+0x36>
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <mulacc+0x36>
    217e:	84 e0       	ldi	r24, 0x04	; 4
    2180:	cc 0c       	add	r12, r12
    2182:	dd 1c       	adc	r13, r13
    2184:	ee 1c       	adc	r14, r14
    2186:	ff 1c       	adc	r15, r15
    2188:	81 50       	subi	r24, 0x01	; 1
    218a:	d1 f7       	brne	.-12     	; 0x2180 <mulacc+0x36>
    218c:	c2 0e       	add	r12, r18
    218e:	d1 1c       	adc	r13, r1
    2190:	e1 1c       	adc	r14, r1
    2192:	f1 1c       	adc	r15, r1
    2194:	b6 01       	movw	r22, r12
    2196:	c7 01       	movw	r24, r14
    2198:	ff 90       	pop	r15
    219a:	ef 90       	pop	r14
    219c:	df 90       	pop	r13
    219e:	cf 90       	pop	r12
    21a0:	08 95       	ret

000021a2 <skip_spaces>:
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	8c 01       	movw	r16, r24
    21ac:	c8 01       	movw	r24, r16
    21ae:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    21b2:	ec 01       	movw	r28, r24
    21b4:	97 fd       	sbrc	r25, 7
    21b6:	08 c0       	rjmp	.+16     	; 0x21c8 <skip_spaces+0x26>
    21b8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <isspace>
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	b1 f7       	brne	.-20     	; 0x21ac <skip_spaces+0xa>
    21c0:	ce 01       	movw	r24, r28
    21c2:	b8 01       	movw	r22, r16
    21c4:	0e 94 ff 13 	call	0x27fe	; 0x27fe <ungetc>
    21c8:	ce 01       	movw	r24, r28
    21ca:	df 91       	pop	r29
    21cc:	cf 91       	pop	r28
    21ce:	1f 91       	pop	r17
    21d0:	0f 91       	pop	r16
    21d2:	08 95       	ret

000021d4 <conv_int>:
    21d4:	af 92       	push	r10
    21d6:	bf 92       	push	r11
    21d8:	cf 92       	push	r12
    21da:	df 92       	push	r13
    21dc:	ef 92       	push	r14
    21de:	ff 92       	push	r15
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	8c 01       	movw	r16, r24
    21ea:	d6 2f       	mov	r29, r22
    21ec:	5a 01       	movw	r10, r20
    21ee:	c2 2f       	mov	r28, r18
    21f0:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    21f4:	8b 32       	cpi	r24, 0x2B	; 43
    21f6:	19 f0       	breq	.+6      	; 0x21fe <conv_int+0x2a>
    21f8:	8d 32       	cpi	r24, 0x2D	; 45
    21fa:	49 f4       	brne	.+18     	; 0x220e <__stack+0xf>
    21fc:	c0 68       	ori	r28, 0x80	; 128
    21fe:	d1 50       	subi	r29, 0x01	; 1
    2200:	09 f4       	brne	.+2      	; 0x2204 <__stack+0x5>
    2202:	61 c0       	rjmp	.+194    	; 0x22c6 <__stack+0xc7>
    2204:	c8 01       	movw	r24, r16
    2206:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    220a:	97 fd       	sbrc	r25, 7
    220c:	5c c0       	rjmp	.+184    	; 0x22c6 <__stack+0xc7>
    220e:	cd 7f       	andi	r28, 0xFD	; 253
    2210:	2c 2f       	mov	r18, r28
    2212:	20 73       	andi	r18, 0x30	; 48
    2214:	d1 f4       	brne	.+52     	; 0x224a <__stack+0x4b>
    2216:	80 33       	cpi	r24, 0x30	; 48
    2218:	c1 f4       	brne	.+48     	; 0x224a <__stack+0x4b>
    221a:	d1 50       	subi	r29, 0x01	; 1
    221c:	09 f4       	brne	.+2      	; 0x2220 <__stack+0x21>
    221e:	3e c0       	rjmp	.+124    	; 0x229c <__stack+0x9d>
    2220:	c8 01       	movw	r24, r16
    2222:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    2226:	97 fd       	sbrc	r25, 7
    2228:	39 c0       	rjmp	.+114    	; 0x229c <__stack+0x9d>
    222a:	c2 60       	ori	r28, 0x02	; 2
    222c:	88 37       	cpi	r24, 0x78	; 120
    222e:	11 f0       	breq	.+4      	; 0x2234 <__stack+0x35>
    2230:	88 35       	cpi	r24, 0x58	; 88
    2232:	49 f4       	brne	.+18     	; 0x2246 <__stack+0x47>
    2234:	c0 64       	ori	r28, 0x40	; 64
    2236:	d1 50       	subi	r29, 0x01	; 1
    2238:	89 f1       	breq	.+98     	; 0x229c <__stack+0x9d>
    223a:	c8 01       	movw	r24, r16
    223c:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    2240:	97 ff       	sbrs	r25, 7
    2242:	03 c0       	rjmp	.+6      	; 0x224a <__stack+0x4b>
    2244:	2b c0       	rjmp	.+86     	; 0x229c <__stack+0x9d>
    2246:	c6 ff       	sbrs	r28, 6
    2248:	c0 61       	ori	r28, 0x10	; 16
    224a:	cc 24       	eor	r12, r12
    224c:	dd 24       	eor	r13, r13
    224e:	76 01       	movw	r14, r12
    2250:	28 2f       	mov	r18, r24
    2252:	20 53       	subi	r18, 0x30	; 48
    2254:	28 30       	cpi	r18, 0x08	; 8
    2256:	80 f0       	brcs	.+32     	; 0x2278 <__stack+0x79>
    2258:	c4 fd       	sbrc	r28, 4
    225a:	09 c0       	rjmp	.+18     	; 0x226e <__stack+0x6f>
    225c:	2a 30       	cpi	r18, 0x0A	; 10
    225e:	60 f0       	brcs	.+24     	; 0x2278 <__stack+0x79>
    2260:	c6 ff       	sbrs	r28, 6
    2262:	05 c0       	rjmp	.+10     	; 0x226e <__stack+0x6f>
    2264:	2f 7d       	andi	r18, 0xDF	; 223
    2266:	32 2f       	mov	r19, r18
    2268:	31 51       	subi	r19, 0x11	; 17
    226a:	36 30       	cpi	r19, 0x06	; 6
    226c:	20 f0       	brcs	.+8      	; 0x2276 <__stack+0x77>
    226e:	b8 01       	movw	r22, r16
    2270:	0e 94 ff 13 	call	0x27fe	; 0x27fe <ungetc>
    2274:	10 c0       	rjmp	.+32     	; 0x2296 <__stack+0x97>
    2276:	27 50       	subi	r18, 0x07	; 7
    2278:	c7 01       	movw	r24, r14
    227a:	b6 01       	movw	r22, r12
    227c:	4c 2f       	mov	r20, r28
    227e:	0e 94 a5 10 	call	0x214a	; 0x214a <mulacc>
    2282:	6b 01       	movw	r12, r22
    2284:	7c 01       	movw	r14, r24
    2286:	c2 60       	ori	r28, 0x02	; 2
    2288:	d1 50       	subi	r29, 0x01	; 1
    228a:	59 f0       	breq	.+22     	; 0x22a2 <__stack+0xa3>
    228c:	c8 01       	movw	r24, r16
    228e:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    2292:	97 ff       	sbrs	r25, 7
    2294:	dd cf       	rjmp	.-70     	; 0x2250 <__stack+0x51>
    2296:	c1 fd       	sbrc	r28, 1
    2298:	04 c0       	rjmp	.+8      	; 0x22a2 <__stack+0xa3>
    229a:	15 c0       	rjmp	.+42     	; 0x22c6 <__stack+0xc7>
    229c:	cc 24       	eor	r12, r12
    229e:	dd 24       	eor	r13, r13
    22a0:	76 01       	movw	r14, r12
    22a2:	c7 ff       	sbrs	r28, 7
    22a4:	08 c0       	rjmp	.+16     	; 0x22b6 <__stack+0xb7>
    22a6:	f0 94       	com	r15
    22a8:	e0 94       	com	r14
    22aa:	d0 94       	com	r13
    22ac:	c0 94       	com	r12
    22ae:	c1 1c       	adc	r12, r1
    22b0:	d1 1c       	adc	r13, r1
    22b2:	e1 1c       	adc	r14, r1
    22b4:	f1 1c       	adc	r15, r1
    22b6:	c5 01       	movw	r24, r10
    22b8:	b7 01       	movw	r22, r14
    22ba:	a6 01       	movw	r20, r12
    22bc:	2c 2f       	mov	r18, r28
    22be:	0e 94 99 10 	call	0x2132	; 0x2132 <putval>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <__stack+0xc9>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	df 90       	pop	r13
    22d6:	cf 90       	pop	r12
    22d8:	bf 90       	pop	r11
    22da:	af 90       	pop	r10
    22dc:	08 95       	ret

000022de <conv_brk>:
    22de:	4f 92       	push	r4
    22e0:	5f 92       	push	r5
    22e2:	6f 92       	push	r6
    22e4:	7f 92       	push	r7
    22e6:	8f 92       	push	r8
    22e8:	9f 92       	push	r9
    22ea:	af 92       	push	r10
    22ec:	bf 92       	push	r11
    22ee:	cf 92       	push	r12
    22f0:	df 92       	push	r13
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	a0 97       	sbiw	r28, 0x20	; 32
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	5c 01       	movw	r10, r24
    2310:	06 2f       	mov	r16, r22
    2312:	7a 01       	movw	r14, r20
    2314:	69 01       	movw	r12, r18
    2316:	fe 01       	movw	r30, r28
    2318:	31 96       	adiw	r30, 0x01	; 1
    231a:	80 e2       	ldi	r24, 0x20	; 32
    231c:	df 01       	movw	r26, r30
    231e:	1d 92       	st	X+, r1
    2320:	8a 95       	dec	r24
    2322:	e9 f7       	brne	.-6      	; 0x231e <conv_brk+0x40>
    2324:	d5 01       	movw	r26, r10
    2326:	13 96       	adiw	r26, 0x03	; 3
    2328:	1c 91       	ld	r17, X
    232a:	13 97       	sbiw	r26, 0x03	; 3
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	4f 01       	movw	r8, r30
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	68 2e       	mov	r6, r24
    233c:	71 2c       	mov	r7, r1
    233e:	f6 01       	movw	r30, r12
    2340:	13 fd       	sbrc	r17, 3
    2342:	55 91       	lpm	r21, Z+
    2344:	13 ff       	sbrs	r17, 3
    2346:	51 91       	ld	r21, Z+
    2348:	6f 01       	movw	r12, r30
    234a:	55 23       	and	r21, r21
    234c:	09 f4       	brne	.+2      	; 0x2350 <conv_brk+0x72>
    234e:	7b c0       	rjmp	.+246    	; 0x2446 <conv_brk+0x168>
    2350:	5e 35       	cpi	r21, 0x5E	; 94
    2352:	19 f4       	brne	.+6      	; 0x235a <conv_brk+0x7c>
    2354:	61 15       	cp	r22, r1
    2356:	71 05       	cpc	r23, r1
    2358:	49 f1       	breq	.+82     	; 0x23ac <conv_brk+0xce>
    235a:	83 2f       	mov	r24, r19
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	86 17       	cp	r24, r22
    2360:	97 07       	cpc	r25, r23
    2362:	3c f4       	brge	.+14     	; 0x2372 <conv_brk+0x94>
    2364:	5d 35       	cpi	r21, 0x5D	; 93
    2366:	51 f1       	breq	.+84     	; 0x23bc <conv_brk+0xde>
    2368:	5d 32       	cpi	r21, 0x2D	; 45
    236a:	19 f4       	brne	.+6      	; 0x2372 <conv_brk+0x94>
    236c:	44 23       	and	r20, r20
    236e:	01 f1       	breq	.+64     	; 0x23b0 <conv_brk+0xd2>
    2370:	03 c0       	rjmp	.+6      	; 0x2378 <conv_brk+0x9a>
    2372:	44 23       	and	r20, r20
    2374:	09 f4       	brne	.+2      	; 0x2378 <conv_brk+0x9a>
    2376:	25 2f       	mov	r18, r21
    2378:	85 2f       	mov	r24, r21
    237a:	86 95       	lsr	r24
    237c:	86 95       	lsr	r24
    237e:	86 95       	lsr	r24
    2380:	f4 01       	movw	r30, r8
    2382:	e8 0f       	add	r30, r24
    2384:	f1 1d       	adc	r31, r1
    2386:	85 2f       	mov	r24, r21
    2388:	87 70       	andi	r24, 0x07	; 7
    238a:	23 01       	movw	r4, r6
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <conv_brk+0xb4>
    238e:	44 0c       	add	r4, r4
    2390:	55 1c       	adc	r5, r5
    2392:	8a 95       	dec	r24
    2394:	e2 f7       	brpl	.-8      	; 0x238e <conv_brk+0xb0>
    2396:	80 81       	ld	r24, Z
    2398:	84 29       	or	r24, r4
    239a:	80 83       	st	Z, r24
    239c:	52 17       	cp	r21, r18
    239e:	51 f0       	breq	.+20     	; 0x23b4 <conv_brk+0xd6>
    23a0:	52 17       	cp	r21, r18
    23a2:	10 f4       	brcc	.+4      	; 0x23a8 <conv_brk+0xca>
    23a4:	5f 5f       	subi	r21, 0xFF	; 255
    23a6:	e8 cf       	rjmp	.-48     	; 0x2378 <conv_brk+0x9a>
    23a8:	51 50       	subi	r21, 0x01	; 1
    23aa:	e6 cf       	rjmp	.-52     	; 0x2378 <conv_brk+0x9a>
    23ac:	31 e0       	ldi	r19, 0x01	; 1
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <conv_brk+0xd8>
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <conv_brk+0xd8>
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	6f 5f       	subi	r22, 0xFF	; 255
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	c1 cf       	rjmp	.-126    	; 0x233e <conv_brk+0x60>
    23bc:	44 23       	and	r20, r20
    23be:	19 f0       	breq	.+6      	; 0x23c6 <conv_brk+0xe8>
    23c0:	8e 81       	ldd	r24, Y+6	; 0x06
    23c2:	80 62       	ori	r24, 0x20	; 32
    23c4:	8e 83       	std	Y+6, r24	; 0x06
    23c6:	33 23       	and	r19, r19
    23c8:	51 f0       	breq	.+20     	; 0x23de <conv_brk+0x100>
    23ca:	fe 01       	movw	r30, r28
    23cc:	31 96       	adiw	r30, 0x01	; 1
    23ce:	ce 01       	movw	r24, r28
    23d0:	81 96       	adiw	r24, 0x21	; 33
    23d2:	20 81       	ld	r18, Z
    23d4:	20 95       	com	r18
    23d6:	21 93       	st	Z+, r18
    23d8:	e8 17       	cp	r30, r24
    23da:	f9 07       	cpc	r31, r25
    23dc:	d1 f7       	brne	.-12     	; 0x23d2 <conv_brk+0xf4>
    23de:	11 e0       	ldi	r17, 0x01	; 1
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <conv_brk+0x106>
    23e2:	10 e0       	ldi	r17, 0x00	; 0
    23e4:	c5 01       	movw	r24, r10
    23e6:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    23ea:	9c 01       	movw	r18, r24
    23ec:	97 fd       	sbrc	r25, 7
    23ee:	23 c0       	rjmp	.+70     	; 0x2436 <conv_brk+0x158>
    23f0:	86 95       	lsr	r24
    23f2:	86 95       	lsr	r24
    23f4:	86 95       	lsr	r24
    23f6:	e1 e0       	ldi	r30, 0x01	; 1
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	ec 0f       	add	r30, r28
    23fc:	fd 1f       	adc	r31, r29
    23fe:	e8 0f       	add	r30, r24
    2400:	f1 1d       	adc	r31, r1
    2402:	40 81       	ld	r20, Z
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	c9 01       	movw	r24, r18
    2408:	87 70       	andi	r24, 0x07	; 7
    240a:	90 70       	andi	r25, 0x00	; 0
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <conv_brk+0x134>
    240e:	55 95       	asr	r21
    2410:	47 95       	ror	r20
    2412:	8a 95       	dec	r24
    2414:	e2 f7       	brpl	.-8      	; 0x240e <conv_brk+0x130>
    2416:	40 fd       	sbrc	r20, 0
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <conv_brk+0x146>
    241a:	c9 01       	movw	r24, r18
    241c:	b5 01       	movw	r22, r10
    241e:	0e 94 ff 13 	call	0x27fe	; 0x27fe <ungetc>
    2422:	09 c0       	rjmp	.+18     	; 0x2436 <conv_brk+0x158>
    2424:	e1 14       	cp	r14, r1
    2426:	f1 04       	cpc	r15, r1
    2428:	19 f0       	breq	.+6      	; 0x2430 <conv_brk+0x152>
    242a:	d7 01       	movw	r26, r14
    242c:	2d 93       	st	X+, r18
    242e:	7d 01       	movw	r14, r26
    2430:	01 50       	subi	r16, 0x01	; 1
    2432:	b9 f6       	brne	.-82     	; 0x23e2 <conv_brk+0x104>
    2434:	02 c0       	rjmp	.+4      	; 0x243a <conv_brk+0x15c>
    2436:	11 23       	and	r17, r17
    2438:	31 f4       	brne	.+12     	; 0x2446 <conv_brk+0x168>
    243a:	e1 14       	cp	r14, r1
    243c:	f1 04       	cpc	r15, r1
    243e:	29 f0       	breq	.+10     	; 0x244a <conv_brk+0x16c>
    2440:	f7 01       	movw	r30, r14
    2442:	10 82       	st	Z, r1
    2444:	02 c0       	rjmp	.+4      	; 0x244a <conv_brk+0x16c>
    2446:	cc 24       	eor	r12, r12
    2448:	dd 24       	eor	r13, r13
    244a:	c6 01       	movw	r24, r12
    244c:	a0 96       	adiw	r28, 0x20	; 32
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	ff 90       	pop	r15
    2462:	ef 90       	pop	r14
    2464:	df 90       	pop	r13
    2466:	cf 90       	pop	r12
    2468:	bf 90       	pop	r11
    246a:	af 90       	pop	r10
    246c:	9f 90       	pop	r9
    246e:	8f 90       	pop	r8
    2470:	7f 90       	pop	r7
    2472:	6f 90       	pop	r6
    2474:	5f 90       	pop	r5
    2476:	4f 90       	pop	r4
    2478:	08 95       	ret

0000247a <vfscanf>:
    247a:	5f 92       	push	r5
    247c:	6f 92       	push	r6
    247e:	7f 92       	push	r7
    2480:	8f 92       	push	r8
    2482:	9f 92       	push	r9
    2484:	af 92       	push	r10
    2486:	bf 92       	push	r11
    2488:	cf 92       	push	r12
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	cf 93       	push	r28
    2496:	df 93       	push	r29
    2498:	0f 92       	push	r0
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	7c 01       	movw	r14, r24
    24a0:	5b 01       	movw	r10, r22
    24a2:	3a 01       	movw	r6, r20
    24a4:	fc 01       	movw	r30, r24
    24a6:	17 82       	std	Z+7, r1	; 0x07
    24a8:	16 82       	std	Z+6, r1	; 0x06
    24aa:	99 24       	eor	r9, r9
    24ac:	ef c0       	rjmp	.+478    	; 0x268c <vfscanf+0x212>
    24ae:	81 2f       	mov	r24, r17
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <isspace>
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	21 f0       	breq	.+8      	; 0x24c2 <vfscanf+0x48>
    24ba:	c7 01       	movw	r24, r14
    24bc:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <skip_spaces>
    24c0:	e5 c0       	rjmp	.+458    	; 0x268c <vfscanf+0x212>
    24c2:	15 32       	cpi	r17, 0x25	; 37
    24c4:	41 f4       	brne	.+16     	; 0x24d6 <vfscanf+0x5c>
    24c6:	f5 01       	movw	r30, r10
    24c8:	03 fd       	sbrc	r16, 3
    24ca:	35 91       	lpm	r19, Z+
    24cc:	03 ff       	sbrs	r16, 3
    24ce:	31 91       	ld	r19, Z+
    24d0:	5f 01       	movw	r10, r30
    24d2:	35 32       	cpi	r19, 0x25	; 37
    24d4:	61 f4       	brne	.+24     	; 0x24ee <vfscanf+0x74>
    24d6:	c7 01       	movw	r24, r14
    24d8:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    24dc:	97 fd       	sbrc	r25, 7
    24de:	e2 c0       	rjmp	.+452    	; 0x26a4 <vfscanf+0x22a>
    24e0:	18 17       	cp	r17, r24
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <vfscanf+0x6c>
    24e4:	d3 c0       	rjmp	.+422    	; 0x268c <vfscanf+0x212>
    24e6:	b7 01       	movw	r22, r14
    24e8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <ungetc>
    24ec:	dd c0       	rjmp	.+442    	; 0x26a8 <vfscanf+0x22e>
    24ee:	3a 32       	cpi	r19, 0x2A	; 42
    24f0:	41 f4       	brne	.+16     	; 0x2502 <vfscanf+0x88>
    24f2:	03 fd       	sbrc	r16, 3
    24f4:	35 91       	lpm	r19, Z+
    24f6:	03 ff       	sbrs	r16, 3
    24f8:	31 91       	ld	r19, Z+
    24fa:	5f 01       	movw	r10, r30
    24fc:	55 24       	eor	r5, r5
    24fe:	53 94       	inc	r5
    2500:	01 c0       	rjmp	.+2      	; 0x2504 <vfscanf+0x8a>
    2502:	55 24       	eor	r5, r5
    2504:	88 24       	eor	r8, r8
    2506:	10 c0       	rjmp	.+32     	; 0x2528 <vfscanf+0xae>
    2508:	f2 e0       	ldi	r31, 0x02	; 2
    250a:	5f 2a       	or	r5, r31
    250c:	68 2d       	mov	r22, r8
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	0e 94 a5 10 	call	0x214a	; 0x214a <mulacc>
    251a:	86 2e       	mov	r8, r22
    251c:	f5 01       	movw	r30, r10
    251e:	03 fd       	sbrc	r16, 3
    2520:	35 91       	lpm	r19, Z+
    2522:	03 ff       	sbrs	r16, 3
    2524:	31 91       	ld	r19, Z+
    2526:	5f 01       	movw	r10, r30
    2528:	23 2f       	mov	r18, r19
    252a:	20 53       	subi	r18, 0x30	; 48
    252c:	2a 30       	cpi	r18, 0x0A	; 10
    252e:	60 f3       	brcs	.-40     	; 0x2508 <vfscanf+0x8e>
    2530:	51 fe       	sbrs	r5, 1
    2532:	03 c0       	rjmp	.+6      	; 0x253a <vfscanf+0xc0>
    2534:	88 20       	and	r8, r8
    2536:	19 f4       	brne	.+6      	; 0x253e <vfscanf+0xc4>
    2538:	b7 c0       	rjmp	.+366    	; 0x26a8 <vfscanf+0x22e>
    253a:	88 24       	eor	r8, r8
    253c:	8a 94       	dec	r8
    253e:	38 36       	cpi	r19, 0x68	; 104
    2540:	19 f0       	breq	.+6      	; 0x2548 <vfscanf+0xce>
    2542:	3c 36       	cpi	r19, 0x6C	; 108
    2544:	99 f4       	brne	.+38     	; 0x256c <vfscanf+0xf2>
    2546:	0a c0       	rjmp	.+20     	; 0x255c <vfscanf+0xe2>
    2548:	f5 01       	movw	r30, r10
    254a:	03 fd       	sbrc	r16, 3
    254c:	35 91       	lpm	r19, Z+
    254e:	03 ff       	sbrs	r16, 3
    2550:	31 91       	ld	r19, Z+
    2552:	5f 01       	movw	r10, r30
    2554:	38 36       	cpi	r19, 0x68	; 104
    2556:	51 f4       	brne	.+20     	; 0x256c <vfscanf+0xf2>
    2558:	f8 e0       	ldi	r31, 0x08	; 8
    255a:	5f 2a       	or	r5, r31
    255c:	44 e0       	ldi	r20, 0x04	; 4
    255e:	54 2a       	or	r5, r20
    2560:	f5 01       	movw	r30, r10
    2562:	03 fd       	sbrc	r16, 3
    2564:	35 91       	lpm	r19, Z+
    2566:	03 ff       	sbrs	r16, 3
    2568:	31 91       	ld	r19, Z+
    256a:	5f 01       	movw	r10, r30
    256c:	33 23       	and	r19, r19
    256e:	09 f4       	brne	.+2      	; 0x2572 <vfscanf+0xf8>
    2570:	9b c0       	rjmp	.+310    	; 0x26a8 <vfscanf+0x22e>
    2572:	84 ee       	ldi	r24, 0xE4	; 228
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	63 2f       	mov	r22, r19
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	39 83       	std	Y+1, r19	; 0x01
    257c:	0e 94 72 13 	call	0x26e4	; 0x26e4 <strchr_P>
    2580:	39 81       	ldd	r19, Y+1	; 0x01
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	09 f4       	brne	.+2      	; 0x2588 <vfscanf+0x10e>
    2586:	90 c0       	rjmp	.+288    	; 0x26a8 <vfscanf+0x22e>
    2588:	85 2d       	mov	r24, r5
    258a:	50 fc       	sbrc	r5, 0
    258c:	08 c0       	rjmp	.+16     	; 0x259e <vfscanf+0x124>
    258e:	f3 01       	movw	r30, r6
    2590:	00 81       	ld	r16, Z
    2592:	11 81       	ldd	r17, Z+1	; 0x01
    2594:	42 e0       	ldi	r20, 0x02	; 2
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	64 0e       	add	r6, r20
    259a:	75 1e       	adc	r7, r21
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <vfscanf+0x128>
    259e:	00 e0       	ldi	r16, 0x00	; 0
    25a0:	10 e0       	ldi	r17, 0x00	; 0
    25a2:	3e 36       	cpi	r19, 0x6E	; 110
    25a4:	51 f4       	brne	.+20     	; 0x25ba <vfscanf+0x140>
    25a6:	f7 01       	movw	r30, r14
    25a8:	46 81       	ldd	r20, Z+6	; 0x06
    25aa:	57 81       	ldd	r21, Z+7	; 0x07
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	70 e0       	ldi	r23, 0x00	; 0
    25b0:	c8 01       	movw	r24, r16
    25b2:	25 2d       	mov	r18, r5
    25b4:	0e 94 99 10 	call	0x2132	; 0x2132 <putval>
    25b8:	69 c0       	rjmp	.+210    	; 0x268c <vfscanf+0x212>
    25ba:	33 36       	cpi	r19, 0x63	; 99
    25bc:	91 f4       	brne	.+36     	; 0x25e2 <vfscanf+0x168>
    25be:	81 fd       	sbrc	r24, 1
    25c0:	02 c0       	rjmp	.+4      	; 0x25c6 <vfscanf+0x14c>
    25c2:	88 24       	eor	r8, r8
    25c4:	83 94       	inc	r8
    25c6:	c7 01       	movw	r24, r14
    25c8:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    25cc:	97 fd       	sbrc	r25, 7
    25ce:	6a c0       	rjmp	.+212    	; 0x26a4 <vfscanf+0x22a>
    25d0:	01 15       	cp	r16, r1
    25d2:	11 05       	cpc	r17, r1
    25d4:	19 f0       	breq	.+6      	; 0x25dc <vfscanf+0x162>
    25d6:	f8 01       	movw	r30, r16
    25d8:	81 93       	st	Z+, r24
    25da:	8f 01       	movw	r16, r30
    25dc:	8a 94       	dec	r8
    25de:	99 f7       	brne	.-26     	; 0x25c6 <vfscanf+0x14c>
    25e0:	53 c0       	rjmp	.+166    	; 0x2688 <vfscanf+0x20e>
    25e2:	c7 01       	movw	r24, r14
    25e4:	3b 35       	cpi	r19, 0x5B	; 91
    25e6:	51 f4       	brne	.+20     	; 0x25fc <vfscanf+0x182>
    25e8:	68 2d       	mov	r22, r8
    25ea:	a8 01       	movw	r20, r16
    25ec:	95 01       	movw	r18, r10
    25ee:	0e 94 6f 11 	call	0x22de	; 0x22de <conv_brk>
    25f2:	5c 01       	movw	r10, r24
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	09 f0       	breq	.+2      	; 0x25fa <vfscanf+0x180>
    25f8:	47 c0       	rjmp	.+142    	; 0x2688 <vfscanf+0x20e>
    25fa:	41 c0       	rjmp	.+130    	; 0x267e <vfscanf+0x204>
    25fc:	39 83       	std	Y+1, r19	; 0x01
    25fe:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <skip_spaces>
    2602:	39 81       	ldd	r19, Y+1	; 0x01
    2604:	97 fd       	sbrc	r25, 7
    2606:	4e c0       	rjmp	.+156    	; 0x26a4 <vfscanf+0x22a>
    2608:	3f 36       	cpi	r19, 0x6F	; 111
    260a:	61 f1       	breq	.+88     	; 0x2664 <vfscanf+0x1ea>
    260c:	30 37       	cpi	r19, 0x70	; 112
    260e:	28 f4       	brcc	.+10     	; 0x261a <vfscanf+0x1a0>
    2610:	34 36       	cpi	r19, 0x64	; 100
    2612:	29 f1       	breq	.+74     	; 0x265e <vfscanf+0x1e4>
    2614:	39 36       	cpi	r19, 0x69	; 105
    2616:	49 f5       	brne	.+82     	; 0x266a <vfscanf+0x1f0>
    2618:	2a c0       	rjmp	.+84     	; 0x266e <vfscanf+0x1f4>
    261a:	33 37       	cpi	r19, 0x73	; 115
    261c:	19 f0       	breq	.+6      	; 0x2624 <vfscanf+0x1aa>
    261e:	35 37       	cpi	r19, 0x75	; 117
    2620:	21 f5       	brne	.+72     	; 0x266a <vfscanf+0x1f0>
    2622:	1d c0       	rjmp	.+58     	; 0x265e <vfscanf+0x1e4>
    2624:	c7 01       	movw	r24, r14
    2626:	0e 94 93 13 	call	0x2726	; 0x2726 <fgetc>
    262a:	6c 01       	movw	r12, r24
    262c:	97 fd       	sbrc	r25, 7
    262e:	11 c0       	rjmp	.+34     	; 0x2652 <vfscanf+0x1d8>
    2630:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <isspace>
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	29 f0       	breq	.+10     	; 0x2642 <vfscanf+0x1c8>
    2638:	c6 01       	movw	r24, r12
    263a:	b7 01       	movw	r22, r14
    263c:	0e 94 ff 13 	call	0x27fe	; 0x27fe <ungetc>
    2640:	08 c0       	rjmp	.+16     	; 0x2652 <vfscanf+0x1d8>
    2642:	01 15       	cp	r16, r1
    2644:	11 05       	cpc	r17, r1
    2646:	19 f0       	breq	.+6      	; 0x264e <vfscanf+0x1d4>
    2648:	f8 01       	movw	r30, r16
    264a:	c1 92       	st	Z+, r12
    264c:	8f 01       	movw	r16, r30
    264e:	8a 94       	dec	r8
    2650:	49 f7       	brne	.-46     	; 0x2624 <vfscanf+0x1aa>
    2652:	01 15       	cp	r16, r1
    2654:	11 05       	cpc	r17, r1
    2656:	c1 f0       	breq	.+48     	; 0x2688 <vfscanf+0x20e>
    2658:	f8 01       	movw	r30, r16
    265a:	10 82       	st	Z, r1
    265c:	15 c0       	rjmp	.+42     	; 0x2688 <vfscanf+0x20e>
    265e:	f0 e2       	ldi	r31, 0x20	; 32
    2660:	5f 2a       	or	r5, r31
    2662:	05 c0       	rjmp	.+10     	; 0x266e <vfscanf+0x1f4>
    2664:	40 e1       	ldi	r20, 0x10	; 16
    2666:	54 2a       	or	r5, r20
    2668:	02 c0       	rjmp	.+4      	; 0x266e <vfscanf+0x1f4>
    266a:	50 e4       	ldi	r21, 0x40	; 64
    266c:	55 2a       	or	r5, r21
    266e:	c7 01       	movw	r24, r14
    2670:	68 2d       	mov	r22, r8
    2672:	a8 01       	movw	r20, r16
    2674:	25 2d       	mov	r18, r5
    2676:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <conv_int>
    267a:	88 23       	and	r24, r24
    267c:	29 f4       	brne	.+10     	; 0x2688 <vfscanf+0x20e>
    267e:	f7 01       	movw	r30, r14
    2680:	83 81       	ldd	r24, Z+3	; 0x03
    2682:	80 73       	andi	r24, 0x30	; 48
    2684:	79 f4       	brne	.+30     	; 0x26a4 <vfscanf+0x22a>
    2686:	10 c0       	rjmp	.+32     	; 0x26a8 <vfscanf+0x22e>
    2688:	50 fe       	sbrs	r5, 0
    268a:	93 94       	inc	r9
    268c:	f7 01       	movw	r30, r14
    268e:	03 81       	ldd	r16, Z+3	; 0x03
    2690:	f5 01       	movw	r30, r10
    2692:	03 fd       	sbrc	r16, 3
    2694:	15 91       	lpm	r17, Z+
    2696:	03 ff       	sbrs	r16, 3
    2698:	11 91       	ld	r17, Z+
    269a:	5f 01       	movw	r10, r30
    269c:	11 23       	and	r17, r17
    269e:	09 f0       	breq	.+2      	; 0x26a2 <vfscanf+0x228>
    26a0:	06 cf       	rjmp	.-500    	; 0x24ae <vfscanf+0x34>
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <vfscanf+0x22e>
    26a4:	99 20       	and	r9, r9
    26a6:	19 f0       	breq	.+6      	; 0x26ae <vfscanf+0x234>
    26a8:	89 2d       	mov	r24, r9
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	02 c0       	rjmp	.+4      	; 0x26b2 <vfscanf+0x238>
    26ae:	8f ef       	ldi	r24, 0xFF	; 255
    26b0:	9f ef       	ldi	r25, 0xFF	; 255
    26b2:	0f 90       	pop	r0
    26b4:	df 91       	pop	r29
    26b6:	cf 91       	pop	r28
    26b8:	1f 91       	pop	r17
    26ba:	0f 91       	pop	r16
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	cf 90       	pop	r12
    26c4:	bf 90       	pop	r11
    26c6:	af 90       	pop	r10
    26c8:	9f 90       	pop	r9
    26ca:	8f 90       	pop	r8
    26cc:	7f 90       	pop	r7
    26ce:	6f 90       	pop	r6
    26d0:	5f 90       	pop	r5
    26d2:	08 95       	ret

000026d4 <isspace>:
    26d4:	91 11       	cpse	r25, r1
    26d6:	0e c1       	rjmp	.+540    	; 0x28f4 <__ctype_isfalse>
    26d8:	80 32       	cpi	r24, 0x20	; 32
    26da:	19 f0       	breq	.+6      	; 0x26e2 <isspace+0xe>
    26dc:	89 50       	subi	r24, 0x09	; 9
    26de:	85 50       	subi	r24, 0x05	; 5
    26e0:	d0 f7       	brcc	.-12     	; 0x26d6 <isspace+0x2>
    26e2:	08 95       	ret

000026e4 <strchr_P>:
    26e4:	fc 01       	movw	r30, r24
    26e6:	05 90       	lpm	r0, Z+
    26e8:	06 16       	cp	r0, r22
    26ea:	21 f0       	breq	.+8      	; 0x26f4 <strchr_P+0x10>
    26ec:	00 20       	and	r0, r0
    26ee:	d9 f7       	brne	.-10     	; 0x26e6 <strchr_P+0x2>
    26f0:	c0 01       	movw	r24, r0
    26f2:	08 95       	ret
    26f4:	31 97       	sbiw	r30, 0x01	; 1
    26f6:	cf 01       	movw	r24, r30
    26f8:	08 95       	ret

000026fa <strnlen_P>:
    26fa:	fc 01       	movw	r30, r24
    26fc:	05 90       	lpm	r0, Z+
    26fe:	61 50       	subi	r22, 0x01	; 1
    2700:	70 40       	sbci	r23, 0x00	; 0
    2702:	01 10       	cpse	r0, r1
    2704:	d8 f7       	brcc	.-10     	; 0x26fc <strnlen_P+0x2>
    2706:	80 95       	com	r24
    2708:	90 95       	com	r25
    270a:	8e 0f       	add	r24, r30
    270c:	9f 1f       	adc	r25, r31
    270e:	08 95       	ret

00002710 <strnlen>:
    2710:	fc 01       	movw	r30, r24
    2712:	61 50       	subi	r22, 0x01	; 1
    2714:	70 40       	sbci	r23, 0x00	; 0
    2716:	01 90       	ld	r0, Z+
    2718:	01 10       	cpse	r0, r1
    271a:	d8 f7       	brcc	.-10     	; 0x2712 <strnlen+0x2>
    271c:	80 95       	com	r24
    271e:	90 95       	com	r25
    2720:	8e 0f       	add	r24, r30
    2722:	9f 1f       	adc	r25, r31
    2724:	08 95       	ret

00002726 <fgetc>:
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	ec 01       	movw	r28, r24
    272c:	2b 81       	ldd	r18, Y+3	; 0x03
    272e:	20 ff       	sbrs	r18, 0
    2730:	35 c0       	rjmp	.+106    	; 0x279c <fgetc+0x76>
    2732:	26 ff       	sbrs	r18, 6
    2734:	09 c0       	rjmp	.+18     	; 0x2748 <fgetc+0x22>
    2736:	2f 7b       	andi	r18, 0xBF	; 191
    2738:	2b 83       	std	Y+3, r18	; 0x03
    273a:	8e 81       	ldd	r24, Y+6	; 0x06
    273c:	9f 81       	ldd	r25, Y+7	; 0x07
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	9f 83       	std	Y+7, r25	; 0x07
    2742:	8e 83       	std	Y+6, r24	; 0x06
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	28 c0       	rjmp	.+80     	; 0x2798 <fgetc+0x72>
    2748:	22 ff       	sbrs	r18, 2
    274a:	0f c0       	rjmp	.+30     	; 0x276a <fgetc+0x44>
    274c:	e8 81       	ld	r30, Y
    274e:	f9 81       	ldd	r31, Y+1	; 0x01
    2750:	80 81       	ld	r24, Z
    2752:	99 27       	eor	r25, r25
    2754:	87 fd       	sbrc	r24, 7
    2756:	90 95       	com	r25
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	19 f4       	brne	.+6      	; 0x2762 <fgetc+0x3c>
    275c:	20 62       	ori	r18, 0x20	; 32
    275e:	2b 83       	std	Y+3, r18	; 0x03
    2760:	1d c0       	rjmp	.+58     	; 0x279c <fgetc+0x76>
    2762:	31 96       	adiw	r30, 0x01	; 1
    2764:	f9 83       	std	Y+1, r31	; 0x01
    2766:	e8 83       	st	Y, r30
    2768:	11 c0       	rjmp	.+34     	; 0x278c <fgetc+0x66>
    276a:	ea 85       	ldd	r30, Y+10	; 0x0a
    276c:	fb 85       	ldd	r31, Y+11	; 0x0b
    276e:	ce 01       	movw	r24, r28
    2770:	19 95       	eicall
    2772:	97 ff       	sbrs	r25, 7
    2774:	0b c0       	rjmp	.+22     	; 0x278c <fgetc+0x66>
    2776:	2b 81       	ldd	r18, Y+3	; 0x03
    2778:	3f ef       	ldi	r19, 0xFF	; 255
    277a:	8f 3f       	cpi	r24, 0xFF	; 255
    277c:	93 07       	cpc	r25, r19
    277e:	11 f4       	brne	.+4      	; 0x2784 <fgetc+0x5e>
    2780:	80 e1       	ldi	r24, 0x10	; 16
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <fgetc+0x60>
    2784:	80 e2       	ldi	r24, 0x20	; 32
    2786:	82 2b       	or	r24, r18
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	08 c0       	rjmp	.+16     	; 0x279c <fgetc+0x76>
    278c:	2e 81       	ldd	r18, Y+6	; 0x06
    278e:	3f 81       	ldd	r19, Y+7	; 0x07
    2790:	2f 5f       	subi	r18, 0xFF	; 255
    2792:	3f 4f       	sbci	r19, 0xFF	; 255
    2794:	3f 83       	std	Y+7, r19	; 0x07
    2796:	2e 83       	std	Y+6, r18	; 0x06
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	02 c0       	rjmp	.+4      	; 0x27a0 <fgetc+0x7a>
    279c:	8f ef       	ldi	r24, 0xFF	; 255
    279e:	9f ef       	ldi	r25, 0xFF	; 255
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	08 95       	ret

000027a6 <fputc>:
    27a6:	0f 93       	push	r16
    27a8:	1f 93       	push	r17
    27aa:	cf 93       	push	r28
    27ac:	df 93       	push	r29
    27ae:	8c 01       	movw	r16, r24
    27b0:	eb 01       	movw	r28, r22
    27b2:	8b 81       	ldd	r24, Y+3	; 0x03
    27b4:	81 ff       	sbrs	r24, 1
    27b6:	1b c0       	rjmp	.+54     	; 0x27ee <fputc+0x48>
    27b8:	82 ff       	sbrs	r24, 2
    27ba:	0d c0       	rjmp	.+26     	; 0x27d6 <fputc+0x30>
    27bc:	2e 81       	ldd	r18, Y+6	; 0x06
    27be:	3f 81       	ldd	r19, Y+7	; 0x07
    27c0:	8c 81       	ldd	r24, Y+4	; 0x04
    27c2:	9d 81       	ldd	r25, Y+5	; 0x05
    27c4:	28 17       	cp	r18, r24
    27c6:	39 07       	cpc	r19, r25
    27c8:	64 f4       	brge	.+24     	; 0x27e2 <fputc+0x3c>
    27ca:	e8 81       	ld	r30, Y
    27cc:	f9 81       	ldd	r31, Y+1	; 0x01
    27ce:	01 93       	st	Z+, r16
    27d0:	f9 83       	std	Y+1, r31	; 0x01
    27d2:	e8 83       	st	Y, r30
    27d4:	06 c0       	rjmp	.+12     	; 0x27e2 <fputc+0x3c>
    27d6:	e8 85       	ldd	r30, Y+8	; 0x08
    27d8:	f9 85       	ldd	r31, Y+9	; 0x09
    27da:	80 2f       	mov	r24, r16
    27dc:	19 95       	eicall
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	31 f4       	brne	.+12     	; 0x27ee <fputc+0x48>
    27e2:	8e 81       	ldd	r24, Y+6	; 0x06
    27e4:	9f 81       	ldd	r25, Y+7	; 0x07
    27e6:	01 96       	adiw	r24, 0x01	; 1
    27e8:	9f 83       	std	Y+7, r25	; 0x07
    27ea:	8e 83       	std	Y+6, r24	; 0x06
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <fputc+0x4c>
    27ee:	0f ef       	ldi	r16, 0xFF	; 255
    27f0:	1f ef       	ldi	r17, 0xFF	; 255
    27f2:	c8 01       	movw	r24, r16
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	08 95       	ret

000027fe <ungetc>:
    27fe:	fb 01       	movw	r30, r22
    2800:	23 81       	ldd	r18, Z+3	; 0x03
    2802:	20 ff       	sbrs	r18, 0
    2804:	13 c0       	rjmp	.+38     	; 0x282c <ungetc+0x2e>
    2806:	26 fd       	sbrc	r18, 6
    2808:	11 c0       	rjmp	.+34     	; 0x282c <ungetc+0x2e>
    280a:	3f ef       	ldi	r19, 0xFF	; 255
    280c:	8f 3f       	cpi	r24, 0xFF	; 255
    280e:	93 07       	cpc	r25, r19
    2810:	81 f0       	breq	.+32     	; 0x2832 <ungetc+0x34>
    2812:	82 83       	std	Z+2, r24	; 0x02
    2814:	92 2f       	mov	r25, r18
    2816:	90 64       	ori	r25, 0x40	; 64
    2818:	9f 7d       	andi	r25, 0xDF	; 223
    281a:	93 83       	std	Z+3, r25	; 0x03
    281c:	26 81       	ldd	r18, Z+6	; 0x06
    281e:	37 81       	ldd	r19, Z+7	; 0x07
    2820:	21 50       	subi	r18, 0x01	; 1
    2822:	30 40       	sbci	r19, 0x00	; 0
    2824:	37 83       	std	Z+7, r19	; 0x07
    2826:	26 83       	std	Z+6, r18	; 0x06
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	08 95       	ret
    282c:	8f ef       	ldi	r24, 0xFF	; 255
    282e:	9f ef       	ldi	r25, 0xFF	; 255
    2830:	08 95       	ret
    2832:	8f ef       	ldi	r24, 0xFF	; 255
    2834:	9f ef       	ldi	r25, 0xFF	; 255
    2836:	08 95       	ret

00002838 <__ultoa_invert>:
    2838:	fa 01       	movw	r30, r20
    283a:	aa 27       	eor	r26, r26
    283c:	28 30       	cpi	r18, 0x08	; 8
    283e:	51 f1       	breq	.+84     	; 0x2894 <__ultoa_invert+0x5c>
    2840:	20 31       	cpi	r18, 0x10	; 16
    2842:	81 f1       	breq	.+96     	; 0x28a4 <__ultoa_invert+0x6c>
    2844:	e8 94       	clt
    2846:	6f 93       	push	r22
    2848:	6e 7f       	andi	r22, 0xFE	; 254
    284a:	6e 5f       	subi	r22, 0xFE	; 254
    284c:	7f 4f       	sbci	r23, 0xFF	; 255
    284e:	8f 4f       	sbci	r24, 0xFF	; 255
    2850:	9f 4f       	sbci	r25, 0xFF	; 255
    2852:	af 4f       	sbci	r26, 0xFF	; 255
    2854:	b1 e0       	ldi	r27, 0x01	; 1
    2856:	3e d0       	rcall	.+124    	; 0x28d4 <__ultoa_invert+0x9c>
    2858:	b4 e0       	ldi	r27, 0x04	; 4
    285a:	3c d0       	rcall	.+120    	; 0x28d4 <__ultoa_invert+0x9c>
    285c:	67 0f       	add	r22, r23
    285e:	78 1f       	adc	r23, r24
    2860:	89 1f       	adc	r24, r25
    2862:	9a 1f       	adc	r25, r26
    2864:	a1 1d       	adc	r26, r1
    2866:	68 0f       	add	r22, r24
    2868:	79 1f       	adc	r23, r25
    286a:	8a 1f       	adc	r24, r26
    286c:	91 1d       	adc	r25, r1
    286e:	a1 1d       	adc	r26, r1
    2870:	6a 0f       	add	r22, r26
    2872:	71 1d       	adc	r23, r1
    2874:	81 1d       	adc	r24, r1
    2876:	91 1d       	adc	r25, r1
    2878:	a1 1d       	adc	r26, r1
    287a:	20 d0       	rcall	.+64     	; 0x28bc <__ultoa_invert+0x84>
    287c:	09 f4       	brne	.+2      	; 0x2880 <__ultoa_invert+0x48>
    287e:	68 94       	set
    2880:	3f 91       	pop	r19
    2882:	2a e0       	ldi	r18, 0x0A	; 10
    2884:	26 9f       	mul	r18, r22
    2886:	11 24       	eor	r1, r1
    2888:	30 19       	sub	r19, r0
    288a:	30 5d       	subi	r19, 0xD0	; 208
    288c:	31 93       	st	Z+, r19
    288e:	de f6       	brtc	.-74     	; 0x2846 <__ultoa_invert+0xe>
    2890:	cf 01       	movw	r24, r30
    2892:	08 95       	ret
    2894:	46 2f       	mov	r20, r22
    2896:	47 70       	andi	r20, 0x07	; 7
    2898:	40 5d       	subi	r20, 0xD0	; 208
    289a:	41 93       	st	Z+, r20
    289c:	b3 e0       	ldi	r27, 0x03	; 3
    289e:	0f d0       	rcall	.+30     	; 0x28be <__ultoa_invert+0x86>
    28a0:	c9 f7       	brne	.-14     	; 0x2894 <__ultoa_invert+0x5c>
    28a2:	f6 cf       	rjmp	.-20     	; 0x2890 <__ultoa_invert+0x58>
    28a4:	46 2f       	mov	r20, r22
    28a6:	4f 70       	andi	r20, 0x0F	; 15
    28a8:	40 5d       	subi	r20, 0xD0	; 208
    28aa:	4a 33       	cpi	r20, 0x3A	; 58
    28ac:	18 f0       	brcs	.+6      	; 0x28b4 <__ultoa_invert+0x7c>
    28ae:	49 5d       	subi	r20, 0xD9	; 217
    28b0:	31 fd       	sbrc	r19, 1
    28b2:	40 52       	subi	r20, 0x20	; 32
    28b4:	41 93       	st	Z+, r20
    28b6:	02 d0       	rcall	.+4      	; 0x28bc <__ultoa_invert+0x84>
    28b8:	a9 f7       	brne	.-22     	; 0x28a4 <__ultoa_invert+0x6c>
    28ba:	ea cf       	rjmp	.-44     	; 0x2890 <__ultoa_invert+0x58>
    28bc:	b4 e0       	ldi	r27, 0x04	; 4
    28be:	a6 95       	lsr	r26
    28c0:	97 95       	ror	r25
    28c2:	87 95       	ror	r24
    28c4:	77 95       	ror	r23
    28c6:	67 95       	ror	r22
    28c8:	ba 95       	dec	r27
    28ca:	c9 f7       	brne	.-14     	; 0x28be <__ultoa_invert+0x86>
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	61 05       	cpc	r22, r1
    28d0:	71 05       	cpc	r23, r1
    28d2:	08 95       	ret
    28d4:	9b 01       	movw	r18, r22
    28d6:	ac 01       	movw	r20, r24
    28d8:	0a 2e       	mov	r0, r26
    28da:	06 94       	lsr	r0
    28dc:	57 95       	ror	r21
    28de:	47 95       	ror	r20
    28e0:	37 95       	ror	r19
    28e2:	27 95       	ror	r18
    28e4:	ba 95       	dec	r27
    28e6:	c9 f7       	brne	.-14     	; 0x28da <__ultoa_invert+0xa2>
    28e8:	62 0f       	add	r22, r18
    28ea:	73 1f       	adc	r23, r19
    28ec:	84 1f       	adc	r24, r20
    28ee:	95 1f       	adc	r25, r21
    28f0:	a0 1d       	adc	r26, r0
    28f2:	08 95       	ret

000028f4 <__ctype_isfalse>:
    28f4:	99 27       	eor	r25, r25
    28f6:	88 27       	eor	r24, r24

000028f8 <__ctype_istrue>:
    28f8:	08 95       	ret

000028fa <_exit>:
    28fa:	f8 94       	cli

000028fc <__stop_program>:
    28fc:	ff cf       	rjmp	.-2      	; 0x28fc <__stop_program>
