
Pjt04_uart_intr_volatile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  00000256  000002ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  0080023a  0080023a  00000324  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a8  00000000  00000000  00000b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f2  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d2  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036c  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000be  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001782  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  6c:	0c 94 96 00 	jmp	0x12c	; 0x12c <__vector_27>
  70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
  e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e5       	ldi	r30, 0x56	; 86
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	aa e3       	ldi	r26, 0x3A	; 58
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	ac 37       	cpi	r26, 0x7C	; 124
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
 120:	0e 94 0a 01 	call	0x214	; 0x214 <main>
 124:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

00000128 <__bad_interrupt>:
 128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <__vector_27>:
	while(1);
	return 0;
}

ISR(USART0_TX_vect)
{
 12c:	1f 92       	push	r1
 12e:	0f 92       	push	r0
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	0f 92       	push	r0
 134:	0b b6       	in	r0, 0x3b	; 59
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	2f 93       	push	r18
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
	char ch = buf[bufi];
 144:	e0 91 3a 02 	lds	r30, 0x023A
 148:	f0 91 3b 02 	lds	r31, 0x023B
 14c:	e4 5c       	subi	r30, 0xC4	; 196
 14e:	fd 4f       	sbci	r31, 0xFD	; 253
 150:	20 81       	ld	r18, Z
	if(!ch) {
 152:	22 23       	and	r18, r18
 154:	39 f4       	brne	.+14     	; 0x164 <__vector_27+0x38>
		txend = 1; return;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 38 02 	sts	0x0238, r25
 15e:	80 93 37 02 	sts	0x0237, r24
 162:	16 c0       	rjmp	.+44     	; 0x190 <__vector_27+0x64>
	}
	if (ch == '\n') buf[bufi] = '\r';
 164:	2a 30       	cpi	r18, 0x0A	; 10
 166:	49 f4       	brne	.+18     	; 0x17a <__vector_27+0x4e>
 168:	e0 91 3a 02 	lds	r30, 0x023A
 16c:	f0 91 3b 02 	lds	r31, 0x023B
 170:	e4 5c       	subi	r30, 0xC4	; 196
 172:	fd 4f       	sbci	r31, 0xFD	; 253
 174:	8d e0       	ldi	r24, 0x0D	; 13
 176:	80 83       	st	Z, r24
 178:	09 c0       	rjmp	.+18     	; 0x18c <__vector_27+0x60>
	else			bufi++;
 17a:	80 91 3a 02 	lds	r24, 0x023A
 17e:	90 91 3b 02 	lds	r25, 0x023B
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 3b 02 	sts	0x023B, r25
 188:	80 93 3a 02 	sts	0x023A, r24
	UDR0 = ch;
 18c:	20 93 c6 00 	sts	0x00C6, r18
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0b be       	out	0x3b, r0	; 59
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <uart_init>:
#include <util/delay.h>
#include "uart.h"

void uart_init()
{
	UBRR0H = 0x00; UBRR0L = 0x07;
 1a8:	10 92 c5 00 	sts	0x00C5, r1
 1ac:	87 e0       	ldi	r24, 0x07	; 7
 1ae:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A |= (1 << U2X0);
 1b2:	e0 ec       	ldi	r30, 0xC0	; 192
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);
 1bc:	e1 ec       	ldi	r30, 0xC1	; 193
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXCIE0);
 1c6:	80 81       	ld	r24, Z
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 83       	st	Z, r24
}
 1cc:	08 95       	ret

000001ce <uart_putstart>:

char buf[64];
int volatile bufi, txend = 1;

void uart_putstart(char str[])
{
 1ce:	bc 01       	movw	r22, r24
	char ch;
	while(!txend); txend = 0;
 1d0:	80 91 37 02 	lds	r24, 0x0237
 1d4:	90 91 38 02 	lds	r25, 0x0238
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	d1 f3       	breq	.-12     	; 0x1d0 <uart_putstart+0x2>
 1dc:	10 92 38 02 	sts	0x0238, r1
 1e0:	10 92 37 02 	sts	0x0237, r1
	
	strcpy(buf, str); bufi = 0;
 1e4:	8c e3       	ldi	r24, 0x3C	; 60
 1e6:	92 e0       	ldi	r25, 0x02	; 2
 1e8:	0e 94 22 01 	call	0x244	; 0x244 <strcpy>
 1ec:	10 92 3b 02 	sts	0x023B, r1
 1f0:	10 92 3a 02 	sts	0x023A, r1
	ch = buf[bufi++];
 1f4:	80 91 3a 02 	lds	r24, 0x023A
 1f8:	90 91 3b 02 	lds	r25, 0x023B
 1fc:	fc 01       	movw	r30, r24
 1fe:	e4 5c       	subi	r30, 0xC4	; 196
 200:	fd 4f       	sbci	r31, 0xFD	; 253
 202:	20 81       	ld	r18, Z
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	90 93 3b 02 	sts	0x023B, r25
 20a:	80 93 3a 02 	sts	0x023A, r24

	UDR0 = ch;
 20e:	20 93 c6 00 	sts	0x00C6, r18
}
 212:	08 95       	ret

00000214 <main>:
#include <avr/interrupt.h>
#include "uart.h"

int main() {
	int i;
	uart_init();
 214:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <uart_init>
	sei();
 218:	78 94       	sei
 21a:	ca e0       	ldi	r28, 0x0A	; 10
 21c:	d0 e0       	ldi	r29, 0x00	; 0

	for(i = 0; i < 10; i++) {
		uart_putstart( "I love you. \n" );
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_putstart>
		uart_putstart( "You love me. \n" );
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	92 e0       	ldi	r25, 0x02	; 2
 22a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_putstart>
		uart_putstart( "He loves her. \n" );
 22e:	8d e1       	ldi	r24, 0x1D	; 29
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_putstart>
 236:	21 97       	sbiw	r28, 0x01	; 1
int main() {
	int i;
	uart_init();
	sei();

	for(i = 0; i < 10; i++) {
 238:	91 f7       	brne	.-28     	; 0x21e <main+0xa>
		uart_putstart( "I love you. \n" );
		uart_putstart( "You love me. \n" );
		uart_putstart( "He loves her. \n" );
	}

	uart_putstart( "End !!! \n");
 23a:	8d e2       	ldi	r24, 0x2D	; 45
 23c:	92 e0       	ldi	r25, 0x02	; 2
 23e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <uart_putstart>
 242:	ff cf       	rjmp	.-2      	; 0x242 <main+0x2e>

00000244 <strcpy>:
 244:	fb 01       	movw	r30, r22
 246:	dc 01       	movw	r26, r24
 248:	01 90       	ld	r0, Z+
 24a:	0d 92       	st	X+, r0
 24c:	00 20       	and	r0, r0
 24e:	e1 f7       	brne	.-8      	; 0x248 <strcpy+0x4>
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
