
Pjt09_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800200  0000120a  0000129e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000120a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  0080029a  0080029a  00001338  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  00001338  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000270  00000000  00000000  00002788  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020d7  00000000  00000000  000029f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe8  00000000  00000000  00004acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ea  00000000  00000000  00005ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000570  00000000  00000000  00006da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bd  00000000  00000000  00007314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001647  00000000  00000000  000079d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e0       	ldi	r30, 0x0A	; 10
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 39       	cpi	r26, 0x9A	; 154
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	aa e9       	ldi	r26, 0x9A	; 154
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a1 33       	cpi	r26, 0x31	; 49
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 98 03 	call	0x730	; 0x730 <main>
     124:	0c 94 03 09 	jmp	0x1206	; 0x1206 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <get_node>:

struct node *get_node() // 메모리 할당
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 17 04 	call	0x82e	; 0x82e <malloc>
	return(cp);
}
     134:	08 95       	ret

00000136 <free_node>:

void free_node(struct node *np)
{
	free(np);
     136:	0e 94 ad 04 	call	0x95a	; 0x95a <free>
}
     13a:	08 95       	ret

0000013c <insert_node_head>:

void insert_node_head(struct node *np) // 헤더
{
     13c:	fc 01       	movw	r30, r24
	if(!Head) {
     13e:	80 91 9a 02 	lds	r24, 0x029A
     142:	90 91 9b 02 	lds	r25, 0x029B
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	39 f4       	brne	.+14     	; 0x158 <insert_node_head+0x1c>
		Head = np;
     14a:	f0 93 9b 02 	sts	0x029B, r31
     14e:	e0 93 9a 02 	sts	0x029A, r30
		np -> link = NULL;
     152:	13 82       	std	Z+3, r1	; 0x03
     154:	12 82       	std	Z+2, r1	; 0x02
     156:	08 95       	ret
	}
	else {
		np -> link = Head;
     158:	93 83       	std	Z+3, r25	; 0x03
     15a:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     15c:	f0 93 9b 02 	sts	0x029B, r31
     160:	e0 93 9a 02 	sts	0x029A, r30
     164:	08 95       	ret

00000166 <insert_node_tail>:

void insert_node_tail(struct node *np) // 꼬리
{
	struct node *cp;

	if(!Head)
     166:	e0 91 9a 02 	lds	r30, 0x029A
     16a:	f0 91 9b 02 	lds	r31, 0x029B
     16e:	30 97       	sbiw	r30, 0x00	; 0
     170:	31 f4       	brne	.+12     	; 0x17e <insert_node_tail+0x18>
		Head = np;
     172:	90 93 9b 02 	sts	0x029B, r25
     176:	80 93 9a 02 	sts	0x029A, r24
     17a:	08 c0       	rjmp	.+16     	; 0x18c <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     17c:	f9 01       	movw	r30, r18
     17e:	22 81       	ldd	r18, Z+2	; 0x02
     180:	33 81       	ldd	r19, Z+3	; 0x03
     182:	21 15       	cp	r18, r1
     184:	31 05       	cpc	r19, r1
     186:	d1 f7       	brne	.-12     	; 0x17c <insert_node_tail+0x16>
		cp -> link = np;
     188:	93 83       	std	Z+3, r25	; 0x03
     18a:	82 83       	std	Z+2, r24	; 0x02
	}
	np -> link = NULL;
     18c:	fc 01       	movw	r30, r24
     18e:	13 82       	std	Z+3, r1	; 0x03
     190:	12 82       	std	Z+2, r1	; 0x02
}
     192:	08 95       	ret

00000194 <insert_node_ascn>:
// list t 입력 후 a, b, c, d, e, f 입력 시
// a - b - c - d - e - f 출력


void insert_node_ascn(struct node *np) // 오름 차순 
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     19a:	20 91 9a 02 	lds	r18, 0x029A
     19e:	30 91 9b 02 	lds	r19, 0x029B
     1a2:	21 15       	cp	r18, r1
     1a4:	31 05       	cpc	r19, r1
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <insert_node_ascn+0x20>
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     1a8:	40 81       	ld	r20, Z
     1aa:	51 81       	ldd	r21, Z+1	; 0x01
     1ac:	d9 01       	movw	r26, r18
     1ae:	c0 e0       	ldi	r28, 0x00	; 0
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <insert_node_ascn+0x3e>

void insert_node_ascn(struct node *np) // 오름 차순 
{
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     1b4:	90 93 9b 02 	sts	0x029B, r25
     1b8:	80 93 9a 02 	sts	0x029A, r24
		np -> link = NULL;
     1bc:	13 82       	std	Z+3, r1	; 0x03
     1be:	12 82       	std	Z+2, r1	; 0x02
     1c0:	1d c0       	rjmp	.+58     	; 0x1fc <insert_node_ascn+0x68>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
		pp = cp, cp = cp->link);
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	8d 91       	ld	r24, X+
     1c6:	9c 91       	ld	r25, X
     1c8:	13 97       	sbiw	r26, 0x03	; 3
	if(!Head) {
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     1ca:	ed 01       	movw	r28, r26
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	39 f0       	breq	.+14     	; 0x1de <insert_node_ascn+0x4a>
		pp = cp, cp = cp->link);
     1d0:	dc 01       	movw	r26, r24
	if(!Head) {
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     1d2:	8d 91       	ld	r24, X+
     1d4:	9c 91       	ld	r25, X
     1d6:	11 97       	sbiw	r26, 0x01	; 1
     1d8:	84 17       	cp	r24, r20
     1da:	95 07       	cpc	r25, r21
     1dc:	94 f3       	brlt	.-28     	; 0x1c2 <insert_node_ascn+0x2e>
		pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     1de:	20 97       	sbiw	r28, 0x00	; 0
     1e0:	39 f4       	brne	.+14     	; 0x1f0 <insert_node_ascn+0x5c>
			np -> link = Head;
     1e2:	33 83       	std	Z+3, r19	; 0x03
     1e4:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     1e6:	f0 93 9b 02 	sts	0x029B, r31
     1ea:	e0 93 9a 02 	sts	0x029A, r30
     1ee:	06 c0       	rjmp	.+12     	; 0x1fc <insert_node_ascn+0x68>
		} else {
			np -> link = pp -> link;
     1f0:	8a 81       	ldd	r24, Y+2	; 0x02
     1f2:	9b 81       	ldd	r25, Y+3	; 0x03
     1f4:	93 83       	std	Z+3, r25	; 0x03
     1f6:	82 83       	std	Z+2, r24	; 0x02
			pp -> link = np;
     1f8:	fb 83       	std	Y+3, r31	; 0x03
     1fa:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <insert_node_desc>:
// list 입력 후 a, b, c, d, e, f 입력 시
// a - b - c - d - e - f 출력

void insert_node_desc(struct node *np) { // 내림 차순
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	fc 01       	movw	r30, r24
   struct node *cp, *pp;

   if(!Head) {
     208:	20 91 9a 02 	lds	r18, 0x029A
     20c:	30 91 9b 02 	lds	r19, 0x029B
     210:	21 15       	cp	r18, r1
     212:	31 05       	cpc	r19, r1
     214:	31 f0       	breq	.+12     	; 0x222 <insert_node_desc+0x20>
      Head = np;
      np->link = NULL;
   } else {
      for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     216:	40 81       	ld	r20, Z
     218:	51 81       	ldd	r21, Z+1	; 0x01
     21a:	d9 01       	movw	r26, r18
     21c:	c0 e0       	ldi	r28, 0x00	; 0
     21e:	d0 e0       	ldi	r29, 0x00	; 0
     220:	0f c0       	rjmp	.+30     	; 0x240 <insert_node_desc+0x3e>

void insert_node_desc(struct node *np) { // 내림 차순
   struct node *cp, *pp;

   if(!Head) {
      Head = np;
     222:	90 93 9b 02 	sts	0x029B, r25
     226:	80 93 9a 02 	sts	0x029A, r24
      np->link = NULL;
     22a:	13 82       	std	Z+3, r1	; 0x03
     22c:	12 82       	std	Z+2, r1	; 0x02
     22e:	1d c0       	rjmp	.+58     	; 0x26a <insert_node_desc+0x68>
   } else {
      for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     230:	12 96       	adiw	r26, 0x02	; 2
     232:	8d 91       	ld	r24, X+
     234:	9c 91       	ld	r25, X
     236:	13 97       	sbiw	r26, 0x03	; 3
     238:	ed 01       	movw	r28, r26
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	39 f0       	breq	.+14     	; 0x24c <insert_node_desc+0x4a>
     23e:	dc 01       	movw	r26, r24
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	11 97       	sbiw	r26, 0x01	; 1
     246:	48 17       	cp	r20, r24
     248:	59 07       	cpc	r21, r25
     24a:	94 f3       	brlt	.-28     	; 0x230 <insert_node_desc+0x2e>

      if(pp == NULL) {
     24c:	20 97       	sbiw	r28, 0x00	; 0
     24e:	39 f4       	brne	.+14     	; 0x25e <insert_node_desc+0x5c>
         np->link = Head;
     250:	33 83       	std	Z+3, r19	; 0x03
     252:	22 83       	std	Z+2, r18	; 0x02
         Head = np;
     254:	f0 93 9b 02 	sts	0x029B, r31
     258:	e0 93 9a 02 	sts	0x029A, r30
     25c:	06 c0       	rjmp	.+12     	; 0x26a <insert_node_desc+0x68>
      } else {
         np->link = pp->link;
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	9b 81       	ldd	r25, Y+3	; 0x03
     262:	93 83       	std	Z+3, r25	; 0x03
     264:	82 83       	std	Z+2, r24	; 0x02
         pp->link = np;
     266:	fb 83       	std	Y+3, r31	; 0x03
     268:	ea 83       	std	Y+2, r30	; 0x02
      }
   }
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <tour_list>:
// list 입력 후 a, b, c, d, e, f 입력 시
// f - e - d - c - b - a 출력

void tour_list() { // list 배열 출력
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
	struct node *cp;
	printf("\n");
     278:	8a e0       	ldi	r24, 0x0A	; 10
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 e7 05 	call	0xbce	; 0xbce <putchar>
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     280:	c0 91 9a 02 	lds	r28, 0x029A
     284:	d0 91 9b 02 	lds	r29, 0x029B
		printf("-->%c ", cp-> data);
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() { // list 배열 출력
	struct node *cp;
	printf("\n");
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     28c:	13 c0       	rjmp	.+38     	; 0x2b4 <tour_list+0x44>
		printf("-->%c ", cp-> data);
     28e:	00 d0       	rcall	.+0      	; 0x290 <tour_list+0x20>
     290:	0f 92       	push	r0
     292:	ed b7       	in	r30, 0x3d	; 61
     294:	fe b7       	in	r31, 0x3e	; 62
     296:	12 83       	std	Z+2, r17	; 0x02
     298:	01 83       	std	Z+1, r16	; 0x01
     29a:	88 81       	ld	r24, Y
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	94 83       	std	Z+4, r25	; 0x04
     2a0:	83 83       	std	Z+3, r24	; 0x03
     2a2:	0e 94 d5 05 	call	0xbaa	; 0xbaa <printf>

void tour_list() { // list 배열 출력
	struct node *cp;
	printf("\n");
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     2a6:	0a 80       	ldd	r0, Y+2	; 0x02
     2a8:	db 81       	ldd	r29, Y+3	; 0x03
     2aa:	c0 2d       	mov	r28, r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	20 97       	sbiw	r28, 0x00	; 0
     2b6:	59 f7       	brne	.-42     	; 0x28e <tour_list+0x1e>
		printf("-->%c ", cp-> data);
	printf("\n");
     2b8:	8a e0       	ldi	r24, 0x0A	; 10
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 e7 05 	call	0xbce	; 0xbce <putchar>
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <free_list>:

void free_list() // 노드 반납
{
	struct node *cp;
	
	for(; Head != NULL; ) {
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <free_list+0x14>
		cp = Head;
		Head = cp->link;
     2cc:	fc 01       	movw	r30, r24
     2ce:	22 81       	ldd	r18, Z+2	; 0x02
     2d0:	33 81       	ldd	r19, Z+3	; 0x03
     2d2:	30 93 9b 02 	sts	0x029B, r19
     2d6:	20 93 9a 02 	sts	0x029A, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     2da:	0e 94 ad 04 	call	0x95a	; 0x95a <free>

void free_list() // 노드 반납
{
	struct node *cp;
	
	for(; Head != NULL; ) {
     2de:	80 91 9a 02 	lds	r24, 0x029A
     2e2:	90 91 9b 02 	lds	r25, 0x029B
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	89 f7       	brne	.-30     	; 0x2cc <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}	
     2ea:	08 95       	ret

000002ec <app_list>:

void app_list(char *ap) // list 명령어 실행
{
     2ec:	ef 92       	push	r14
     2ee:	ff 92       	push	r15
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	28 97       	sbiw	r28, 0x08	; 8
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a' ;
	struct node *np;

	if (ap) how = *ap;
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	19 f0       	breq	.+6      	; 0x310 <app_list+0x24>
     30a:	fc 01       	movw	r30, r24
     30c:	10 81       	ld	r17, Z
     30e:	01 c0       	rjmp	.+2      	; 0x312 <app_list+0x26>
	}
}	

void app_list(char *ap) // list 명령어 실행
{
	char buf[8], how = 'a' ;
     310:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf( " > ");
     312:	87 e0       	ldi	r24, 0x07	; 7
     314:	e8 2e       	mov	r14, r24
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	f8 2e       	mov	r15, r24
     31a:	0f 92       	push	r0
     31c:	0f 92       	push	r0
     31e:	ed b7       	in	r30, 0x3d	; 61
     320:	fe b7       	in	r31, 0x3e	; 62
     322:	f2 82       	std	Z+2, r15	; 0x02
     324:	e1 82       	std	Z+1, r14	; 0x01
     326:	0e 94 d5 05 	call	0xbaa	; 0xbaa <printf>
		if(fgets(buf, 8, stdin) == NULL)
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	40 91 2b 03 	lds	r20, 0x032B
     332:	50 91 2c 03 	lds	r21, 0x032C
     336:	ce 01       	movw	r24, r28
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	68 e0       	ldi	r22, 0x08	; 8
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	0e 94 a1 05 	call	0xb42	; 0xb42 <fgets>
     342:	00 97       	sbiw	r24, 0x00	; 0
     344:	c9 f0       	breq	.+50     	; 0x378 <app_list+0x8c>
			break;
		np = get_node();
     346:	0e 94 96 00 	call	0x12c	; 0x12c <get_node>
		np -> data = buf[0];
     34a:	29 81       	ldd	r18, Y+1	; 0x01
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
     350:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     352:	18 36       	cpi	r17, 0x68	; 104
     354:	29 f0       	breq	.+10     	; 0x360 <app_list+0x74>
     356:	14 37       	cpi	r17, 0x74	; 116
     358:	31 f0       	breq	.+12     	; 0x366 <app_list+0x7a>
     35a:	14 36       	cpi	r17, 0x64	; 100
     35c:	51 f4       	brne	.+20     	; 0x372 <app_list+0x86>
     35e:	06 c0       	rjmp	.+12     	; 0x36c <app_list+0x80>
			case 'h' : insert_node_head(np); break; // 헤더
     360:	0e 94 9e 00 	call	0x13c	; 0x13c <insert_node_head>
     364:	da cf       	rjmp	.-76     	; 0x31a <app_list+0x2e>
			case 't' : insert_node_tail(np); break; // 꼬리
     366:	0e 94 b3 00 	call	0x166	; 0x166 <insert_node_tail>
     36a:	d7 cf       	rjmp	.-82     	; 0x31a <app_list+0x2e>
			case 'd' : insert_node_desc(np); break; // 내림차순
     36c:	0e 94 01 01 	call	0x202	; 0x202 <insert_node_desc>
     370:	d4 cf       	rjmp	.-88     	; 0x31a <app_list+0x2e>
			default : insert_node_ascn(np); // 오름차순
     372:	0e 94 ca 00 	call	0x194	; 0x194 <insert_node_ascn>
     376:	d1 cf       	rjmp	.-94     	; 0x31a <app_list+0x2e>
		}
	}
	tour_list(); // 리스트 출력
     378:	0e 94 38 01 	call	0x270	; 0x270 <tour_list>
	free_list(); // 메모리 반납
     37c:	0e 94 65 01 	call	0x2ca	; 0x2ca <free_list>
}
     380:	28 96       	adiw	r28, 0x08	; 8
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <__vector_27>:
	printf( "logout, good bye !!!\n");
	while(1); return 0;
}

ISR(USART0_TX_vect) // 송신 인터럽트 
{
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	0b b6       	in	r0, 0x3b	; 59
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
	char	ch;

	if((ch = qo_delete()) == 0)
     3be:	0e 94 a2 02 	call	0x544	; 0x544 <qo_delete>
     3c2:	88 23       	and	r24, r24
     3c4:	19 f4       	brne	.+6      	; 0x3cc <__vector_27+0x34>
		uart_busy = 0;
     3c6:	10 92 26 03 	sts	0x0326, r1
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__vector_27+0x38>
	else
		UDR0 = ch;
     3cc:	80 93 c6 00 	sts	0x00C6, r24
}
     3d0:	ff 91       	pop	r31
     3d2:	ef 91       	pop	r30
     3d4:	bf 91       	pop	r27
     3d6:	af 91       	pop	r26
     3d8:	9f 91       	pop	r25
     3da:	8f 91       	pop	r24
     3dc:	7f 91       	pop	r23
     3de:	6f 91       	pop	r22
     3e0:	5f 91       	pop	r21
     3e2:	4f 91       	pop	r20
     3e4:	3f 91       	pop	r19
     3e6:	2f 91       	pop	r18
     3e8:	0f 90       	pop	r0
     3ea:	0b be       	out	0x3b, r0	; 59
     3ec:	0f 90       	pop	r0
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	0f 90       	pop	r0
     3f2:	1f 90       	pop	r1
     3f4:	18 95       	reti

000003f6 <__vector_25>:

ISR(USART0_RX_vect) // 수신 인터럽트
{
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	0b b6       	in	r0, 0x3b	; 59
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	4f 93       	push	r20
     40a:	5f 93       	push	r21
     40c:	6f 93       	push	r22
     40e:	7f 93       	push	r23
     410:	8f 93       	push	r24
     412:	9f 93       	push	r25
     414:	af 93       	push	r26
     416:	bf 93       	push	r27
     418:	cf 93       	push	r28
     41a:	ef 93       	push	r30
     41c:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     41e:	c0 91 c6 00 	lds	r28, 0x00C6
	if (ch != E0T) {
     422:	c4 30       	cpi	r28, 0x04	; 4
     424:	31 f0       	breq	.+12     	; 0x432 <__vector_25+0x3c>
		if(ch == '\r') ch = '\n'; // \r, \n Enter 의미
     426:	cd 30       	cpi	r28, 0x0D	; 13
     428:	09 f4       	brne	.+2      	; 0x42c <__vector_25+0x36>
     42a:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     42c:	8c 2f       	mov	r24, r28
     42e:	0e 94 17 03 	call	0x62e	; 0x62e <uart_echo>
	}
	qi_insert(ch);
     432:	8c 2f       	mov	r24, r28
     434:	0e 94 41 02 	call	0x482	; 0x482 <qi_insert>
}
     438:	ff 91       	pop	r31
     43a:	ef 91       	pop	r30
     43c:	cf 91       	pop	r28
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	7f 91       	pop	r23
     448:	6f 91       	pop	r22
     44a:	5f 91       	pop	r21
     44c:	4f 91       	pop	r20
     44e:	3f 91       	pop	r19
     450:	2f 91       	pop	r18
     452:	0f 90       	pop	r0
     454:	0b be       	out	0x3b, r0	; 59
     456:	0f 90       	pop	r0
     458:	0f be       	out	0x3f, r0	; 63
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri= fo = ro = 0;
     460:	10 92 e3 02 	sts	0x02E3, r1
     464:	10 92 e2 02 	sts	0x02E2, r1
     468:	10 92 e1 02 	sts	0x02E1, r1
     46c:	10 92 e0 02 	sts	0x02E0, r1
     470:	10 92 e5 02 	sts	0x02E5, r1
     474:	10 92 e4 02 	sts	0x02E4, r1
     478:	10 92 9f 02 	sts	0x029F, r1
     47c:	10 92 9e 02 	sts	0x029E, r1
}
     480:	08 95       	ret

00000482 <qi_insert>:

int qi_insert(char ch)
{
     482:	48 2f       	mov	r20, r24
	if ((ri+1) % QI_SIZE == fi)
     484:	20 91 e4 02 	lds	r18, 0x02E4
     488:	30 91 e5 02 	lds	r19, 0x02E5
     48c:	2f 5f       	subi	r18, 0xFF	; 255
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
     490:	c9 01       	movw	r24, r18
     492:	60 e4       	ldi	r22, 0x40	; 64
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divmodhi4>
     49a:	9c 01       	movw	r18, r24
     49c:	80 91 9e 02 	lds	r24, 0x029E
     4a0:	90 91 9f 02 	lds	r25, 0x029F
     4a4:	28 17       	cp	r18, r24
     4a6:	39 07       	cpc	r19, r25
     4a8:	59 f0       	breq	.+22     	; 0x4c0 <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     4aa:	30 93 e5 02 	sts	0x02E5, r19
     4ae:	20 93 e4 02 	sts	0x02E4, r18
	qi[ri] = ch;
     4b2:	2a 51       	subi	r18, 0x1A	; 26
     4b4:	3d 4f       	sbci	r19, 0xFD	; 253
     4b6:	f9 01       	movw	r30, r18
     4b8:	40 83       	st	Z, r20
	return 1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri+1) % QI_SIZE == fi)
		return 0;
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     4c4:	08 95       	ret

000004c6 <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     4c6:	80 91 9e 02 	lds	r24, 0x029E
     4ca:	90 91 9f 02 	lds	r25, 0x029F
     4ce:	20 91 e4 02 	lds	r18, 0x02E4
     4d2:	30 91 e5 02 	lds	r19, 0x02E5
     4d6:	28 17       	cp	r18, r24
     4d8:	39 07       	cpc	r19, r25
     4da:	79 f0       	breq	.+30     	; 0x4fa <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     4dc:	01 96       	adiw	r24, 0x01	; 1
     4de:	60 e4       	ldi	r22, 0x40	; 64
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divmodhi4>
     4e6:	90 93 9f 02 	sts	0x029F, r25
     4ea:	80 93 9e 02 	sts	0x029E, r24
	return (qi[fi]);
     4ee:	8a 51       	subi	r24, 0x1A	; 26
     4f0:	9d 4f       	sbci	r25, 0xFD	; 253
     4f2:	fc 01       	movw	r30, r24
     4f4:	80 81       	ld	r24, Z
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return 0;
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return (qi[fi]);
}
     4fe:	08 95       	ret

00000500 <qo_insert>:

int qo_insert(char ch)
{
     500:	48 2f       	mov	r20, r24
	if ((ro+1) % QO_SIZE == fo)
     502:	20 91 e2 02 	lds	r18, 0x02E2
     506:	30 91 e3 02 	lds	r19, 0x02E3
     50a:	2f 5f       	subi	r18, 0xFF	; 255
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
     50e:	c9 01       	movw	r24, r18
     510:	60 e4       	ldi	r22, 0x40	; 64
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divmodhi4>
     518:	9c 01       	movw	r18, r24
     51a:	80 91 e0 02 	lds	r24, 0x02E0
     51e:	90 91 e1 02 	lds	r25, 0x02E1
     522:	28 17       	cp	r18, r24
     524:	39 07       	cpc	r19, r25
     526:	59 f0       	breq	.+22     	; 0x53e <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     528:	30 93 e3 02 	sts	0x02E3, r19
     52c:	20 93 e2 02 	sts	0x02E2, r18
	qo[ro] = ch;
     530:	20 56       	subi	r18, 0x60	; 96
     532:	3d 4f       	sbci	r19, 0xFD	; 253
     534:	f9 01       	movw	r30, r18
     536:	40 83       	st	Z, r20
	return 1;
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	08 95       	ret
}

int qo_insert(char ch)
{
	if ((ro+1) % QO_SIZE == fo)
		return 0;
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     542:	08 95       	ret

00000544 <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     544:	80 91 e0 02 	lds	r24, 0x02E0
     548:	90 91 e1 02 	lds	r25, 0x02E1
     54c:	20 91 e2 02 	lds	r18, 0x02E2
     550:	30 91 e3 02 	lds	r19, 0x02E3
     554:	28 17       	cp	r18, r24
     556:	39 07       	cpc	r19, r25
     558:	79 f0       	breq	.+30     	; 0x578 <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	60 e4       	ldi	r22, 0x40	; 64
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divmodhi4>
     564:	90 93 e1 02 	sts	0x02E1, r25
     568:	80 93 e0 02 	sts	0x02E0, r24
	return (qo[fo]);
     56c:	80 56       	subi	r24, 0x60	; 96
     56e:	9d 4f       	sbci	r25, 0xFD	; 253
     570:	fc 01       	movw	r30, r24
     572:	80 81       	ld	r24, Z
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return (qo[fo]);
}
     57c:	08 95       	ret

0000057e <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     57e:	f8 94       	cli
		ch = qi_delete();
     580:	0e 94 63 02 	call	0x4c6	; 0x4c6 <qi_delete>
		sei();
     584:	78 94       	sei
	} while (ch == 0);
     586:	88 23       	and	r24, r24
     588:	d1 f3       	breq	.-12     	; 0x57e <uart_getchar>

	if (ch == E0T) return -1;
     58a:	84 30       	cpi	r24, 0x04	; 4
     58c:	11 f0       	breq	.+4      	; 0x592 <uart_getchar+0x14>
	else			return (ch);
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     592:	8f ef       	ldi	r24, 0xFF	; 255
     594:	9f ef       	ldi	r25, 0xFF	; 255
	else			return (ch);
}
     596:	08 95       	ret

00000598 <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     598:	cf 93       	push	r28
     59a:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     59c:	8a 30       	cpi	r24, 0x0A	; 10
     59e:	19 f4       	brne	.+6      	; 0x5a6 <uart_putchar+0xe>
     5a0:	8d e0       	ldi	r24, 0x0D	; 13
     5a2:	0e 94 cc 02 	call	0x598	; 0x598 <uart_putchar>

	cli();
     5a6:	f8 94       	cli
	if(!uart_busy) {
     5a8:	80 91 26 03 	lds	r24, 0x0326
     5ac:	88 23       	and	r24, r24
     5ae:	61 f4       	brne	.+24     	; 0x5c8 <uart_putchar+0x30>
		UDR0 = ch;
     5b0:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	80 93 26 03 	sts	0x0326, r24
     5ba:	0b c0       	rjmp	.+22     	; 0x5d2 <uart_putchar+0x3a>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     5bc:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5be:	88 e1       	ldi	r24, 0x18	; 24
     5c0:	8a 95       	dec	r24
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <uart_putchar+0x28>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <uart_putchar+0x2e>
			_delay_us(100);
			cli();
     5c6:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     5c8:	8c 2f       	mov	r24, r28
     5ca:	0e 94 80 02 	call	0x500	; 0x500 <qo_insert>
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	a9 f3       	breq	.-22     	; 0x5bc <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     5d2:	78 94       	sei
	return 1;
}
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <uart_init>:

char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     5dc:	80 e5       	ldi	r24, 0x50	; 80
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	90 93 2c 03 	sts	0x032C, r25
     5e4:	80 93 2b 03 	sts	0x032B, r24
     5e8:	8e e5       	ldi	r24, 0x5E	; 94
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	90 93 2e 03 	sts	0x032E, r25
     5f0:	80 93 2d 03 	sts	0x032D, r24
	q_init();
     5f4:	0e 94 30 02 	call	0x460	; 0x460 <q_init>
	uart_busy = 0;
     5f8:	10 92 26 03 	sts	0x0326, r1

	UBRR0H = 0x00; UBRR0L = 0x07;
     5fc:	10 92 c5 00 	sts	0x00C5, r1
     600:	87 e0       	ldi	r24, 0x07	; 7
     602:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     606:	e0 ec       	ldi	r30, 0xC0	; 192
     608:	f0 e0       	ldi	r31, 0x00	; 0
     60a:	80 81       	ld	r24, Z
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     610:	e1 ec       	ldi	r30, 0xC1	; 193
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	88 60       	ori	r24, 0x08	; 8
     618:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     61a:	80 81       	ld	r24, Z
     61c:	80 64       	ori	r24, 0x40	; 64
     61e:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     620:	80 81       	ld	r24, Z
     622:	80 61       	ori	r24, 0x10	; 16
     624:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     626:	80 81       	ld	r24, Z
     628:	80 68       	ori	r24, 0x80	; 128
     62a:	80 83       	st	Z, r24
}
     62c:	08 95       	ret

0000062e <uart_echo>:
	if (ch == E0T) return -1;
	else			return (ch);
}

void uart_echo(char ch) // 수신 인터럽트 사용자 출력 부분
{
     62e:	cf 93       	push	r28
     630:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     632:	8a 30       	cpi	r24, 0x0A	; 10
     634:	19 f4       	brne	.+6      	; 0x63c <uart_echo+0xe>
     636:	8d e0       	ldi	r24, 0x0D	; 13
     638:	0e 94 17 03 	call	0x62e	; 0x62e <uart_echo>
	if (!uart_busy) { // 0 False, 1 True
     63c:	80 91 26 03 	lds	r24, 0x0326
     640:	88 23       	and	r24, r24
     642:	31 f4       	brne	.+12     	; 0x650 <uart_echo+0x22>
		UDR0 = ch;
     644:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1; // UART : 0 (바쁘지 않다), UART : 1 (바쁘다)
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 26 03 	sts	0x0326, r24
     64e:	03 c0       	rjmp	.+6      	; 0x656 <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     650:	8c 2f       	mov	r24, r28
     652:	0e 94 80 02 	call	0x500	; 0x500 <qo_insert>
}
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <is_prime>:
#include <stdio.h>

int is_prime(int n) {
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	fc 01       	movw	r30, r24
	int i;
	for( i = 2; i <= n/2; i++)
     660:	62 e0       	ldi	r22, 0x02	; 2
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divmodhi4>
     668:	eb 01       	movw	r28, r22
     66a:	22 e0       	ldi	r18, 0x02	; 2
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	08 c0       	rjmp	.+16     	; 0x680 <is_prime+0x26>
		if((n%i) == 0)
     670:	cf 01       	movw	r24, r30
     672:	b9 01       	movw	r22, r18
     674:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__divmodhi4>
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	41 f0       	breq	.+16     	; 0x68c <is_prime+0x32>
#include <stdio.h>

int is_prime(int n) {
	int i;
	for( i = 2; i <= n/2; i++)
     67c:	2f 5f       	subi	r18, 0xFF	; 255
     67e:	3f 4f       	sbci	r19, 0xFF	; 255
     680:	c2 17       	cp	r28, r18
     682:	d3 07       	cpc	r29, r19
     684:	ac f7       	brge	.-22     	; 0x670 <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	02 c0       	rjmp	.+4      	; 0x690 <is_prime+0x36>

int is_prime(int n) {
	int i;
	for( i = 2; i <= n/2; i++)
		if((n%i) == 0)
			return 0;
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <app_prime>:

void app_prime(char *ap)
{
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	21 f0       	breq	.+8      	; 0x6b2 <app_prime+0x1c>
     6aa:	0e 94 46 05 	call	0xa8c	; 0xa8c <atoi>
     6ae:	7c 01       	movw	r14, r24
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     6b2:	90 ed       	ldi	r25, 0xD0	; 208
     6b4:	e9 2e       	mov	r14, r25
     6b6:	97 e0       	ldi	r25, 0x07	; 7
     6b8:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     6ba:	c2 e0       	ldi	r28, 0x02	; 2
     6bc:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     6be:	00 e0       	ldi	r16, 0x00	; 0
     6c0:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
		if(is_prime(n)) {
			count++;
			printf( "%d is a prime. " "number !!!\n", n);
     6c2:	8c e6       	ldi	r24, 0x6C	; 108
     6c4:	c8 2e       	mov	r12, r24
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     6ca:	16 c0       	rjmp	.+44     	; 0x6f8 <app_prime+0x62>
		if(is_prime(n)) {
     6cc:	ce 01       	movw	r24, r28
     6ce:	0e 94 2d 03 	call	0x65a	; 0x65a <is_prime>
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	81 f0       	breq	.+32     	; 0x6f6 <app_prime+0x60>
			count++;
     6d6:	0f 5f       	subi	r16, 0xFF	; 255
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime. " "number !!!\n", n);
     6da:	00 d0       	rcall	.+0      	; 0x6dc <app_prime+0x46>
     6dc:	0f 92       	push	r0
     6de:	ed b7       	in	r30, 0x3d	; 61
     6e0:	fe b7       	in	r31, 0x3e	; 62
     6e2:	d2 82       	std	Z+2, r13	; 0x02
     6e4:	c1 82       	std	Z+1, r12	; 0x01
     6e6:	d4 83       	std	Z+4, r29	; 0x04
     6e8:	c3 83       	std	Z+3, r28	; 0x03
     6ea:	0e 94 d5 05 	call	0xbaa	; 0xbaa <printf>
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     6f6:	21 96       	adiw	r28, 0x01	; 1
     6f8:	ec 16       	cp	r14, r28
     6fa:	fd 06       	cpc	r15, r29
     6fc:	3c f7       	brge	.-50     	; 0x6cc <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf( "%d is a prime. " "number !!!\n", n);
		}
	}
	printf("count = %d \n", count);
     6fe:	00 d0       	rcall	.+0      	; 0x700 <app_prime+0x6a>
     700:	0f 92       	push	r0
     702:	87 e8       	ldi	r24, 0x87	; 135
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	ed b7       	in	r30, 0x3d	; 61
     708:	fe b7       	in	r31, 0x3e	; 62
     70a:	92 83       	std	Z+2, r25	; 0x02
     70c:	81 83       	std	Z+1, r24	; 0x01
     70e:	14 83       	std	Z+4, r17	; 0x04
     710:	03 83       	std	Z+3, r16	; 0x03
     712:	0e 94 d5 05 	call	0xbaa	; 0xbaa <printf>
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
}
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

00000730 <main>:
#include "io.h" // IO
#include "prime.h" // 소수 찾기
#define E0T 0x04

int main()
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	c0 58       	subi	r28, 0x80	; 128
     73a:	d0 40       	sbci	r29, 0x00	; 0
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap; // cmd 배열 : 입력 내용 저장, cp 포인터 : 명령어, ap 포인터 : 인자

	uart_init(); // UART 통신을 설정 및 초기화
     746:	0e 94 ee 02 	call	0x5dc	; 0x5dc <uart_init>
	sei(); // 인터럽트 활성화
     74a:	78 94       	sei
	while(1) {
		printf("$ ");
     74c:	8b e0       	ldi	r24, 0x0B	; 11
     74e:	c8 2e       	mov	r12, r24
     750:	82 e0       	ldi	r24, 0x02	; 2
     752:	d8 2e       	mov	r13, r24
     754:	0f 92       	push	r0
     756:	0f 92       	push	r0
     758:	ed b7       	in	r30, 0x3d	; 61
     75a:	fe b7       	in	r31, 0x3e	; 62
     75c:	d2 82       	std	Z+2, r13	; 0x02
     75e:	c1 82       	std	Z+1, r12	; 0x01
     760:	0e 94 d5 05 	call	0xbaa	; 0xbaa <printf>
		if (fgets(cmd, sizeof(cmd), stdin) == NULL) // Enter의 입력 대기
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	40 91 2b 03 	lds	r20, 0x032B
     76c:	50 91 2c 03 	lds	r21, 0x032C
     770:	ce 01       	movw	r24, r28
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	60 e8       	ldi	r22, 0x80	; 128
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	0e 94 a1 05 	call	0xb42	; 0xb42 <fgets>
     77c:	00 97       	sbiw	r24, 0x00	; 0
     77e:	59 f1       	breq	.+86     	; 0x7d6 <main+0xa6>
			break;
		if((cp = strtok(cmd, "\n\r\t    ")) == NULL) continue; // \n\r\t 기준 토큰 분리 (명령어)
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	6e e0       	ldi	r22, 0x0E	; 14
     786:	72 e0       	ldi	r23, 0x02	; 2
     788:	0e 94 64 05 	call	0xac8	; 0xac8 <strtok>
     78c:	8c 01       	movw	r16, r24
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	09 f3       	breq	.-62     	; 0x754 <main+0x24>
		ap = strtok(NULL, "\n\r\t  "); // \n\r\t 기준 토큰 분리 (인자)
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	66 e1       	ldi	r22, 0x16	; 22
     798:	72 e0       	ldi	r23, 0x02	; 2
     79a:	0e 94 64 05 	call	0xac8	; 0xac8 <strtok>
     79e:	7c 01       	movw	r14, r24

		if(!strcmp(cp, "prime")) app_prime(ap); // prime 명령어 ap 인자 전달
     7a0:	c8 01       	movw	r24, r16
     7a2:	6c e1       	ldi	r22, 0x1C	; 28
     7a4:	72 e0       	ldi	r23, 0x02	; 2
     7a6:	0e 94 69 05 	call	0xad2	; 0xad2 <strcmp>
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	21 f4       	brne	.+8      	; 0x7b6 <main+0x86>
     7ae:	c7 01       	movw	r24, r14
     7b0:	0e 94 4b 03 	call	0x696	; 0x696 <app_prime>
     7b4:	cf cf       	rjmp	.-98     	; 0x754 <main+0x24>
		else if (!strcmp(cp, "list" )) app_list(ap); // list 명령어 ap 인자 전달
     7b6:	c8 01       	movw	r24, r16
     7b8:	62 e2       	ldi	r22, 0x22	; 34
     7ba:	72 e0       	ldi	r23, 0x02	; 2
     7bc:	0e 94 69 05 	call	0xad2	; 0xad2 <strcmp>
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	21 f4       	brne	.+8      	; 0x7cc <main+0x9c>
     7c4:	c7 01       	movw	r24, r14
     7c6:	0e 94 76 01 	call	0x2ec	; 0x2ec <app_list>
     7ca:	c4 cf       	rjmp	.-120    	; 0x754 <main+0x24>
		else						printf("Unknown command ...\n");
     7cc:	87 e2       	ldi	r24, 0x27	; 39
     7ce:	92 e0       	ldi	r25, 0x02	; 2
     7d0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <puts>
     7d4:	bf cf       	rjmp	.-130    	; 0x754 <main+0x24>
	}
	printf( "logout, good bye !!!\n");
     7d6:	8b e3       	ldi	r24, 0x3B	; 59
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	0e 94 ee 05 	call	0xbdc	; 0xbdc <puts>
     7de:	ff cf       	rjmp	.-2      	; 0x7de <main+0xae>

000007e0 <__divmodhi4>:
     7e0:	97 fb       	bst	r25, 7
     7e2:	09 2e       	mov	r0, r25
     7e4:	07 26       	eor	r0, r23
     7e6:	0a d0       	rcall	.+20     	; 0x7fc <__divmodhi4_neg1>
     7e8:	77 fd       	sbrc	r23, 7
     7ea:	04 d0       	rcall	.+8      	; 0x7f4 <__divmodhi4_neg2>
     7ec:	0c d0       	rcall	.+24     	; 0x806 <__udivmodhi4>
     7ee:	06 d0       	rcall	.+12     	; 0x7fc <__divmodhi4_neg1>
     7f0:	00 20       	and	r0, r0
     7f2:	1a f4       	brpl	.+6      	; 0x7fa <__divmodhi4_exit>

000007f4 <__divmodhi4_neg2>:
     7f4:	70 95       	com	r23
     7f6:	61 95       	neg	r22
     7f8:	7f 4f       	sbci	r23, 0xFF	; 255

000007fa <__divmodhi4_exit>:
     7fa:	08 95       	ret

000007fc <__divmodhi4_neg1>:
     7fc:	f6 f7       	brtc	.-4      	; 0x7fa <__divmodhi4_exit>
     7fe:	90 95       	com	r25
     800:	81 95       	neg	r24
     802:	9f 4f       	sbci	r25, 0xFF	; 255
     804:	08 95       	ret

00000806 <__udivmodhi4>:
     806:	aa 1b       	sub	r26, r26
     808:	bb 1b       	sub	r27, r27
     80a:	51 e1       	ldi	r21, 0x11	; 17
     80c:	07 c0       	rjmp	.+14     	; 0x81c <__udivmodhi4_ep>

0000080e <__udivmodhi4_loop>:
     80e:	aa 1f       	adc	r26, r26
     810:	bb 1f       	adc	r27, r27
     812:	a6 17       	cp	r26, r22
     814:	b7 07       	cpc	r27, r23
     816:	10 f0       	brcs	.+4      	; 0x81c <__udivmodhi4_ep>
     818:	a6 1b       	sub	r26, r22
     81a:	b7 0b       	sbc	r27, r23

0000081c <__udivmodhi4_ep>:
     81c:	88 1f       	adc	r24, r24
     81e:	99 1f       	adc	r25, r25
     820:	5a 95       	dec	r21
     822:	a9 f7       	brne	.-22     	; 0x80e <__udivmodhi4_loop>
     824:	80 95       	com	r24
     826:	90 95       	com	r25
     828:	bc 01       	movw	r22, r24
     82a:	cd 01       	movw	r24, r26
     82c:	08 95       	ret

0000082e <malloc>:
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	ac 01       	movw	r20, r24
     834:	82 30       	cpi	r24, 0x02	; 2
     836:	91 05       	cpc	r25, r1
     838:	10 f4       	brcc	.+4      	; 0x83e <malloc+0x10>
     83a:	42 e0       	ldi	r20, 0x02	; 2
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	e0 91 29 03 	lds	r30, 0x0329
     842:	f0 91 2a 03 	lds	r31, 0x032A
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	24 c0       	rjmp	.+72     	; 0x898 <malloc+0x6a>
     850:	80 81       	ld	r24, Z
     852:	91 81       	ldd	r25, Z+1	; 0x01
     854:	84 17       	cp	r24, r20
     856:	95 07       	cpc	r25, r21
     858:	d0 f0       	brcs	.+52     	; 0x88e <malloc+0x60>
     85a:	84 17       	cp	r24, r20
     85c:	95 07       	cpc	r25, r21
     85e:	71 f4       	brne	.+28     	; 0x87c <malloc+0x4e>
     860:	82 81       	ldd	r24, Z+2	; 0x02
     862:	93 81       	ldd	r25, Z+3	; 0x03
     864:	10 97       	sbiw	r26, 0x00	; 0
     866:	29 f0       	breq	.+10     	; 0x872 <malloc+0x44>
     868:	13 96       	adiw	r26, 0x03	; 3
     86a:	9c 93       	st	X, r25
     86c:	8e 93       	st	-X, r24
     86e:	12 97       	sbiw	r26, 0x02	; 2
     870:	2c c0       	rjmp	.+88     	; 0x8ca <malloc+0x9c>
     872:	90 93 2a 03 	sts	0x032A, r25
     876:	80 93 29 03 	sts	0x0329, r24
     87a:	27 c0       	rjmp	.+78     	; 0x8ca <malloc+0x9c>
     87c:	21 15       	cp	r18, r1
     87e:	31 05       	cpc	r19, r1
     880:	19 f0       	breq	.+6      	; 0x888 <malloc+0x5a>
     882:	82 17       	cp	r24, r18
     884:	93 07       	cpc	r25, r19
     886:	18 f4       	brcc	.+6      	; 0x88e <malloc+0x60>
     888:	9c 01       	movw	r18, r24
     88a:	bd 01       	movw	r22, r26
     88c:	ef 01       	movw	r28, r30
     88e:	92 81       	ldd	r25, Z+2	; 0x02
     890:	83 81       	ldd	r24, Z+3	; 0x03
     892:	df 01       	movw	r26, r30
     894:	e9 2f       	mov	r30, r25
     896:	f8 2f       	mov	r31, r24
     898:	30 97       	sbiw	r30, 0x00	; 0
     89a:	d1 f6       	brne	.-76     	; 0x850 <malloc+0x22>
     89c:	21 15       	cp	r18, r1
     89e:	31 05       	cpc	r19, r1
     8a0:	f9 f0       	breq	.+62     	; 0x8e0 <malloc+0xb2>
     8a2:	c9 01       	movw	r24, r18
     8a4:	84 1b       	sub	r24, r20
     8a6:	95 0b       	sbc	r25, r21
     8a8:	84 30       	cpi	r24, 0x04	; 4
     8aa:	91 05       	cpc	r25, r1
     8ac:	80 f4       	brcc	.+32     	; 0x8ce <malloc+0xa0>
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	9b 81       	ldd	r25, Y+3	; 0x03
     8b2:	61 15       	cp	r22, r1
     8b4:	71 05       	cpc	r23, r1
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <malloc+0x92>
     8b8:	fb 01       	movw	r30, r22
     8ba:	93 83       	std	Z+3, r25	; 0x03
     8bc:	82 83       	std	Z+2, r24	; 0x02
     8be:	04 c0       	rjmp	.+8      	; 0x8c8 <malloc+0x9a>
     8c0:	90 93 2a 03 	sts	0x032A, r25
     8c4:	80 93 29 03 	sts	0x0329, r24
     8c8:	fe 01       	movw	r30, r28
     8ca:	32 96       	adiw	r30, 0x02	; 2
     8cc:	42 c0       	rjmp	.+132    	; 0x952 <malloc+0x124>
     8ce:	fe 01       	movw	r30, r28
     8d0:	e8 0f       	add	r30, r24
     8d2:	f9 1f       	adc	r31, r25
     8d4:	41 93       	st	Z+, r20
     8d6:	51 93       	st	Z+, r21
     8d8:	02 97       	sbiw	r24, 0x02	; 2
     8da:	99 83       	std	Y+1, r25	; 0x01
     8dc:	88 83       	st	Y, r24
     8de:	39 c0       	rjmp	.+114    	; 0x952 <malloc+0x124>
     8e0:	80 91 27 03 	lds	r24, 0x0327
     8e4:	90 91 28 03 	lds	r25, 0x0328
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	41 f4       	brne	.+16     	; 0x8fc <malloc+0xce>
     8ec:	80 91 96 02 	lds	r24, 0x0296
     8f0:	90 91 97 02 	lds	r25, 0x0297
     8f4:	90 93 28 03 	sts	0x0328, r25
     8f8:	80 93 27 03 	sts	0x0327, r24
     8fc:	20 91 94 02 	lds	r18, 0x0294
     900:	30 91 95 02 	lds	r19, 0x0295
     904:	21 15       	cp	r18, r1
     906:	31 05       	cpc	r19, r1
     908:	41 f4       	brne	.+16     	; 0x91a <malloc+0xec>
     90a:	2d b7       	in	r18, 0x3d	; 61
     90c:	3e b7       	in	r19, 0x3e	; 62
     90e:	80 91 98 02 	lds	r24, 0x0298
     912:	90 91 99 02 	lds	r25, 0x0299
     916:	28 1b       	sub	r18, r24
     918:	39 0b       	sbc	r19, r25
     91a:	e0 91 27 03 	lds	r30, 0x0327
     91e:	f0 91 28 03 	lds	r31, 0x0328
     922:	e2 17       	cp	r30, r18
     924:	f3 07       	cpc	r31, r19
     926:	98 f4       	brcc	.+38     	; 0x94e <malloc+0x120>
     928:	2e 1b       	sub	r18, r30
     92a:	3f 0b       	sbc	r19, r31
     92c:	24 17       	cp	r18, r20
     92e:	35 07       	cpc	r19, r21
     930:	70 f0       	brcs	.+28     	; 0x94e <malloc+0x120>
     932:	ca 01       	movw	r24, r20
     934:	02 96       	adiw	r24, 0x02	; 2
     936:	28 17       	cp	r18, r24
     938:	39 07       	cpc	r19, r25
     93a:	48 f0       	brcs	.+18     	; 0x94e <malloc+0x120>
     93c:	8e 0f       	add	r24, r30
     93e:	9f 1f       	adc	r25, r31
     940:	90 93 28 03 	sts	0x0328, r25
     944:	80 93 27 03 	sts	0x0327, r24
     948:	41 93       	st	Z+, r20
     94a:	51 93       	st	Z+, r21
     94c:	02 c0       	rjmp	.+4      	; 0x952 <malloc+0x124>
     94e:	e0 e0       	ldi	r30, 0x00	; 0
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	cf 01       	movw	r24, r30
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <free>:
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	9c 01       	movw	r18, r24
     964:	00 97       	sbiw	r24, 0x00	; 0
     966:	09 f4       	brne	.+2      	; 0x96a <free+0x10>
     968:	8c c0       	rjmp	.+280    	; 0xa82 <free+0x128>
     96a:	dc 01       	movw	r26, r24
     96c:	12 97       	sbiw	r26, 0x02	; 2
     96e:	13 96       	adiw	r26, 0x03	; 3
     970:	1c 92       	st	X, r1
     972:	1e 92       	st	-X, r1
     974:	12 97       	sbiw	r26, 0x02	; 2
     976:	60 91 29 03 	lds	r22, 0x0329
     97a:	70 91 2a 03 	lds	r23, 0x032A
     97e:	61 15       	cp	r22, r1
     980:	71 05       	cpc	r23, r1
     982:	89 f4       	brne	.+34     	; 0x9a6 <free+0x4c>
     984:	8d 91       	ld	r24, X+
     986:	9c 91       	ld	r25, X
     988:	11 97       	sbiw	r26, 0x01	; 1
     98a:	82 0f       	add	r24, r18
     98c:	93 1f       	adc	r25, r19
     98e:	20 91 27 03 	lds	r18, 0x0327
     992:	30 91 28 03 	lds	r19, 0x0328
     996:	28 17       	cp	r18, r24
     998:	39 07       	cpc	r19, r25
     99a:	69 f5       	brne	.+90     	; 0x9f6 <free+0x9c>
     99c:	b0 93 28 03 	sts	0x0328, r27
     9a0:	a0 93 27 03 	sts	0x0327, r26
     9a4:	6e c0       	rjmp	.+220    	; 0xa82 <free+0x128>
     9a6:	fb 01       	movw	r30, r22
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <free+0x56>
     9ae:	fc 01       	movw	r30, r24
     9b0:	ea 17       	cp	r30, r26
     9b2:	fb 07       	cpc	r31, r27
     9b4:	30 f4       	brcc	.+12     	; 0x9c2 <free+0x68>
     9b6:	82 81       	ldd	r24, Z+2	; 0x02
     9b8:	93 81       	ldd	r25, Z+3	; 0x03
     9ba:	af 01       	movw	r20, r30
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	b9 f7       	brne	.-18     	; 0x9ae <free+0x54>
     9c0:	1f c0       	rjmp	.+62     	; 0xa00 <free+0xa6>
     9c2:	e9 01       	movw	r28, r18
     9c4:	22 97       	sbiw	r28, 0x02	; 2
     9c6:	fb 83       	std	Y+3, r31	; 0x03
     9c8:	ea 83       	std	Y+2, r30	; 0x02
     9ca:	08 81       	ld	r16, Y
     9cc:	19 81       	ldd	r17, Y+1	; 0x01
     9ce:	c9 01       	movw	r24, r18
     9d0:	80 0f       	add	r24, r16
     9d2:	91 1f       	adc	r25, r17
     9d4:	8e 17       	cp	r24, r30
     9d6:	9f 07       	cpc	r25, r31
     9d8:	59 f4       	brne	.+22     	; 0x9f0 <free+0x96>
     9da:	80 81       	ld	r24, Z
     9dc:	91 81       	ldd	r25, Z+1	; 0x01
     9de:	80 0f       	add	r24, r16
     9e0:	91 1f       	adc	r25, r17
     9e2:	02 96       	adiw	r24, 0x02	; 2
     9e4:	99 83       	std	Y+1, r25	; 0x01
     9e6:	88 83       	st	Y, r24
     9e8:	82 81       	ldd	r24, Z+2	; 0x02
     9ea:	93 81       	ldd	r25, Z+3	; 0x03
     9ec:	9b 83       	std	Y+3, r25	; 0x03
     9ee:	8a 83       	std	Y+2, r24	; 0x02
     9f0:	41 15       	cp	r20, r1
     9f2:	51 05       	cpc	r21, r1
     9f4:	29 f4       	brne	.+10     	; 0xa00 <free+0xa6>
     9f6:	b0 93 2a 03 	sts	0x032A, r27
     9fa:	a0 93 29 03 	sts	0x0329, r26
     9fe:	41 c0       	rjmp	.+130    	; 0xa82 <free+0x128>
     a00:	fa 01       	movw	r30, r20
     a02:	b3 83       	std	Z+3, r27	; 0x03
     a04:	a2 83       	std	Z+2, r26	; 0x02
     a06:	c1 91       	ld	r28, Z+
     a08:	d1 91       	ld	r29, Z+
     a0a:	ec 0f       	add	r30, r28
     a0c:	fd 1f       	adc	r31, r29
     a0e:	ae 17       	cp	r26, r30
     a10:	bf 07       	cpc	r27, r31
     a12:	81 f4       	brne	.+32     	; 0xa34 <free+0xda>
     a14:	f9 01       	movw	r30, r18
     a16:	92 91       	ld	r25, -Z
     a18:	82 91       	ld	r24, -Z
     a1a:	8c 0f       	add	r24, r28
     a1c:	9d 1f       	adc	r25, r29
     a1e:	02 96       	adiw	r24, 0x02	; 2
     a20:	da 01       	movw	r26, r20
     a22:	11 96       	adiw	r26, 0x01	; 1
     a24:	9c 93       	st	X, r25
     a26:	8e 93       	st	-X, r24
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	13 96       	adiw	r26, 0x03	; 3
     a2e:	9c 93       	st	X, r25
     a30:	8e 93       	st	-X, r24
     a32:	12 97       	sbiw	r26, 0x02	; 2
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <free+0xe4>
     a3a:	fb 01       	movw	r30, r22
     a3c:	bc 01       	movw	r22, r24
     a3e:	db 01       	movw	r26, r22
     a40:	12 96       	adiw	r26, 0x02	; 2
     a42:	8d 91       	ld	r24, X+
     a44:	9c 91       	ld	r25, X
     a46:	13 97       	sbiw	r26, 0x03	; 3
     a48:	00 97       	sbiw	r24, 0x00	; 0
     a4a:	b9 f7       	brne	.-18     	; 0xa3a <free+0xe0>
     a4c:	cb 01       	movw	r24, r22
     a4e:	02 96       	adiw	r24, 0x02	; 2
     a50:	2d 91       	ld	r18, X+
     a52:	3c 91       	ld	r19, X
     a54:	11 97       	sbiw	r26, 0x01	; 1
     a56:	82 0f       	add	r24, r18
     a58:	93 1f       	adc	r25, r19
     a5a:	20 91 27 03 	lds	r18, 0x0327
     a5e:	30 91 28 03 	lds	r19, 0x0328
     a62:	28 17       	cp	r18, r24
     a64:	39 07       	cpc	r19, r25
     a66:	69 f4       	brne	.+26     	; 0xa82 <free+0x128>
     a68:	30 97       	sbiw	r30, 0x00	; 0
     a6a:	29 f4       	brne	.+10     	; 0xa76 <free+0x11c>
     a6c:	10 92 2a 03 	sts	0x032A, r1
     a70:	10 92 29 03 	sts	0x0329, r1
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <free+0x120>
     a76:	13 82       	std	Z+3, r1	; 0x03
     a78:	12 82       	std	Z+2, r1	; 0x02
     a7a:	70 93 28 03 	sts	0x0328, r23
     a7e:	60 93 27 03 	sts	0x0327, r22
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	08 95       	ret

00000a8c <atoi>:
     a8c:	fc 01       	movw	r30, r24
     a8e:	88 27       	eor	r24, r24
     a90:	99 27       	eor	r25, r25
     a92:	e8 94       	clt
     a94:	21 91       	ld	r18, Z+
     a96:	20 32       	cpi	r18, 0x20	; 32
     a98:	e9 f3       	breq	.-6      	; 0xa94 <atoi+0x8>
     a9a:	29 30       	cpi	r18, 0x09	; 9
     a9c:	10 f0       	brcs	.+4      	; 0xaa2 <atoi+0x16>
     a9e:	2e 30       	cpi	r18, 0x0E	; 14
     aa0:	c8 f3       	brcs	.-14     	; 0xa94 <atoi+0x8>
     aa2:	2b 32       	cpi	r18, 0x2B	; 43
     aa4:	41 f0       	breq	.+16     	; 0xab6 <atoi+0x2a>
     aa6:	2d 32       	cpi	r18, 0x2D	; 45
     aa8:	39 f4       	brne	.+14     	; 0xab8 <atoi+0x2c>
     aaa:	68 94       	set
     aac:	04 c0       	rjmp	.+8      	; 0xab6 <atoi+0x2a>
     aae:	0e 94 99 05 	call	0xb32	; 0xb32 <__mulhi_const_10>
     ab2:	82 0f       	add	r24, r18
     ab4:	91 1d       	adc	r25, r1
     ab6:	21 91       	ld	r18, Z+
     ab8:	20 53       	subi	r18, 0x30	; 48
     aba:	2a 30       	cpi	r18, 0x0A	; 10
     abc:	c0 f3       	brcs	.-16     	; 0xaae <atoi+0x22>
     abe:	1e f4       	brtc	.+6      	; 0xac6 <atoi+0x3a>
     ac0:	90 95       	com	r25
     ac2:	81 95       	neg	r24
     ac4:	9f 4f       	sbci	r25, 0xFF	; 255
     ac6:	08 95       	ret

00000ac8 <strtok>:
     ac8:	4c e9       	ldi	r20, 0x9C	; 156
     aca:	52 e0       	ldi	r21, 0x02	; 2
     acc:	0e 94 72 05 	call	0xae4	; 0xae4 <strtok_r>
     ad0:	08 95       	ret

00000ad2 <strcmp>:
     ad2:	fb 01       	movw	r30, r22
     ad4:	dc 01       	movw	r26, r24
     ad6:	8d 91       	ld	r24, X+
     ad8:	01 90       	ld	r0, Z+
     ada:	80 19       	sub	r24, r0
     adc:	01 10       	cpse	r0, r1
     ade:	d9 f3       	breq	.-10     	; 0xad6 <strcmp+0x4>
     ae0:	99 0b       	sbc	r25, r25
     ae2:	08 95       	ret

00000ae4 <strtok_r>:
     ae4:	fa 01       	movw	r30, r20
     ae6:	a1 91       	ld	r26, Z+
     ae8:	b0 81       	ld	r27, Z
     aea:	00 97       	sbiw	r24, 0x00	; 0
     aec:	19 f4       	brne	.+6      	; 0xaf4 <strtok_r+0x10>
     aee:	10 97       	sbiw	r26, 0x00	; 0
     af0:	e1 f0       	breq	.+56     	; 0xb2a <strtok_r+0x46>
     af2:	cd 01       	movw	r24, r26
     af4:	dc 01       	movw	r26, r24
     af6:	cd 01       	movw	r24, r26
     af8:	0d 90       	ld	r0, X+
     afa:	00 20       	and	r0, r0
     afc:	11 f4       	brne	.+4      	; 0xb02 <strtok_r+0x1e>
     afe:	c0 01       	movw	r24, r0
     b00:	13 c0       	rjmp	.+38     	; 0xb28 <strtok_r+0x44>
     b02:	fb 01       	movw	r30, r22
     b04:	21 91       	ld	r18, Z+
     b06:	22 23       	and	r18, r18
     b08:	19 f0       	breq	.+6      	; 0xb10 <strtok_r+0x2c>
     b0a:	20 15       	cp	r18, r0
     b0c:	d9 f7       	brne	.-10     	; 0xb04 <strtok_r+0x20>
     b0e:	f3 cf       	rjmp	.-26     	; 0xaf6 <strtok_r+0x12>
     b10:	fb 01       	movw	r30, r22
     b12:	21 91       	ld	r18, Z+
     b14:	20 15       	cp	r18, r0
     b16:	19 f4       	brne	.+6      	; 0xb1e <strtok_r+0x3a>
     b18:	1e 92       	st	-X, r1
     b1a:	11 96       	adiw	r26, 0x01	; 1
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <strtok_r+0x46>
     b1e:	22 23       	and	r18, r18
     b20:	c1 f7       	brne	.-16     	; 0xb12 <strtok_r+0x2e>
     b22:	0d 90       	ld	r0, X+
     b24:	00 20       	and	r0, r0
     b26:	a1 f7       	brne	.-24     	; 0xb10 <strtok_r+0x2c>
     b28:	d0 01       	movw	r26, r0
     b2a:	fa 01       	movw	r30, r20
     b2c:	a1 93       	st	Z+, r26
     b2e:	b0 83       	st	Z, r27
     b30:	08 95       	ret

00000b32 <__mulhi_const_10>:
     b32:	7a e0       	ldi	r23, 0x0A	; 10
     b34:	97 9f       	mul	r25, r23
     b36:	90 2d       	mov	r25, r0
     b38:	87 9f       	mul	r24, r23
     b3a:	80 2d       	mov	r24, r0
     b3c:	91 0d       	add	r25, r1
     b3e:	11 24       	eor	r1, r1
     b40:	08 95       	ret

00000b42 <fgets>:
     b42:	cf 92       	push	r12
     b44:	df 92       	push	r13
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	8c 01       	movw	r16, r24
     b54:	6a 01       	movw	r12, r20
     b56:	fa 01       	movw	r30, r20
     b58:	83 81       	ldd	r24, Z+3	; 0x03
     b5a:	80 ff       	sbrs	r24, 0
     b5c:	1a c0       	rjmp	.+52     	; 0xb92 <fgets+0x50>
     b5e:	16 16       	cp	r1, r22
     b60:	17 06       	cpc	r1, r23
     b62:	bc f4       	brge	.+46     	; 0xb92 <fgets+0x50>
     b64:	7b 01       	movw	r14, r22
     b66:	e8 01       	movw	r28, r16
     b68:	0e c0       	rjmp	.+28     	; 0xb86 <fgets+0x44>
     b6a:	c6 01       	movw	r24, r12
     b6c:	0e 94 39 08 	call	0x1072	; 0x1072 <fgetc>
     b70:	ff ef       	ldi	r31, 0xFF	; 255
     b72:	8f 3f       	cpi	r24, 0xFF	; 255
     b74:	9f 07       	cpc	r25, r31
     b76:	69 f0       	breq	.+26     	; 0xb92 <fgets+0x50>
     b78:	89 93       	st	Y+, r24
     b7a:	08 94       	sec
     b7c:	e1 08       	sbc	r14, r1
     b7e:	f1 08       	sbc	r15, r1
     b80:	8a 30       	cpi	r24, 0x0A	; 10
     b82:	91 05       	cpc	r25, r1
     b84:	21 f0       	breq	.+8      	; 0xb8e <fgets+0x4c>
     b86:	21 e0       	ldi	r18, 0x01	; 1
     b88:	e2 16       	cp	r14, r18
     b8a:	f1 04       	cpc	r15, r1
     b8c:	71 f7       	brne	.-36     	; 0xb6a <fgets+0x28>
     b8e:	18 82       	st	Y, r1
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <fgets+0x54>
     b92:	00 e0       	ldi	r16, 0x00	; 0
     b94:	10 e0       	ldi	r17, 0x00	; 0
     b96:	c8 01       	movw	r24, r16
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	08 95       	ret

00000baa <printf>:
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	fe 01       	movw	r30, r28
     bb4:	36 96       	adiw	r30, 0x06	; 6
     bb6:	61 91       	ld	r22, Z+
     bb8:	71 91       	ld	r23, Z+
     bba:	80 91 2d 03 	lds	r24, 0x032D
     bbe:	90 91 2e 03 	lds	r25, 0x032E
     bc2:	af 01       	movw	r20, r30
     bc4:	0e 94 1c 06 	call	0xc38	; 0xc38 <vfprintf>
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret

00000bce <putchar>:
     bce:	60 91 2d 03 	lds	r22, 0x032D
     bd2:	70 91 2e 03 	lds	r23, 0x032E
     bd6:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
     bda:	08 95       	ret

00000bdc <puts>:
     bdc:	0f 93       	push	r16
     bde:	1f 93       	push	r17
     be0:	cf 93       	push	r28
     be2:	df 93       	push	r29
     be4:	8c 01       	movw	r16, r24
     be6:	e0 91 2d 03 	lds	r30, 0x032D
     bea:	f0 91 2e 03 	lds	r31, 0x032E
     bee:	83 81       	ldd	r24, Z+3	; 0x03
     bf0:	81 ff       	sbrs	r24, 1
     bf2:	1a c0       	rjmp	.+52     	; 0xc28 <puts+0x4c>
     bf4:	c0 e0       	ldi	r28, 0x00	; 0
     bf6:	d0 e0       	ldi	r29, 0x00	; 0
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <puts+0x28>
     bfa:	19 95       	eicall
     bfc:	00 97       	sbiw	r24, 0x00	; 0
     bfe:	11 f0       	breq	.+4      	; 0xc04 <puts+0x28>
     c00:	cf ef       	ldi	r28, 0xFF	; 255
     c02:	df ef       	ldi	r29, 0xFF	; 255
     c04:	f8 01       	movw	r30, r16
     c06:	81 91       	ld	r24, Z+
     c08:	8f 01       	movw	r16, r30
     c0a:	60 91 2d 03 	lds	r22, 0x032D
     c0e:	70 91 2e 03 	lds	r23, 0x032E
     c12:	db 01       	movw	r26, r22
     c14:	18 96       	adiw	r26, 0x08	; 8
     c16:	ed 91       	ld	r30, X+
     c18:	fc 91       	ld	r31, X
     c1a:	19 97       	sbiw	r26, 0x09	; 9
     c1c:	88 23       	and	r24, r24
     c1e:	69 f7       	brne	.-38     	; 0xbfa <puts+0x1e>
     c20:	8a e0       	ldi	r24, 0x0A	; 10
     c22:	19 95       	eicall
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	11 f0       	breq	.+4      	; 0xc2c <puts+0x50>
     c28:	cf ef       	ldi	r28, 0xFF	; 255
     c2a:	df ef       	ldi	r29, 0xFF	; 255
     c2c:	ce 01       	movw	r24, r28
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	08 95       	ret

00000c38 <vfprintf>:
     c38:	2f 92       	push	r2
     c3a:	3f 92       	push	r3
     c3c:	4f 92       	push	r4
     c3e:	5f 92       	push	r5
     c40:	6f 92       	push	r6
     c42:	7f 92       	push	r7
     c44:	8f 92       	push	r8
     c46:	9f 92       	push	r9
     c48:	af 92       	push	r10
     c4a:	bf 92       	push	r11
     c4c:	cf 92       	push	r12
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	2d 97       	sbiw	r28, 0x0d	; 13
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	3c 01       	movw	r6, r24
     c6e:	7d 87       	std	Y+13, r23	; 0x0d
     c70:	6c 87       	std	Y+12, r22	; 0x0c
     c72:	5a 01       	movw	r10, r20
     c74:	fc 01       	movw	r30, r24
     c76:	17 82       	std	Z+7, r1	; 0x07
     c78:	16 82       	std	Z+6, r1	; 0x06
     c7a:	83 81       	ldd	r24, Z+3	; 0x03
     c7c:	81 ff       	sbrs	r24, 1
     c7e:	c8 c1       	rjmp	.+912    	; 0x1010 <vfprintf+0x3d8>
     c80:	2e 01       	movw	r4, r28
     c82:	08 94       	sec
     c84:	41 1c       	adc	r4, r1
     c86:	51 1c       	adc	r5, r1
     c88:	f3 01       	movw	r30, r6
     c8a:	93 81       	ldd	r25, Z+3	; 0x03
     c8c:	ec 85       	ldd	r30, Y+12	; 0x0c
     c8e:	fd 85       	ldd	r31, Y+13	; 0x0d
     c90:	93 fd       	sbrc	r25, 3
     c92:	85 91       	lpm	r24, Z+
     c94:	93 ff       	sbrs	r25, 3
     c96:	81 91       	ld	r24, Z+
     c98:	fd 87       	std	Y+13, r31	; 0x0d
     c9a:	ec 87       	std	Y+12, r30	; 0x0c
     c9c:	88 23       	and	r24, r24
     c9e:	09 f4       	brne	.+2      	; 0xca2 <vfprintf+0x6a>
     ca0:	b3 c1       	rjmp	.+870    	; 0x1008 <vfprintf+0x3d0>
     ca2:	85 32       	cpi	r24, 0x25	; 37
     ca4:	41 f4       	brne	.+16     	; 0xcb6 <vfprintf+0x7e>
     ca6:	93 fd       	sbrc	r25, 3
     ca8:	85 91       	lpm	r24, Z+
     caa:	93 ff       	sbrs	r25, 3
     cac:	81 91       	ld	r24, Z+
     cae:	fd 87       	std	Y+13, r31	; 0x0d
     cb0:	ec 87       	std	Y+12, r30	; 0x0c
     cb2:	85 32       	cpi	r24, 0x25	; 37
     cb4:	29 f4       	brne	.+10     	; 0xcc0 <vfprintf+0x88>
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	b3 01       	movw	r22, r6
     cba:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
     cbe:	e4 cf       	rjmp	.-56     	; 0xc88 <vfprintf+0x50>
     cc0:	ff 24       	eor	r15, r15
     cc2:	ee 24       	eor	r14, r14
     cc4:	10 e0       	ldi	r17, 0x00	; 0
     cc6:	10 32       	cpi	r17, 0x20	; 32
     cc8:	b0 f4       	brcc	.+44     	; 0xcf6 <vfprintf+0xbe>
     cca:	8b 32       	cpi	r24, 0x2B	; 43
     ccc:	69 f0       	breq	.+26     	; 0xce8 <vfprintf+0xb0>
     cce:	8c 32       	cpi	r24, 0x2C	; 44
     cd0:	28 f4       	brcc	.+10     	; 0xcdc <vfprintf+0xa4>
     cd2:	80 32       	cpi	r24, 0x20	; 32
     cd4:	51 f0       	breq	.+20     	; 0xcea <vfprintf+0xb2>
     cd6:	83 32       	cpi	r24, 0x23	; 35
     cd8:	71 f4       	brne	.+28     	; 0xcf6 <vfprintf+0xbe>
     cda:	0b c0       	rjmp	.+22     	; 0xcf2 <vfprintf+0xba>
     cdc:	8d 32       	cpi	r24, 0x2D	; 45
     cde:	39 f0       	breq	.+14     	; 0xcee <vfprintf+0xb6>
     ce0:	80 33       	cpi	r24, 0x30	; 48
     ce2:	49 f4       	brne	.+18     	; 0xcf6 <vfprintf+0xbe>
     ce4:	11 60       	ori	r17, 0x01	; 1
     ce6:	2c c0       	rjmp	.+88     	; 0xd40 <vfprintf+0x108>
     ce8:	12 60       	ori	r17, 0x02	; 2
     cea:	14 60       	ori	r17, 0x04	; 4
     cec:	29 c0       	rjmp	.+82     	; 0xd40 <vfprintf+0x108>
     cee:	18 60       	ori	r17, 0x08	; 8
     cf0:	27 c0       	rjmp	.+78     	; 0xd40 <vfprintf+0x108>
     cf2:	10 61       	ori	r17, 0x10	; 16
     cf4:	25 c0       	rjmp	.+74     	; 0xd40 <vfprintf+0x108>
     cf6:	17 fd       	sbrc	r17, 7
     cf8:	2e c0       	rjmp	.+92     	; 0xd56 <vfprintf+0x11e>
     cfa:	28 2f       	mov	r18, r24
     cfc:	20 53       	subi	r18, 0x30	; 48
     cfe:	2a 30       	cpi	r18, 0x0A	; 10
     d00:	98 f4       	brcc	.+38     	; 0xd28 <vfprintf+0xf0>
     d02:	16 ff       	sbrs	r17, 6
     d04:	08 c0       	rjmp	.+16     	; 0xd16 <vfprintf+0xde>
     d06:	8f 2d       	mov	r24, r15
     d08:	88 0f       	add	r24, r24
     d0a:	f8 2e       	mov	r15, r24
     d0c:	ff 0c       	add	r15, r15
     d0e:	ff 0c       	add	r15, r15
     d10:	f8 0e       	add	r15, r24
     d12:	f2 0e       	add	r15, r18
     d14:	15 c0       	rjmp	.+42     	; 0xd40 <vfprintf+0x108>
     d16:	8e 2d       	mov	r24, r14
     d18:	88 0f       	add	r24, r24
     d1a:	e8 2e       	mov	r14, r24
     d1c:	ee 0c       	add	r14, r14
     d1e:	ee 0c       	add	r14, r14
     d20:	e8 0e       	add	r14, r24
     d22:	e2 0e       	add	r14, r18
     d24:	10 62       	ori	r17, 0x20	; 32
     d26:	0c c0       	rjmp	.+24     	; 0xd40 <vfprintf+0x108>
     d28:	8e 32       	cpi	r24, 0x2E	; 46
     d2a:	21 f4       	brne	.+8      	; 0xd34 <vfprintf+0xfc>
     d2c:	16 fd       	sbrc	r17, 6
     d2e:	6c c1       	rjmp	.+728    	; 0x1008 <vfprintf+0x3d0>
     d30:	10 64       	ori	r17, 0x40	; 64
     d32:	06 c0       	rjmp	.+12     	; 0xd40 <vfprintf+0x108>
     d34:	8c 36       	cpi	r24, 0x6C	; 108
     d36:	11 f4       	brne	.+4      	; 0xd3c <vfprintf+0x104>
     d38:	10 68       	ori	r17, 0x80	; 128
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <vfprintf+0x108>
     d3c:	88 36       	cpi	r24, 0x68	; 104
     d3e:	59 f4       	brne	.+22     	; 0xd56 <vfprintf+0x11e>
     d40:	ec 85       	ldd	r30, Y+12	; 0x0c
     d42:	fd 85       	ldd	r31, Y+13	; 0x0d
     d44:	93 fd       	sbrc	r25, 3
     d46:	85 91       	lpm	r24, Z+
     d48:	93 ff       	sbrs	r25, 3
     d4a:	81 91       	ld	r24, Z+
     d4c:	fd 87       	std	Y+13, r31	; 0x0d
     d4e:	ec 87       	std	Y+12, r30	; 0x0c
     d50:	88 23       	and	r24, r24
     d52:	09 f0       	breq	.+2      	; 0xd56 <vfprintf+0x11e>
     d54:	b8 cf       	rjmp	.-144    	; 0xcc6 <vfprintf+0x8e>
     d56:	98 2f       	mov	r25, r24
     d58:	95 54       	subi	r25, 0x45	; 69
     d5a:	93 30       	cpi	r25, 0x03	; 3
     d5c:	18 f0       	brcs	.+6      	; 0xd64 <vfprintf+0x12c>
     d5e:	90 52       	subi	r25, 0x20	; 32
     d60:	93 30       	cpi	r25, 0x03	; 3
     d62:	38 f4       	brcc	.+14     	; 0xd72 <vfprintf+0x13a>
     d64:	24 e0       	ldi	r18, 0x04	; 4
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	a2 0e       	add	r10, r18
     d6a:	b3 1e       	adc	r11, r19
     d6c:	3f e3       	ldi	r19, 0x3F	; 63
     d6e:	39 83       	std	Y+1, r19	; 0x01
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <vfprintf+0x158>
     d72:	83 36       	cpi	r24, 0x63	; 99
     d74:	31 f0       	breq	.+12     	; 0xd82 <vfprintf+0x14a>
     d76:	83 37       	cpi	r24, 0x73	; 115
     d78:	81 f0       	breq	.+32     	; 0xd9a <vfprintf+0x162>
     d7a:	83 35       	cpi	r24, 0x53	; 83
     d7c:	09 f0       	breq	.+2      	; 0xd80 <vfprintf+0x148>
     d7e:	5a c0       	rjmp	.+180    	; 0xe34 <vfprintf+0x1fc>
     d80:	22 c0       	rjmp	.+68     	; 0xdc6 <vfprintf+0x18e>
     d82:	f5 01       	movw	r30, r10
     d84:	80 81       	ld	r24, Z
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	22 e0       	ldi	r18, 0x02	; 2
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	a2 0e       	add	r10, r18
     d8e:	b3 1e       	adc	r11, r19
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	c2 2e       	mov	r12, r18
     d94:	d1 2c       	mov	r13, r1
     d96:	42 01       	movw	r8, r4
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <vfprintf+0x18a>
     d9a:	92 e0       	ldi	r25, 0x02	; 2
     d9c:	29 2e       	mov	r2, r25
     d9e:	31 2c       	mov	r3, r1
     da0:	2a 0c       	add	r2, r10
     da2:	3b 1c       	adc	r3, r11
     da4:	f5 01       	movw	r30, r10
     da6:	80 80       	ld	r8, Z
     da8:	91 80       	ldd	r9, Z+1	; 0x01
     daa:	16 ff       	sbrs	r17, 6
     dac:	03 c0       	rjmp	.+6      	; 0xdb4 <vfprintf+0x17c>
     dae:	6f 2d       	mov	r22, r15
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <vfprintf+0x180>
     db4:	6f ef       	ldi	r22, 0xFF	; 255
     db6:	7f ef       	ldi	r23, 0xFF	; 255
     db8:	c4 01       	movw	r24, r8
     dba:	0e 94 2e 08 	call	0x105c	; 0x105c <strnlen>
     dbe:	6c 01       	movw	r12, r24
     dc0:	51 01       	movw	r10, r2
     dc2:	1f 77       	andi	r17, 0x7F	; 127
     dc4:	15 c0       	rjmp	.+42     	; 0xdf0 <vfprintf+0x1b8>
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	28 2e       	mov	r2, r24
     dca:	31 2c       	mov	r3, r1
     dcc:	2a 0c       	add	r2, r10
     dce:	3b 1c       	adc	r3, r11
     dd0:	f5 01       	movw	r30, r10
     dd2:	80 80       	ld	r8, Z
     dd4:	91 80       	ldd	r9, Z+1	; 0x01
     dd6:	16 ff       	sbrs	r17, 6
     dd8:	03 c0       	rjmp	.+6      	; 0xde0 <vfprintf+0x1a8>
     dda:	6f 2d       	mov	r22, r15
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <vfprintf+0x1ac>
     de0:	6f ef       	ldi	r22, 0xFF	; 255
     de2:	7f ef       	ldi	r23, 0xFF	; 255
     de4:	c4 01       	movw	r24, r8
     de6:	0e 94 23 08 	call	0x1046	; 0x1046 <strnlen_P>
     dea:	6c 01       	movw	r12, r24
     dec:	10 68       	ori	r17, 0x80	; 128
     dee:	51 01       	movw	r10, r2
     df0:	13 fd       	sbrc	r17, 3
     df2:	1c c0       	rjmp	.+56     	; 0xe2c <vfprintf+0x1f4>
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <vfprintf+0x1ca>
     df6:	80 e2       	ldi	r24, 0x20	; 32
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	b3 01       	movw	r22, r6
     dfc:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
     e00:	ea 94       	dec	r14
     e02:	8e 2d       	mov	r24, r14
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	c8 16       	cp	r12, r24
     e08:	d9 06       	cpc	r13, r25
     e0a:	a8 f3       	brcs	.-22     	; 0xdf6 <vfprintf+0x1be>
     e0c:	0f c0       	rjmp	.+30     	; 0xe2c <vfprintf+0x1f4>
     e0e:	f4 01       	movw	r30, r8
     e10:	17 fd       	sbrc	r17, 7
     e12:	85 91       	lpm	r24, Z+
     e14:	17 ff       	sbrs	r17, 7
     e16:	81 91       	ld	r24, Z+
     e18:	4f 01       	movw	r8, r30
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	b3 01       	movw	r22, r6
     e1e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
     e22:	e1 10       	cpse	r14, r1
     e24:	ea 94       	dec	r14
     e26:	08 94       	sec
     e28:	c1 08       	sbc	r12, r1
     e2a:	d1 08       	sbc	r13, r1
     e2c:	c1 14       	cp	r12, r1
     e2e:	d1 04       	cpc	r13, r1
     e30:	71 f7       	brne	.-36     	; 0xe0e <vfprintf+0x1d6>
     e32:	e7 c0       	rjmp	.+462    	; 0x1002 <vfprintf+0x3ca>
     e34:	84 36       	cpi	r24, 0x64	; 100
     e36:	11 f0       	breq	.+4      	; 0xe3c <vfprintf+0x204>
     e38:	89 36       	cpi	r24, 0x69	; 105
     e3a:	51 f5       	brne	.+84     	; 0xe90 <vfprintf+0x258>
     e3c:	f5 01       	movw	r30, r10
     e3e:	17 ff       	sbrs	r17, 7
     e40:	07 c0       	rjmp	.+14     	; 0xe50 <vfprintf+0x218>
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	a2 81       	ldd	r26, Z+2	; 0x02
     e48:	b3 81       	ldd	r27, Z+3	; 0x03
     e4a:	24 e0       	ldi	r18, 0x04	; 4
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	08 c0       	rjmp	.+16     	; 0xe60 <vfprintf+0x228>
     e50:	80 81       	ld	r24, Z
     e52:	91 81       	ldd	r25, Z+1	; 0x01
     e54:	aa 27       	eor	r26, r26
     e56:	97 fd       	sbrc	r25, 7
     e58:	a0 95       	com	r26
     e5a:	ba 2f       	mov	r27, r26
     e5c:	22 e0       	ldi	r18, 0x02	; 2
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	a2 0e       	add	r10, r18
     e62:	b3 1e       	adc	r11, r19
     e64:	01 2f       	mov	r16, r17
     e66:	0f 76       	andi	r16, 0x6F	; 111
     e68:	b7 ff       	sbrs	r27, 7
     e6a:	08 c0       	rjmp	.+16     	; 0xe7c <vfprintf+0x244>
     e6c:	b0 95       	com	r27
     e6e:	a0 95       	com	r26
     e70:	90 95       	com	r25
     e72:	81 95       	neg	r24
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	af 4f       	sbci	r26, 0xFF	; 255
     e78:	bf 4f       	sbci	r27, 0xFF	; 255
     e7a:	00 68       	ori	r16, 0x80	; 128
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	a2 01       	movw	r20, r4
     e82:	2a e0       	ldi	r18, 0x0A	; 10
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	0e 94 a5 08 	call	0x114a	; 0x114a <__ultoa_invert>
     e8a:	d8 2e       	mov	r13, r24
     e8c:	d4 18       	sub	r13, r4
     e8e:	3f c0       	rjmp	.+126    	; 0xf0e <vfprintf+0x2d6>
     e90:	85 37       	cpi	r24, 0x75	; 117
     e92:	21 f4       	brne	.+8      	; 0xe9c <vfprintf+0x264>
     e94:	1f 7e       	andi	r17, 0xEF	; 239
     e96:	2a e0       	ldi	r18, 0x0A	; 10
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	20 c0       	rjmp	.+64     	; 0xedc <vfprintf+0x2a4>
     e9c:	19 7f       	andi	r17, 0xF9	; 249
     e9e:	8f 36       	cpi	r24, 0x6F	; 111
     ea0:	a9 f0       	breq	.+42     	; 0xecc <vfprintf+0x294>
     ea2:	80 37       	cpi	r24, 0x70	; 112
     ea4:	20 f4       	brcc	.+8      	; 0xeae <vfprintf+0x276>
     ea6:	88 35       	cpi	r24, 0x58	; 88
     ea8:	09 f0       	breq	.+2      	; 0xeac <vfprintf+0x274>
     eaa:	ae c0       	rjmp	.+348    	; 0x1008 <vfprintf+0x3d0>
     eac:	0b c0       	rjmp	.+22     	; 0xec4 <vfprintf+0x28c>
     eae:	80 37       	cpi	r24, 0x70	; 112
     eb0:	21 f0       	breq	.+8      	; 0xeba <vfprintf+0x282>
     eb2:	88 37       	cpi	r24, 0x78	; 120
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <vfprintf+0x280>
     eb6:	a8 c0       	rjmp	.+336    	; 0x1008 <vfprintf+0x3d0>
     eb8:	01 c0       	rjmp	.+2      	; 0xebc <vfprintf+0x284>
     eba:	10 61       	ori	r17, 0x10	; 16
     ebc:	14 ff       	sbrs	r17, 4
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <vfprintf+0x29a>
     ec0:	14 60       	ori	r17, 0x04	; 4
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <vfprintf+0x29a>
     ec4:	14 ff       	sbrs	r17, 4
     ec6:	08 c0       	rjmp	.+16     	; 0xed8 <vfprintf+0x2a0>
     ec8:	16 60       	ori	r17, 0x06	; 6
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <vfprintf+0x2a0>
     ecc:	28 e0       	ldi	r18, 0x08	; 8
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <vfprintf+0x2a4>
     ed2:	20 e1       	ldi	r18, 0x10	; 16
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <vfprintf+0x2a4>
     ed8:	20 e1       	ldi	r18, 0x10	; 16
     eda:	32 e0       	ldi	r19, 0x02	; 2
     edc:	f5 01       	movw	r30, r10
     ede:	17 ff       	sbrs	r17, 7
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <vfprintf+0x2b8>
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	44 e0       	ldi	r20, 0x04	; 4
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	06 c0       	rjmp	.+12     	; 0xefc <vfprintf+0x2c4>
     ef0:	60 81       	ld	r22, Z
     ef2:	71 81       	ldd	r23, Z+1	; 0x01
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	42 e0       	ldi	r20, 0x02	; 2
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	a4 0e       	add	r10, r20
     efe:	b5 1e       	adc	r11, r21
     f00:	a2 01       	movw	r20, r4
     f02:	0e 94 a5 08 	call	0x114a	; 0x114a <__ultoa_invert>
     f06:	d8 2e       	mov	r13, r24
     f08:	d4 18       	sub	r13, r4
     f0a:	01 2f       	mov	r16, r17
     f0c:	0f 77       	andi	r16, 0x7F	; 127
     f0e:	06 ff       	sbrs	r16, 6
     f10:	09 c0       	rjmp	.+18     	; 0xf24 <vfprintf+0x2ec>
     f12:	0e 7f       	andi	r16, 0xFE	; 254
     f14:	df 14       	cp	r13, r15
     f16:	30 f4       	brcc	.+12     	; 0xf24 <vfprintf+0x2ec>
     f18:	04 ff       	sbrs	r16, 4
     f1a:	06 c0       	rjmp	.+12     	; 0xf28 <vfprintf+0x2f0>
     f1c:	02 fd       	sbrc	r16, 2
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <vfprintf+0x2f0>
     f20:	0f 7e       	andi	r16, 0xEF	; 239
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <vfprintf+0x2f0>
     f24:	1d 2d       	mov	r17, r13
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <vfprintf+0x2f2>
     f28:	1f 2d       	mov	r17, r15
     f2a:	80 2f       	mov	r24, r16
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	04 ff       	sbrs	r16, 4
     f30:	0c c0       	rjmp	.+24     	; 0xf4a <vfprintf+0x312>
     f32:	fe 01       	movw	r30, r28
     f34:	ed 0d       	add	r30, r13
     f36:	f1 1d       	adc	r31, r1
     f38:	20 81       	ld	r18, Z
     f3a:	20 33       	cpi	r18, 0x30	; 48
     f3c:	11 f4       	brne	.+4      	; 0xf42 <vfprintf+0x30a>
     f3e:	09 7e       	andi	r16, 0xE9	; 233
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <vfprintf+0x31c>
     f42:	02 ff       	sbrs	r16, 2
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0x31a>
     f46:	1e 5f       	subi	r17, 0xFE	; 254
     f48:	05 c0       	rjmp	.+10     	; 0xf54 <vfprintf+0x31c>
     f4a:	86 78       	andi	r24, 0x86	; 134
     f4c:	90 70       	andi	r25, 0x00	; 0
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	09 f0       	breq	.+2      	; 0xf54 <vfprintf+0x31c>
     f52:	1f 5f       	subi	r17, 0xFF	; 255
     f54:	80 2e       	mov	r8, r16
     f56:	99 24       	eor	r9, r9
     f58:	03 fd       	sbrc	r16, 3
     f5a:	12 c0       	rjmp	.+36     	; 0xf80 <vfprintf+0x348>
     f5c:	00 ff       	sbrs	r16, 0
     f5e:	0d c0       	rjmp	.+26     	; 0xf7a <vfprintf+0x342>
     f60:	fd 2c       	mov	r15, r13
     f62:	1e 15       	cp	r17, r14
     f64:	50 f4       	brcc	.+20     	; 0xf7a <vfprintf+0x342>
     f66:	fe 0c       	add	r15, r14
     f68:	f1 1a       	sub	r15, r17
     f6a:	1e 2d       	mov	r17, r14
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <vfprintf+0x342>
     f6e:	80 e2       	ldi	r24, 0x20	; 32
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	b3 01       	movw	r22, r6
     f74:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
     f78:	1f 5f       	subi	r17, 0xFF	; 255
     f7a:	1e 15       	cp	r17, r14
     f7c:	c0 f3       	brcs	.-16     	; 0xf6e <vfprintf+0x336>
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <vfprintf+0x350>
     f80:	1e 15       	cp	r17, r14
     f82:	10 f4       	brcc	.+4      	; 0xf88 <vfprintf+0x350>
     f84:	e1 1a       	sub	r14, r17
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <vfprintf+0x352>
     f88:	ee 24       	eor	r14, r14
     f8a:	84 fe       	sbrs	r8, 4
     f8c:	0f c0       	rjmp	.+30     	; 0xfac <vfprintf+0x374>
     f8e:	80 e3       	ldi	r24, 0x30	; 48
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	b3 01       	movw	r22, r6
     f94:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
     f98:	82 fe       	sbrs	r8, 2
     f9a:	1f c0       	rjmp	.+62     	; 0xfda <vfprintf+0x3a2>
     f9c:	81 fe       	sbrs	r8, 1
     f9e:	03 c0       	rjmp	.+6      	; 0xfa6 <vfprintf+0x36e>
     fa0:	88 e5       	ldi	r24, 0x58	; 88
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	10 c0       	rjmp	.+32     	; 0xfc6 <vfprintf+0x38e>
     fa6:	88 e7       	ldi	r24, 0x78	; 120
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0d c0       	rjmp	.+26     	; 0xfc6 <vfprintf+0x38e>
     fac:	c4 01       	movw	r24, r8
     fae:	86 78       	andi	r24, 0x86	; 134
     fb0:	90 70       	andi	r25, 0x00	; 0
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	91 f0       	breq	.+36     	; 0xfda <vfprintf+0x3a2>
     fb6:	81 fc       	sbrc	r8, 1
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <vfprintf+0x386>
     fba:	80 e2       	ldi	r24, 0x20	; 32
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <vfprintf+0x388>
     fbe:	8b e2       	ldi	r24, 0x2B	; 43
     fc0:	07 fd       	sbrc	r16, 7
     fc2:	8d e2       	ldi	r24, 0x2D	; 45
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	b3 01       	movw	r22, r6
     fc8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
     fcc:	06 c0       	rjmp	.+12     	; 0xfda <vfprintf+0x3a2>
     fce:	80 e3       	ldi	r24, 0x30	; 48
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b3 01       	movw	r22, r6
     fd4:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
     fd8:	fa 94       	dec	r15
     fda:	df 14       	cp	r13, r15
     fdc:	c0 f3       	brcs	.-16     	; 0xfce <vfprintf+0x396>
     fde:	da 94       	dec	r13
     fe0:	f2 01       	movw	r30, r4
     fe2:	ed 0d       	add	r30, r13
     fe4:	f1 1d       	adc	r31, r1
     fe6:	80 81       	ld	r24, Z
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	b3 01       	movw	r22, r6
     fec:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
     ff0:	dd 20       	and	r13, r13
     ff2:	a9 f7       	brne	.-22     	; 0xfde <vfprintf+0x3a6>
     ff4:	06 c0       	rjmp	.+12     	; 0x1002 <vfprintf+0x3ca>
     ff6:	80 e2       	ldi	r24, 0x20	; 32
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	b3 01       	movw	r22, r6
     ffc:	0e 94 79 08 	call	0x10f2	; 0x10f2 <fputc>
    1000:	ea 94       	dec	r14
    1002:	ee 20       	and	r14, r14
    1004:	c1 f7       	brne	.-16     	; 0xff6 <vfprintf+0x3be>
    1006:	40 ce       	rjmp	.-896    	; 0xc88 <vfprintf+0x50>
    1008:	f3 01       	movw	r30, r6
    100a:	86 81       	ldd	r24, Z+6	; 0x06
    100c:	97 81       	ldd	r25, Z+7	; 0x07
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <vfprintf+0x3dc>
    1010:	8f ef       	ldi	r24, 0xFF	; 255
    1012:	9f ef       	ldi	r25, 0xFF	; 255
    1014:	2d 96       	adiw	r28, 0x0d	; 13
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	bf 90       	pop	r11
    1032:	af 90       	pop	r10
    1034:	9f 90       	pop	r9
    1036:	8f 90       	pop	r8
    1038:	7f 90       	pop	r7
    103a:	6f 90       	pop	r6
    103c:	5f 90       	pop	r5
    103e:	4f 90       	pop	r4
    1040:	3f 90       	pop	r3
    1042:	2f 90       	pop	r2
    1044:	08 95       	ret

00001046 <strnlen_P>:
    1046:	fc 01       	movw	r30, r24
    1048:	05 90       	lpm	r0, Z+
    104a:	61 50       	subi	r22, 0x01	; 1
    104c:	70 40       	sbci	r23, 0x00	; 0
    104e:	01 10       	cpse	r0, r1
    1050:	d8 f7       	brcc	.-10     	; 0x1048 <strnlen_P+0x2>
    1052:	80 95       	com	r24
    1054:	90 95       	com	r25
    1056:	8e 0f       	add	r24, r30
    1058:	9f 1f       	adc	r25, r31
    105a:	08 95       	ret

0000105c <strnlen>:
    105c:	fc 01       	movw	r30, r24
    105e:	61 50       	subi	r22, 0x01	; 1
    1060:	70 40       	sbci	r23, 0x00	; 0
    1062:	01 90       	ld	r0, Z+
    1064:	01 10       	cpse	r0, r1
    1066:	d8 f7       	brcc	.-10     	; 0x105e <strnlen+0x2>
    1068:	80 95       	com	r24
    106a:	90 95       	com	r25
    106c:	8e 0f       	add	r24, r30
    106e:	9f 1f       	adc	r25, r31
    1070:	08 95       	ret

00001072 <fgetc>:
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	ec 01       	movw	r28, r24
    1078:	2b 81       	ldd	r18, Y+3	; 0x03
    107a:	20 ff       	sbrs	r18, 0
    107c:	35 c0       	rjmp	.+106    	; 0x10e8 <fgetc+0x76>
    107e:	26 ff       	sbrs	r18, 6
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <fgetc+0x22>
    1082:	2f 7b       	andi	r18, 0xBF	; 191
    1084:	2b 83       	std	Y+3, r18	; 0x03
    1086:	8e 81       	ldd	r24, Y+6	; 0x06
    1088:	9f 81       	ldd	r25, Y+7	; 0x07
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	9f 83       	std	Y+7, r25	; 0x07
    108e:	8e 83       	std	Y+6, r24	; 0x06
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 c0       	rjmp	.+80     	; 0x10e4 <fgetc+0x72>
    1094:	22 ff       	sbrs	r18, 2
    1096:	0f c0       	rjmp	.+30     	; 0x10b6 <fgetc+0x44>
    1098:	e8 81       	ld	r30, Y
    109a:	f9 81       	ldd	r31, Y+1	; 0x01
    109c:	80 81       	ld	r24, Z
    109e:	99 27       	eor	r25, r25
    10a0:	87 fd       	sbrc	r24, 7
    10a2:	90 95       	com	r25
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	19 f4       	brne	.+6      	; 0x10ae <fgetc+0x3c>
    10a8:	20 62       	ori	r18, 0x20	; 32
    10aa:	2b 83       	std	Y+3, r18	; 0x03
    10ac:	1d c0       	rjmp	.+58     	; 0x10e8 <fgetc+0x76>
    10ae:	31 96       	adiw	r30, 0x01	; 1
    10b0:	f9 83       	std	Y+1, r31	; 0x01
    10b2:	e8 83       	st	Y, r30
    10b4:	11 c0       	rjmp	.+34     	; 0x10d8 <fgetc+0x66>
    10b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    10b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    10ba:	ce 01       	movw	r24, r28
    10bc:	19 95       	eicall
    10be:	97 ff       	sbrs	r25, 7
    10c0:	0b c0       	rjmp	.+22     	; 0x10d8 <fgetc+0x66>
    10c2:	2b 81       	ldd	r18, Y+3	; 0x03
    10c4:	3f ef       	ldi	r19, 0xFF	; 255
    10c6:	8f 3f       	cpi	r24, 0xFF	; 255
    10c8:	93 07       	cpc	r25, r19
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <fgetc+0x5e>
    10cc:	80 e1       	ldi	r24, 0x10	; 16
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <fgetc+0x60>
    10d0:	80 e2       	ldi	r24, 0x20	; 32
    10d2:	82 2b       	or	r24, r18
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    10d6:	08 c0       	rjmp	.+16     	; 0x10e8 <fgetc+0x76>
    10d8:	2e 81       	ldd	r18, Y+6	; 0x06
    10da:	3f 81       	ldd	r19, Y+7	; 0x07
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	3f 83       	std	Y+7, r19	; 0x07
    10e2:	2e 83       	std	Y+6, r18	; 0x06
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <fgetc+0x7a>
    10e8:	8f ef       	ldi	r24, 0xFF	; 255
    10ea:	9f ef       	ldi	r25, 0xFF	; 255
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <fputc>:
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	8c 01       	movw	r16, r24
    10fc:	eb 01       	movw	r28, r22
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	81 ff       	sbrs	r24, 1
    1102:	1b c0       	rjmp	.+54     	; 0x113a <fputc+0x48>
    1104:	82 ff       	sbrs	r24, 2
    1106:	0d c0       	rjmp	.+26     	; 0x1122 <fputc+0x30>
    1108:	2e 81       	ldd	r18, Y+6	; 0x06
    110a:	3f 81       	ldd	r19, Y+7	; 0x07
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	9d 81       	ldd	r25, Y+5	; 0x05
    1110:	28 17       	cp	r18, r24
    1112:	39 07       	cpc	r19, r25
    1114:	64 f4       	brge	.+24     	; 0x112e <fputc+0x3c>
    1116:	e8 81       	ld	r30, Y
    1118:	f9 81       	ldd	r31, Y+1	; 0x01
    111a:	01 93       	st	Z+, r16
    111c:	f9 83       	std	Y+1, r31	; 0x01
    111e:	e8 83       	st	Y, r30
    1120:	06 c0       	rjmp	.+12     	; 0x112e <fputc+0x3c>
    1122:	e8 85       	ldd	r30, Y+8	; 0x08
    1124:	f9 85       	ldd	r31, Y+9	; 0x09
    1126:	80 2f       	mov	r24, r16
    1128:	19 95       	eicall
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	31 f4       	brne	.+12     	; 0x113a <fputc+0x48>
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	9f 83       	std	Y+7, r25	; 0x07
    1136:	8e 83       	std	Y+6, r24	; 0x06
    1138:	02 c0       	rjmp	.+4      	; 0x113e <fputc+0x4c>
    113a:	0f ef       	ldi	r16, 0xFF	; 255
    113c:	1f ef       	ldi	r17, 0xFF	; 255
    113e:	c8 01       	movw	r24, r16
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	08 95       	ret

0000114a <__ultoa_invert>:
    114a:	fa 01       	movw	r30, r20
    114c:	aa 27       	eor	r26, r26
    114e:	28 30       	cpi	r18, 0x08	; 8
    1150:	51 f1       	breq	.+84     	; 0x11a6 <__ultoa_invert+0x5c>
    1152:	20 31       	cpi	r18, 0x10	; 16
    1154:	81 f1       	breq	.+96     	; 0x11b6 <__ultoa_invert+0x6c>
    1156:	e8 94       	clt
    1158:	6f 93       	push	r22
    115a:	6e 7f       	andi	r22, 0xFE	; 254
    115c:	6e 5f       	subi	r22, 0xFE	; 254
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	8f 4f       	sbci	r24, 0xFF	; 255
    1162:	9f 4f       	sbci	r25, 0xFF	; 255
    1164:	af 4f       	sbci	r26, 0xFF	; 255
    1166:	b1 e0       	ldi	r27, 0x01	; 1
    1168:	3e d0       	rcall	.+124    	; 0x11e6 <__ultoa_invert+0x9c>
    116a:	b4 e0       	ldi	r27, 0x04	; 4
    116c:	3c d0       	rcall	.+120    	; 0x11e6 <__ultoa_invert+0x9c>
    116e:	67 0f       	add	r22, r23
    1170:	78 1f       	adc	r23, r24
    1172:	89 1f       	adc	r24, r25
    1174:	9a 1f       	adc	r25, r26
    1176:	a1 1d       	adc	r26, r1
    1178:	68 0f       	add	r22, r24
    117a:	79 1f       	adc	r23, r25
    117c:	8a 1f       	adc	r24, r26
    117e:	91 1d       	adc	r25, r1
    1180:	a1 1d       	adc	r26, r1
    1182:	6a 0f       	add	r22, r26
    1184:	71 1d       	adc	r23, r1
    1186:	81 1d       	adc	r24, r1
    1188:	91 1d       	adc	r25, r1
    118a:	a1 1d       	adc	r26, r1
    118c:	20 d0       	rcall	.+64     	; 0x11ce <__ultoa_invert+0x84>
    118e:	09 f4       	brne	.+2      	; 0x1192 <__ultoa_invert+0x48>
    1190:	68 94       	set
    1192:	3f 91       	pop	r19
    1194:	2a e0       	ldi	r18, 0x0A	; 10
    1196:	26 9f       	mul	r18, r22
    1198:	11 24       	eor	r1, r1
    119a:	30 19       	sub	r19, r0
    119c:	30 5d       	subi	r19, 0xD0	; 208
    119e:	31 93       	st	Z+, r19
    11a0:	de f6       	brtc	.-74     	; 0x1158 <__ultoa_invert+0xe>
    11a2:	cf 01       	movw	r24, r30
    11a4:	08 95       	ret
    11a6:	46 2f       	mov	r20, r22
    11a8:	47 70       	andi	r20, 0x07	; 7
    11aa:	40 5d       	subi	r20, 0xD0	; 208
    11ac:	41 93       	st	Z+, r20
    11ae:	b3 e0       	ldi	r27, 0x03	; 3
    11b0:	0f d0       	rcall	.+30     	; 0x11d0 <__ultoa_invert+0x86>
    11b2:	c9 f7       	brne	.-14     	; 0x11a6 <__ultoa_invert+0x5c>
    11b4:	f6 cf       	rjmp	.-20     	; 0x11a2 <__ultoa_invert+0x58>
    11b6:	46 2f       	mov	r20, r22
    11b8:	4f 70       	andi	r20, 0x0F	; 15
    11ba:	40 5d       	subi	r20, 0xD0	; 208
    11bc:	4a 33       	cpi	r20, 0x3A	; 58
    11be:	18 f0       	brcs	.+6      	; 0x11c6 <__ultoa_invert+0x7c>
    11c0:	49 5d       	subi	r20, 0xD9	; 217
    11c2:	31 fd       	sbrc	r19, 1
    11c4:	40 52       	subi	r20, 0x20	; 32
    11c6:	41 93       	st	Z+, r20
    11c8:	02 d0       	rcall	.+4      	; 0x11ce <__ultoa_invert+0x84>
    11ca:	a9 f7       	brne	.-22     	; 0x11b6 <__ultoa_invert+0x6c>
    11cc:	ea cf       	rjmp	.-44     	; 0x11a2 <__ultoa_invert+0x58>
    11ce:	b4 e0       	ldi	r27, 0x04	; 4
    11d0:	a6 95       	lsr	r26
    11d2:	97 95       	ror	r25
    11d4:	87 95       	ror	r24
    11d6:	77 95       	ror	r23
    11d8:	67 95       	ror	r22
    11da:	ba 95       	dec	r27
    11dc:	c9 f7       	brne	.-14     	; 0x11d0 <__ultoa_invert+0x86>
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	61 05       	cpc	r22, r1
    11e2:	71 05       	cpc	r23, r1
    11e4:	08 95       	ret
    11e6:	9b 01       	movw	r18, r22
    11e8:	ac 01       	movw	r20, r24
    11ea:	0a 2e       	mov	r0, r26
    11ec:	06 94       	lsr	r0
    11ee:	57 95       	ror	r21
    11f0:	47 95       	ror	r20
    11f2:	37 95       	ror	r19
    11f4:	27 95       	ror	r18
    11f6:	ba 95       	dec	r27
    11f8:	c9 f7       	brne	.-14     	; 0x11ec <__ultoa_invert+0xa2>
    11fa:	62 0f       	add	r22, r18
    11fc:	73 1f       	adc	r23, r19
    11fe:	84 1f       	adc	r24, r20
    1200:	95 1f       	adc	r25, r21
    1202:	a0 1d       	adc	r26, r0
    1204:	08 95       	ret

00001206 <_exit>:
    1206:	f8 94       	cli

00001208 <__stop_program>:
    1208:	ff cf       	rjmp	.-2      	; 0x1208 <__stop_program>
