
Pjt09_linked_list.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800200  0000120c  000012a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000120c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  0080029a  0080029a  0000133a  2**0
                  ALLOC
  3 .stab         00001110  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000033b  00000000  00000000  0000244c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000250  00000000  00000000  00002788  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002057  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f72  00000000  00000000  00004a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b7  00000000  00000000  000059a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  00006c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000698  00000000  00000000  000071b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001647  00000000  00000000  0000784c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00008e93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      58:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      5c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      60:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      64:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_25>
      68:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      6c:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_27>
      70:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      74:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      78:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      7c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      80:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      84:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      88:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      8c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      90:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      94:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      98:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      9c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      a8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      ac:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      b8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      bc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      c8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      cc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      d8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      dc:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      e0:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e0       	ldi	r30, 0x0C	; 12
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 39       	cpi	r26, 0x9A	; 154
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
     10e:	1b be       	out	0x3b, r1	; 59

00000110 <__do_clear_bss>:
     110:	13 e0       	ldi	r17, 0x03	; 3
     112:	aa e9       	ldi	r26, 0x9A	; 154
     114:	b2 e0       	ldi	r27, 0x02	; 2
     116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
     118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
     11a:	a1 33       	cpi	r26, 0x31	; 49
     11c:	b1 07       	cpc	r27, r17
     11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>
     120:	0e 94 98 03 	call	0x730	; 0x730 <main>
     124:	0c 94 04 09 	jmp	0x1208	; 0x1208 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <get_node>:

struct node *get_node()
{
	struct node *cp;

	cp = (struct node *)malloc(sizeof(struct node));
     12c:	84 e0       	ldi	r24, 0x04	; 4
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 18 04 	call	0x830	; 0x830 <malloc>
	return(cp);
}
     134:	08 95       	ret

00000136 <free_node>:

void free_node(struct node *np)
{
	free(np);
     136:	0e 94 ae 04 	call	0x95c	; 0x95c <free>
}
     13a:	08 95       	ret

0000013c <insert_node_head>:

void insert_node_head(struct node *np)
{
     13c:	fc 01       	movw	r30, r24
	if(!Head) {
     13e:	80 91 9a 02 	lds	r24, 0x029A
     142:	90 91 9b 02 	lds	r25, 0x029B
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	39 f4       	brne	.+14     	; 0x158 <insert_node_head+0x1c>
		Head = np;
     14a:	f0 93 9b 02 	sts	0x029B, r31
     14e:	e0 93 9a 02 	sts	0x029A, r30
		np -> link = NULL;
     152:	13 82       	std	Z+3, r1	; 0x03
     154:	12 82       	std	Z+2, r1	; 0x02
     156:	08 95       	ret
	}
	else {
		np -> link = Head;
     158:	93 83       	std	Z+3, r25	; 0x03
     15a:	82 83       	std	Z+2, r24	; 0x02
		Head = np;
     15c:	f0 93 9b 02 	sts	0x029B, r31
     160:	e0 93 9a 02 	sts	0x029A, r30
     164:	08 95       	ret

00000166 <insert_node_tail>:

void insert_node_tail(struct node *np)
{
	struct node *cp;

	if(!Head)
     166:	e0 91 9a 02 	lds	r30, 0x029A
     16a:	f0 91 9b 02 	lds	r31, 0x029B
     16e:	30 97       	sbiw	r30, 0x00	; 0
     170:	31 f4       	brne	.+12     	; 0x17e <insert_node_tail+0x18>
		Head = np;
     172:	90 93 9b 02 	sts	0x029B, r25
     176:	80 93 9a 02 	sts	0x029A, r24
     17a:	08 c0       	rjmp	.+16     	; 0x18c <insert_node_tail+0x26>
	else {
		for (cp = Head; cp->link != NULL; cp = cp->link);
     17c:	f9 01       	movw	r30, r18
     17e:	22 81       	ldd	r18, Z+2	; 0x02
     180:	33 81       	ldd	r19, Z+3	; 0x03
     182:	21 15       	cp	r18, r1
     184:	31 05       	cpc	r19, r1
     186:	d1 f7       	brne	.-12     	; 0x17c <insert_node_tail+0x16>
		cp -> link = np;
     188:	93 83       	std	Z+3, r25	; 0x03
     18a:	82 83       	std	Z+2, r24	; 0x02
	}
	np -> link = NULL;
     18c:	fc 01       	movw	r30, r24
     18e:	13 82       	std	Z+3, r1	; 0x03
     190:	12 82       	std	Z+2, r1	; 0x02
}
     192:	08 95       	ret

00000194 <insert_node_ascn>:

void insert_node_ascn(struct node *np)
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	fc 01       	movw	r30, r24
	struct node *cp, *pp;
	if(!Head) {
     19a:	20 91 9a 02 	lds	r18, 0x029A
     19e:	30 91 9b 02 	lds	r19, 0x029B
     1a2:	21 15       	cp	r18, r1
     1a4:	31 05       	cpc	r19, r1
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <insert_node_ascn+0x20>
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     1a8:	40 81       	ld	r20, Z
     1aa:	51 81       	ldd	r21, Z+1	; 0x01
     1ac:	d9 01       	movw	r26, r18
     1ae:	c0 e0       	ldi	r28, 0x00	; 0
     1b0:	d0 e0       	ldi	r29, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <insert_node_ascn+0x3e>

void insert_node_ascn(struct node *np)
{
	struct node *cp, *pp;
	if(!Head) {
		Head = np;
     1b4:	90 93 9b 02 	sts	0x029B, r25
     1b8:	80 93 9a 02 	sts	0x029A, r24
		np -> link = NULL;
     1bc:	13 82       	std	Z+3, r1	; 0x03
     1be:	12 82       	std	Z+2, r1	; 0x02
     1c0:	1d c0       	rjmp	.+58     	; 0x1fc <insert_node_ascn+0x68>
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
		pp = cp, cp = cp->link);
     1c2:	12 96       	adiw	r26, 0x02	; 2
     1c4:	8d 91       	ld	r24, X+
     1c6:	9c 91       	ld	r25, X
     1c8:	13 97       	sbiw	r26, 0x03	; 3
	if(!Head) {
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     1ca:	ed 01       	movw	r28, r26
     1cc:	00 97       	sbiw	r24, 0x00	; 0
     1ce:	39 f0       	breq	.+14     	; 0x1de <insert_node_ascn+0x4a>
		pp = cp, cp = cp->link);
     1d0:	dc 01       	movw	r26, r24
	if(!Head) {
		Head = np;
		np -> link = NULL;
	}
	else {
		for (cp = Head, pp = NULL; cp != NULL && cp -> data < np->data;
     1d2:	8d 91       	ld	r24, X+
     1d4:	9c 91       	ld	r25, X
     1d6:	11 97       	sbiw	r26, 0x01	; 1
     1d8:	84 17       	cp	r24, r20
     1da:	95 07       	cpc	r25, r21
     1dc:	94 f3       	brlt	.-28     	; 0x1c2 <insert_node_ascn+0x2e>
		pp = cp, cp = cp->link);
		
		if(pp == NULL) {
     1de:	20 97       	sbiw	r28, 0x00	; 0
     1e0:	39 f4       	brne	.+14     	; 0x1f0 <insert_node_ascn+0x5c>
			np -> link = Head;
     1e2:	33 83       	std	Z+3, r19	; 0x03
     1e4:	22 83       	std	Z+2, r18	; 0x02
			Head = np;
     1e6:	f0 93 9b 02 	sts	0x029B, r31
     1ea:	e0 93 9a 02 	sts	0x029A, r30
     1ee:	06 c0       	rjmp	.+12     	; 0x1fc <insert_node_ascn+0x68>
		} else {
			np -> link = pp -> link;
     1f0:	8a 81       	ldd	r24, Y+2	; 0x02
     1f2:	9b 81       	ldd	r25, Y+3	; 0x03
     1f4:	93 83       	std	Z+3, r25	; 0x03
     1f6:	82 83       	std	Z+2, r24	; 0x02
			pp -> link = np;
     1f8:	fb 83       	std	Y+3, r31	; 0x03
     1fa:	ea 83       	std	Y+2, r30	; 0x02
		}
	}
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <insert_node_desc>:

void insert_node_desc(struct node *np) {
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	fc 01       	movw	r30, r24
   struct node *cp, *pp;

   if(!Head) {
     208:	20 91 9a 02 	lds	r18, 0x029A
     20c:	30 91 9b 02 	lds	r19, 0x029B
     210:	21 15       	cp	r18, r1
     212:	31 05       	cpc	r19, r1
     214:	31 f0       	breq	.+12     	; 0x222 <insert_node_desc+0x20>
      Head = np;
      np->link = NULL;
   } else {
      for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     216:	40 81       	ld	r20, Z
     218:	51 81       	ldd	r21, Z+1	; 0x01
     21a:	d9 01       	movw	r26, r18
     21c:	c0 e0       	ldi	r28, 0x00	; 0
     21e:	d0 e0       	ldi	r29, 0x00	; 0
     220:	0f c0       	rjmp	.+30     	; 0x240 <insert_node_desc+0x3e>

void insert_node_desc(struct node *np) {
   struct node *cp, *pp;

   if(!Head) {
      Head = np;
     222:	90 93 9b 02 	sts	0x029B, r25
     226:	80 93 9a 02 	sts	0x029A, r24
      np->link = NULL;
     22a:	13 82       	std	Z+3, r1	; 0x03
     22c:	12 82       	std	Z+2, r1	; 0x02
     22e:	1d c0       	rjmp	.+58     	; 0x26a <insert_node_desc+0x68>
   } else {
      for(cp = Head, pp = NULL; cp != NULL && cp->data > np->data; pp = cp, cp = cp->link);
     230:	12 96       	adiw	r26, 0x02	; 2
     232:	8d 91       	ld	r24, X+
     234:	9c 91       	ld	r25, X
     236:	13 97       	sbiw	r26, 0x03	; 3
     238:	ed 01       	movw	r28, r26
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	39 f0       	breq	.+14     	; 0x24c <insert_node_desc+0x4a>
     23e:	dc 01       	movw	r26, r24
     240:	8d 91       	ld	r24, X+
     242:	9c 91       	ld	r25, X
     244:	11 97       	sbiw	r26, 0x01	; 1
     246:	48 17       	cp	r20, r24
     248:	59 07       	cpc	r21, r25
     24a:	94 f3       	brlt	.-28     	; 0x230 <insert_node_desc+0x2e>

      if(pp == NULL) {
     24c:	20 97       	sbiw	r28, 0x00	; 0
     24e:	39 f4       	brne	.+14     	; 0x25e <insert_node_desc+0x5c>
         np->link = Head;
     250:	33 83       	std	Z+3, r19	; 0x03
     252:	22 83       	std	Z+2, r18	; 0x02
         Head = np;
     254:	f0 93 9b 02 	sts	0x029B, r31
     258:	e0 93 9a 02 	sts	0x029A, r30
     25c:	06 c0       	rjmp	.+12     	; 0x26a <insert_node_desc+0x68>
      } else {
         np->link = pp->link;
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	9b 81       	ldd	r25, Y+3	; 0x03
     262:	93 83       	std	Z+3, r25	; 0x03
     264:	82 83       	std	Z+2, r24	; 0x02
         pp->link = np;
     266:	fb 83       	std	Y+3, r31	; 0x03
     268:	ea 83       	std	Y+2, r30	; 0x02
      }
   }
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <tour_list>:

void tour_list() {
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
	struct node *cp;
	printf("\n");
     278:	8a e0       	ldi	r24, 0x0A	; 10
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <putchar>
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     280:	c0 91 9a 02 	lds	r28, 0x029A
     284:	d0 91 9b 02 	lds	r29, 0x029B
		printf("-->%c ", cp-> data);
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	12 e0       	ldi	r17, 0x02	; 2

void tour_list() {
	struct node *cp;
	printf("\n");
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     28c:	13 c0       	rjmp	.+38     	; 0x2b4 <tour_list+0x44>
		printf("-->%c ", cp-> data);
     28e:	00 d0       	rcall	.+0      	; 0x290 <tour_list+0x20>
     290:	0f 92       	push	r0
     292:	ed b7       	in	r30, 0x3d	; 61
     294:	fe b7       	in	r31, 0x3e	; 62
     296:	12 83       	std	Z+2, r17	; 0x02
     298:	01 83       	std	Z+1, r16	; 0x01
     29a:	88 81       	ld	r24, Y
     29c:	99 81       	ldd	r25, Y+1	; 0x01
     29e:	94 83       	std	Z+4, r25	; 0x04
     2a0:	83 83       	std	Z+3, r24	; 0x03
     2a2:	0e 94 d6 05 	call	0xbac	; 0xbac <printf>

void tour_list() {
	struct node *cp;
	printf("\n");
	
	for ( cp = Head; cp != NULL; cp = cp-> link)
     2a6:	0a 80       	ldd	r0, Y+2	; 0x02
     2a8:	db 81       	ldd	r29, Y+3	; 0x03
     2aa:	c0 2d       	mov	r28, r0
     2ac:	0f 90       	pop	r0
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	0f 90       	pop	r0
     2b4:	20 97       	sbiw	r28, 0x00	; 0
     2b6:	59 f7       	brne	.-42     	; 0x28e <tour_list+0x1e>
		printf("-->%c ", cp-> data);
	printf("\n");
     2b8:	8a e0       	ldi	r24, 0x0A	; 10
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <putchar>
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	08 95       	ret

000002ca <free_list>:

void free_list()
{
	struct node *cp;
	
	for(; Head != NULL; ) {
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <free_list+0x14>
		cp = Head;
		Head = cp->link;
     2cc:	fc 01       	movw	r30, r24
     2ce:	22 81       	ldd	r18, Z+2	; 0x02
     2d0:	33 81       	ldd	r19, Z+3	; 0x03
     2d2:	30 93 9b 02 	sts	0x029B, r19
     2d6:	20 93 9a 02 	sts	0x029A, r18
	return(cp);
}

void free_node(struct node *np)
{
	free(np);
     2da:	0e 94 ae 04 	call	0x95c	; 0x95c <free>

void free_list()
{
	struct node *cp;
	
	for(; Head != NULL; ) {
     2de:	80 91 9a 02 	lds	r24, 0x029A
     2e2:	90 91 9b 02 	lds	r25, 0x029B
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	89 f7       	brne	.-30     	; 0x2cc <free_list+0x2>
		cp = Head;
		Head = cp->link;
		free_node(cp);
	}
}	
     2ea:	08 95       	ret

000002ec <app_list>:

void app_list(char *ap)
{
     2ec:	ef 92       	push	r14
     2ee:	ff 92       	push	r15
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	28 97       	sbiw	r28, 0x08	; 8
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
	char buf[8], how = 'a' ;
	struct node *np;

	if (ap) how = *ap;
     306:	00 97       	sbiw	r24, 0x00	; 0
     308:	19 f0       	breq	.+6      	; 0x310 <app_list+0x24>
     30a:	fc 01       	movw	r30, r24
     30c:	10 81       	ld	r17, Z
     30e:	01 c0       	rjmp	.+2      	; 0x312 <app_list+0x26>
	}
}	

void app_list(char *ap)
{
	char buf[8], how = 'a' ;
     310:	11 e6       	ldi	r17, 0x61	; 97
	struct node *np;

	if (ap) how = *ap;
	while(1) {
		printf( " > ");
     312:	87 e0       	ldi	r24, 0x07	; 7
     314:	e8 2e       	mov	r14, r24
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	f8 2e       	mov	r15, r24
     31a:	0f 92       	push	r0
     31c:	0f 92       	push	r0
     31e:	ed b7       	in	r30, 0x3d	; 61
     320:	fe b7       	in	r31, 0x3e	; 62
     322:	f2 82       	std	Z+2, r15	; 0x02
     324:	e1 82       	std	Z+1, r14	; 0x01
     326:	0e 94 d6 05 	call	0xbac	; 0xbac <printf>
		if(fgets(buf, 8, stdin) == NULL)
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	40 91 2b 03 	lds	r20, 0x032B
     332:	50 91 2c 03 	lds	r21, 0x032C
     336:	ce 01       	movw	r24, r28
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	68 e0       	ldi	r22, 0x08	; 8
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	0e 94 a2 05 	call	0xb44	; 0xb44 <fgets>
     342:	00 97       	sbiw	r24, 0x00	; 0
     344:	c9 f0       	breq	.+50     	; 0x378 <app_list+0x8c>
			break;
		np = get_node();
     346:	0e 94 96 00 	call	0x12c	; 0x12c <get_node>
		np -> data = buf[0];
     34a:	29 81       	ldd	r18, Y+1	; 0x01
     34c:	fc 01       	movw	r30, r24
     34e:	20 83       	st	Z, r18
     350:	11 82       	std	Z+1, r1	; 0x01
		switch(how) {
     352:	18 36       	cpi	r17, 0x68	; 104
     354:	29 f0       	breq	.+10     	; 0x360 <app_list+0x74>
     356:	14 37       	cpi	r17, 0x74	; 116
     358:	31 f0       	breq	.+12     	; 0x366 <app_list+0x7a>
     35a:	14 36       	cpi	r17, 0x64	; 100
     35c:	51 f4       	brne	.+20     	; 0x372 <app_list+0x86>
     35e:	06 c0       	rjmp	.+12     	; 0x36c <app_list+0x80>
			case 'h' : insert_node_head(np); break;
     360:	0e 94 9e 00 	call	0x13c	; 0x13c <insert_node_head>
     364:	da cf       	rjmp	.-76     	; 0x31a <app_list+0x2e>
			case 't' : insert_node_tail(np); break;
     366:	0e 94 b3 00 	call	0x166	; 0x166 <insert_node_tail>
     36a:	d7 cf       	rjmp	.-82     	; 0x31a <app_list+0x2e>
			case 'd' : insert_node_desc(np); break;
     36c:	0e 94 01 01 	call	0x202	; 0x202 <insert_node_desc>
     370:	d4 cf       	rjmp	.-88     	; 0x31a <app_list+0x2e>
			default : insert_node_ascn(np);
     372:	0e 94 ca 00 	call	0x194	; 0x194 <insert_node_ascn>
     376:	d1 cf       	rjmp	.-94     	; 0x31a <app_list+0x2e>
		}
	}
	tour_list();
     378:	0e 94 38 01 	call	0x270	; 0x270 <tour_list>
	free_list();
     37c:	0e 94 65 01 	call	0x2ca	; 0x2ca <free_list>
}
     380:	28 96       	adiw	r28, 0x08	; 8
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <__vector_27>:
	printf( "logout, good bye !!!\n");
	while(1); return 0;
}

ISR(USART0_TX_vect)
{
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	0b b6       	in	r0, 0x3b	; 59
     3a2:	0f 92       	push	r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2f 93       	push	r18
     3a8:	3f 93       	push	r19
     3aa:	4f 93       	push	r20
     3ac:	5f 93       	push	r21
     3ae:	6f 93       	push	r22
     3b0:	7f 93       	push	r23
     3b2:	8f 93       	push	r24
     3b4:	9f 93       	push	r25
     3b6:	af 93       	push	r26
     3b8:	bf 93       	push	r27
     3ba:	ef 93       	push	r30
     3bc:	ff 93       	push	r31
	char	ch;

	if((ch = qo_delete()) == 0)
     3be:	0e 94 0d 03 	call	0x61a	; 0x61a <qo_delete>
     3c2:	88 23       	and	r24, r24
     3c4:	19 f4       	brne	.+6      	; 0x3cc <__vector_27+0x34>
		uart_busy = 0;
     3c6:	10 92 26 03 	sts	0x0326, r1
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__vector_27+0x38>
	else
		UDR0 = ch;
     3cc:	80 93 c6 00 	sts	0x00C6, r24
}
     3d0:	ff 91       	pop	r31
     3d2:	ef 91       	pop	r30
     3d4:	bf 91       	pop	r27
     3d6:	af 91       	pop	r26
     3d8:	9f 91       	pop	r25
     3da:	8f 91       	pop	r24
     3dc:	7f 91       	pop	r23
     3de:	6f 91       	pop	r22
     3e0:	5f 91       	pop	r21
     3e2:	4f 91       	pop	r20
     3e4:	3f 91       	pop	r19
     3e6:	2f 91       	pop	r18
     3e8:	0f 90       	pop	r0
     3ea:	0b be       	out	0x3b, r0	; 59
     3ec:	0f 90       	pop	r0
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	0f 90       	pop	r0
     3f2:	1f 90       	pop	r1
     3f4:	18 95       	reti

000003f6 <__vector_25>:

ISR(USART0_RX_vect)
{
     3f6:	1f 92       	push	r1
     3f8:	0f 92       	push	r0
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	0f 92       	push	r0
     3fe:	0b b6       	in	r0, 0x3b	; 59
     400:	0f 92       	push	r0
     402:	11 24       	eor	r1, r1
     404:	2f 93       	push	r18
     406:	3f 93       	push	r19
     408:	4f 93       	push	r20
     40a:	5f 93       	push	r21
     40c:	6f 93       	push	r22
     40e:	7f 93       	push	r23
     410:	8f 93       	push	r24
     412:	9f 93       	push	r25
     414:	af 93       	push	r26
     416:	bf 93       	push	r27
     418:	cf 93       	push	r28
     41a:	ef 93       	push	r30
     41c:	ff 93       	push	r31
	char ch;

	ch = UDR0;
     41e:	c0 91 c6 00 	lds	r28, 0x00C6
	if ( ch != E0T) {
     422:	c4 30       	cpi	r28, 0x04	; 4
     424:	31 f0       	breq	.+12     	; 0x432 <__vector_25+0x3c>
		if(ch == '\r') ch = '\n';
     426:	cd 30       	cpi	r28, 0x0D	; 13
     428:	09 f4       	brne	.+2      	; 0x42c <__vector_25+0x36>
     42a:	ca e0       	ldi	r28, 0x0A	; 10
		uart_echo(ch);
     42c:	8c 2f       	mov	r24, r28
     42e:	0e 94 82 03 	call	0x704	; 0x704 <uart_echo>
	}
	qi_insert(ch);
     432:	8c 2f       	mov	r24, r28
     434:	0e 94 ac 02 	call	0x558	; 0x558 <qi_insert>
}
     438:	ff 91       	pop	r31
     43a:	ef 91       	pop	r30
     43c:	cf 91       	pop	r28
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	7f 91       	pop	r23
     448:	6f 91       	pop	r22
     44a:	5f 91       	pop	r21
     44c:	4f 91       	pop	r20
     44e:	3f 91       	pop	r19
     450:	2f 91       	pop	r18
     452:	0f 90       	pop	r0
     454:	0b be       	out	0x3b, r0	; 59
     456:	0f 90       	pop	r0
     458:	0f be       	out	0x3f, r0	; 63
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <is_prime>:

int is_prime(int n) {
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	fc 01       	movw	r30, r24
	int i;
	for( i = 2; i <= n/2; i++)
     466:	62 e0       	ldi	r22, 0x02	; 2
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
     46e:	eb 01       	movw	r28, r22
     470:	22 e0       	ldi	r18, 0x02	; 2
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	08 c0       	rjmp	.+16     	; 0x486 <is_prime+0x26>
		if((n%i) == 0)
     476:	cf 01       	movw	r24, r30
     478:	b9 01       	movw	r22, r18
     47a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
     47e:	00 97       	sbiw	r24, 0x00	; 0
     480:	41 f0       	breq	.+16     	; 0x492 <is_prime+0x32>
	qi_insert(ch);
}

int is_prime(int n) {
	int i;
	for( i = 2; i <= n/2; i++)
     482:	2f 5f       	subi	r18, 0xFF	; 255
     484:	3f 4f       	sbci	r19, 0xFF	; 255
     486:	c2 17       	cp	r28, r18
     488:	d3 07       	cpc	r29, r19
     48a:	ac f7       	brge	.-22     	; 0x476 <is_prime+0x16>
		if((n%i) == 0)
			return 0;
	return 1;
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	02 c0       	rjmp	.+4      	; 0x496 <is_prime+0x36>

int is_prime(int n) {
	int i;
	for( i = 2; i <= n/2; i++)
		if((n%i) == 0)
			return 0;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
	return 1;
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	08 95       	ret

0000049c <app_prime>:

void app_prime(char *ap)
{
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
     4ac:	00 97       	sbiw	r24, 0x00	; 0
     4ae:	21 f0       	breq	.+8      	; 0x4b8 <app_prime+0x1c>
     4b0:	0e 94 47 05 	call	0xa8e	; 0xa8e <atoi>
     4b4:	7c 01       	movw	r14, r24
     4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <app_prime+0x24>
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     4b8:	90 ed       	ldi	r25, 0xD0	; 208
     4ba:	e9 2e       	mov	r14, r25
     4bc:	97 e0       	ldi	r25, 0x07	; 7
     4be:	f9 2e       	mov	r15, r25

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     4c0:	c2 e0       	ldi	r28, 0x02	; 2
     4c2:	d0 e0       	ldi	r29, 0x00	; 0
	return 1;
}

void app_prime(char *ap)
{
	int t = 2000, count = 0, n;
     4c4:	00 e0       	ldi	r16, 0x00	; 0
     4c6:	10 e0       	ldi	r17, 0x00	; 0

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
		if(is_prime(n)) {
			count++;
			printf( "%d is a prime. " "number !!!\n", n);
     4c8:	8b e0       	ldi	r24, 0x0B	; 11
     4ca:	c8 2e       	mov	r12, r24
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	d8 2e       	mov	r13, r24
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     4d0:	16 c0       	rjmp	.+44     	; 0x4fe <app_prime+0x62>
		if(is_prime(n)) {
     4d2:	ce 01       	movw	r24, r28
     4d4:	0e 94 30 02 	call	0x460	; 0x460 <is_prime>
     4d8:	00 97       	sbiw	r24, 0x00	; 0
     4da:	81 f0       	breq	.+32     	; 0x4fc <app_prime+0x60>
			count++;
     4dc:	0f 5f       	subi	r16, 0xFF	; 255
     4de:	1f 4f       	sbci	r17, 0xFF	; 255
			printf( "%d is a prime. " "number !!!\n", n);
     4e0:	00 d0       	rcall	.+0      	; 0x4e2 <app_prime+0x46>
     4e2:	0f 92       	push	r0
     4e4:	ed b7       	in	r30, 0x3d	; 61
     4e6:	fe b7       	in	r31, 0x3e	; 62
     4e8:	d2 82       	std	Z+2, r13	; 0x02
     4ea:	c1 82       	std	Z+1, r12	; 0x01
     4ec:	d4 83       	std	Z+4, r29	; 0x04
     4ee:	c3 83       	std	Z+3, r28	; 0x03
     4f0:	0e 94 d6 05 	call	0xbac	; 0xbac <printf>
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
void app_prime(char *ap)
{
	int t = 2000, count = 0, n;

	if (ap) t = atoi(ap);
	for(n = 2; n <= t; n++) {
     4fc:	21 96       	adiw	r28, 0x01	; 1
     4fe:	ec 16       	cp	r14, r28
     500:	fd 06       	cpc	r15, r29
     502:	3c f7       	brge	.-50     	; 0x4d2 <app_prime+0x36>
		if(is_prime(n)) {
			count++;
			printf( "%d is a prime. " "number !!!\n", n);
		}
	}
	printf("count = %d \n", count);
     504:	00 d0       	rcall	.+0      	; 0x506 <app_prime+0x6a>
     506:	0f 92       	push	r0
     508:	86 e2       	ldi	r24, 0x26	; 38
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	ed b7       	in	r30, 0x3d	; 61
     50e:	fe b7       	in	r31, 0x3e	; 62
     510:	92 83       	std	Z+2, r25	; 0x02
     512:	81 83       	std	Z+1, r24	; 0x01
     514:	14 83       	std	Z+4, r17	; 0x04
     516:	03 83       	std	Z+3, r16	; 0x03
     518:	0e 94 d6 05 	call	0xbac	; 0xbac <printf>
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
}
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	ff 90       	pop	r15
     52e:	ef 90       	pop	r14
     530:	df 90       	pop	r13
     532:	cf 90       	pop	r12
     534:	08 95       	ret

00000536 <q_init>:
char qi[QI_SIZE], qo[QO_SIZE];
int fi, ri, fo, ro;

void q_init()
{
	fi = ri= fo = ro = 0;
     536:	10 92 e3 02 	sts	0x02E3, r1
     53a:	10 92 e2 02 	sts	0x02E2, r1
     53e:	10 92 e1 02 	sts	0x02E1, r1
     542:	10 92 e0 02 	sts	0x02E0, r1
     546:	10 92 e5 02 	sts	0x02E5, r1
     54a:	10 92 e4 02 	sts	0x02E4, r1
     54e:	10 92 9f 02 	sts	0x029F, r1
     552:	10 92 9e 02 	sts	0x029E, r1
}
     556:	08 95       	ret

00000558 <qi_insert>:

int qi_insert(char ch)
{
     558:	48 2f       	mov	r20, r24
	if ((ri+1) % QI_SIZE == fi)
     55a:	20 91 e4 02 	lds	r18, 0x02E4
     55e:	30 91 e5 02 	lds	r19, 0x02E5
     562:	2f 5f       	subi	r18, 0xFF	; 255
     564:	3f 4f       	sbci	r19, 0xFF	; 255
     566:	c9 01       	movw	r24, r18
     568:	60 e4       	ldi	r22, 0x40	; 64
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
     570:	9c 01       	movw	r18, r24
     572:	80 91 9e 02 	lds	r24, 0x029E
     576:	90 91 9f 02 	lds	r25, 0x029F
     57a:	28 17       	cp	r18, r24
     57c:	39 07       	cpc	r19, r25
     57e:	59 f0       	breq	.+22     	; 0x596 <qi_insert+0x3e>
		return 0;
	ri = (ri + 1) % QI_SIZE;
     580:	30 93 e5 02 	sts	0x02E5, r19
     584:	20 93 e4 02 	sts	0x02E4, r18
	qi[ri] = ch;
     588:	2a 51       	subi	r18, 0x1A	; 26
     58a:	3d 4f       	sbci	r19, 0xFD	; 253
     58c:	f9 01       	movw	r30, r18
     58e:	40 83       	st	Z, r20
	return 1;
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	08 95       	ret
}

int qi_insert(char ch)
{
	if ((ri+1) % QI_SIZE == fi)
		return 0;
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
	ri = (ri + 1) % QI_SIZE;
	qi[ri] = ch;
	return 1;
}
     59a:	08 95       	ret

0000059c <qi_delete>:

int qi_delete()
{
	if(ri == fi)
     59c:	80 91 9e 02 	lds	r24, 0x029E
     5a0:	90 91 9f 02 	lds	r25, 0x029F
     5a4:	20 91 e4 02 	lds	r18, 0x02E4
     5a8:	30 91 e5 02 	lds	r19, 0x02E5
     5ac:	28 17       	cp	r18, r24
     5ae:	39 07       	cpc	r19, r25
     5b0:	79 f0       	breq	.+30     	; 0x5d0 <qi_delete+0x34>
		return 0;
	fi = (fi + 1) % QI_SIZE;
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	60 e4       	ldi	r22, 0x40	; 64
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
     5bc:	90 93 9f 02 	sts	0x029F, r25
     5c0:	80 93 9e 02 	sts	0x029E, r24
	return (qi[fi]);
     5c4:	8a 51       	subi	r24, 0x1A	; 26
     5c6:	9d 4f       	sbci	r25, 0xFD	; 253
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	08 95       	ret
}

int qi_delete()
{
	if(ri == fi)
		return 0;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
	fi = (fi + 1) % QI_SIZE;
	return (qi[fi]);
}
     5d4:	08 95       	ret

000005d6 <qo_insert>:

int qo_insert(char ch)
{
     5d6:	48 2f       	mov	r20, r24
	if ((ro+1) % QO_SIZE == fo)
     5d8:	20 91 e2 02 	lds	r18, 0x02E2
     5dc:	30 91 e3 02 	lds	r19, 0x02E3
     5e0:	2f 5f       	subi	r18, 0xFF	; 255
     5e2:	3f 4f       	sbci	r19, 0xFF	; 255
     5e4:	c9 01       	movw	r24, r18
     5e6:	60 e4       	ldi	r22, 0x40	; 64
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
     5ee:	9c 01       	movw	r18, r24
     5f0:	80 91 e0 02 	lds	r24, 0x02E0
     5f4:	90 91 e1 02 	lds	r25, 0x02E1
     5f8:	28 17       	cp	r18, r24
     5fa:	39 07       	cpc	r19, r25
     5fc:	59 f0       	breq	.+22     	; 0x614 <qo_insert+0x3e>
		return 0;
	ro = (ro + 1) % QO_SIZE;
     5fe:	30 93 e3 02 	sts	0x02E3, r19
     602:	20 93 e2 02 	sts	0x02E2, r18
	qo[ro] = ch;
     606:	20 56       	subi	r18, 0x60	; 96
     608:	3d 4f       	sbci	r19, 0xFD	; 253
     60a:	f9 01       	movw	r30, r18
     60c:	40 83       	st	Z, r20
	return 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	08 95       	ret
}

int qo_insert(char ch)
{
	if ((ro+1) % QO_SIZE == fo)
		return 0;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
	ro = (ro + 1) % QO_SIZE;
	qo[ro] = ch;
	return 1;
}
     618:	08 95       	ret

0000061a <qo_delete>:

int qo_delete()
{
	if(ro == fo)
     61a:	80 91 e0 02 	lds	r24, 0x02E0
     61e:	90 91 e1 02 	lds	r25, 0x02E1
     622:	20 91 e2 02 	lds	r18, 0x02E2
     626:	30 91 e3 02 	lds	r19, 0x02E3
     62a:	28 17       	cp	r18, r24
     62c:	39 07       	cpc	r19, r25
     62e:	79 f0       	breq	.+30     	; 0x64e <qo_delete+0x34>
		return 0;
	fo = (fo + 1) % QO_SIZE;
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	60 e4       	ldi	r22, 0x40	; 64
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
     63a:	90 93 e1 02 	sts	0x02E1, r25
     63e:	80 93 e0 02 	sts	0x02E0, r24
	return (qo[fo]);
     642:	80 56       	subi	r24, 0x60	; 96
     644:	9d 4f       	sbci	r25, 0xFD	; 253
     646:	fc 01       	movw	r30, r24
     648:	80 81       	ld	r24, Z
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	08 95       	ret
}

int qo_delete()
{
	if(ro == fo)
		return 0;
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
	fo = (fo + 1) % QO_SIZE;
	return (qo[fo]);
}
     652:	08 95       	ret

00000654 <uart_getchar>:
int uart_getchar(FILE *stream)
{
	char ch;

	do {
		cli();
     654:	f8 94       	cli
		ch = qi_delete();
     656:	0e 94 ce 02 	call	0x59c	; 0x59c <qi_delete>
		sei();
     65a:	78 94       	sei
	} while (ch == 0);
     65c:	88 23       	and	r24, r24
     65e:	d1 f3       	breq	.-12     	; 0x654 <uart_getchar>

	if (ch == E0T) return -1;
     660:	84 30       	cpi	r24, 0x04	; 4
     662:	11 f0       	breq	.+4      	; 0x668 <uart_getchar+0x14>
	else			return (ch);
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	08 95       	ret
		cli();
		ch = qi_delete();
		sei();
	} while (ch == 0);

	if (ch == E0T) return -1;
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	9f ef       	ldi	r25, 0xFF	; 255
	else			return (ch);
}
     66c:	08 95       	ret

0000066e <uart_putchar>:
	sbi(UCSR0B, RXEN0);
	sbi(UCSR0B, RXCIE0);
}

int uart_putchar(char ch, FILE *stream)
{
     66e:	cf 93       	push	r28
     670:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_putchar('\r', stream);
     672:	8a 30       	cpi	r24, 0x0A	; 10
     674:	19 f4       	brne	.+6      	; 0x67c <uart_putchar+0xe>
     676:	8d e0       	ldi	r24, 0x0D	; 13
     678:	0e 94 37 03 	call	0x66e	; 0x66e <uart_putchar>

	cli();
     67c:	f8 94       	cli
	if(!uart_busy) {
     67e:	80 91 26 03 	lds	r24, 0x0326
     682:	88 23       	and	r24, r24
     684:	61 f4       	brne	.+24     	; 0x69e <uart_putchar+0x30>
		UDR0 = ch;
     686:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	80 93 26 03 	sts	0x0326, r24
     690:	0b c0       	rjmp	.+22     	; 0x6a8 <uart_putchar+0x3a>
	}
	else {
		while(qo_insert(ch) == 0) {
			sei();
     692:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     694:	88 e1       	ldi	r24, 0x18	; 24
     696:	8a 95       	dec	r24
     698:	f1 f7       	brne	.-4      	; 0x696 <uart_putchar+0x28>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <uart_putchar+0x2e>
			_delay_us(100);
			cli();
     69c:	f8 94       	cli
	if(!uart_busy) {
		UDR0 = ch;
		uart_busy = 1;
	}
	else {
		while(qo_insert(ch) == 0) {
     69e:	8c 2f       	mov	r24, r28
     6a0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <qo_insert>
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	a9 f3       	breq	.-22     	; 0x692 <uart_putchar+0x24>
			sei();
			_delay_us(100);
			cli();
		}
	}
	sei();
     6a8:	78 94       	sei
	return 1;
}
     6aa:	81 e0       	ldi	r24, 0x01	; 1
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <uart_init>:
FILE Mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
char uart_busy;

void uart_init()
{
	stdin = &Mystdin; stdout = &Mystdout;
     6b2:	88 e7       	ldi	r24, 0x78	; 120
     6b4:	92 e0       	ldi	r25, 0x02	; 2
     6b6:	90 93 2c 03 	sts	0x032C, r25
     6ba:	80 93 2b 03 	sts	0x032B, r24
     6be:	86 e8       	ldi	r24, 0x86	; 134
     6c0:	92 e0       	ldi	r25, 0x02	; 2
     6c2:	90 93 2e 03 	sts	0x032E, r25
     6c6:	80 93 2d 03 	sts	0x032D, r24
	q_init();
     6ca:	0e 94 9b 02 	call	0x536	; 0x536 <q_init>
	uart_busy = 0;
     6ce:	10 92 26 03 	sts	0x0326, r1

	UBRR0H = 0x00; UBRR0L = 0x07;
     6d2:	10 92 c5 00 	sts	0x00C5, r1
     6d6:	87 e0       	ldi	r24, 0x07	; 7
     6d8:	80 93 c4 00 	sts	0x00C4, r24
	sbi(UCSR0A, U2X0);
     6dc:	e0 ec       	ldi	r30, 0xC0	; 192
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	80 81       	ld	r24, Z
     6e2:	82 60       	ori	r24, 0x02	; 2
     6e4:	80 83       	st	Z, r24
	sbi(UCSR0B, TXEN0);
     6e6:	e1 ec       	ldi	r30, 0xC1	; 193
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	80 81       	ld	r24, Z
     6ec:	88 60       	ori	r24, 0x08	; 8
     6ee:	80 83       	st	Z, r24
	sbi(UCSR0B, TXCIE0);
     6f0:	80 81       	ld	r24, Z
     6f2:	80 64       	ori	r24, 0x40	; 64
     6f4:	80 83       	st	Z, r24
	sbi(UCSR0B, RXEN0);
     6f6:	80 81       	ld	r24, Z
     6f8:	80 61       	ori	r24, 0x10	; 16
     6fa:	80 83       	st	Z, r24
	sbi(UCSR0B, RXCIE0);
     6fc:	80 81       	ld	r24, Z
     6fe:	80 68       	ori	r24, 0x80	; 128
     700:	80 83       	st	Z, r24
}
     702:	08 95       	ret

00000704 <uart_echo>:
	if (ch == E0T) return -1;
	else			return (ch);
}

void uart_echo(char ch)
{
     704:	cf 93       	push	r28
     706:	c8 2f       	mov	r28, r24
	if (ch == '\n') uart_echo( '\r' );
     708:	8a 30       	cpi	r24, 0x0A	; 10
     70a:	19 f4       	brne	.+6      	; 0x712 <uart_echo+0xe>
     70c:	8d e0       	ldi	r24, 0x0D	; 13
     70e:	0e 94 82 03 	call	0x704	; 0x704 <uart_echo>
	if (!uart_busy) {
     712:	80 91 26 03 	lds	r24, 0x0326
     716:	88 23       	and	r24, r24
     718:	31 f4       	brne	.+12     	; 0x726 <uart_echo+0x22>
		UDR0 = ch;
     71a:	c0 93 c6 00 	sts	0x00C6, r28
		uart_busy = 1;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 26 03 	sts	0x0326, r24
     724:	03 c0       	rjmp	.+6      	; 0x72c <uart_echo+0x28>
	}
	else
		qo_insert(ch);
     726:	8c 2f       	mov	r24, r28
     728:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <qo_insert>
}
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <main>:

int is_prime(int n);
void app_prime(char *ap);

int main()
{
     730:	cf 93       	push	r28
     732:	df 93       	push	r29
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	c0 58       	subi	r28, 0x80	; 128
     73a:	d0 40       	sbci	r29, 0x00	; 0
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
	char cmd[128], *cp, *ap;

	uart_init();
     746:	0e 94 59 03 	call	0x6b2	; 0x6b2 <uart_init>
	sei();
     74a:	78 94       	sei
	while(1) {
		printf("$ ");
     74c:	23 e3       	ldi	r18, 0x33	; 51
     74e:	c2 2e       	mov	r12, r18
     750:	22 e0       	ldi	r18, 0x02	; 2
     752:	d2 2e       	mov	r13, r18
     754:	0f 92       	push	r0
     756:	0f 92       	push	r0
     758:	ed b7       	in	r30, 0x3d	; 61
     75a:	fe b7       	in	r31, 0x3e	; 62
     75c:	d2 82       	std	Z+2, r13	; 0x02
     75e:	c1 82       	std	Z+1, r12	; 0x01
     760:	0e 94 d6 05 	call	0xbac	; 0xbac <printf>
		if (fgets(cmd, sizeof(cmd), stdin) == NULL)
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	40 91 2b 03 	lds	r20, 0x032B
     76c:	50 91 2c 03 	lds	r21, 0x032C
     770:	ce 01       	movw	r24, r28
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	60 e8       	ldi	r22, 0x80	; 128
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	0e 94 a2 05 	call	0xb44	; 0xb44 <fgets>
     77c:	00 97       	sbiw	r24, 0x00	; 0
     77e:	61 f1       	breq	.+88     	; 0x7d8 <main+0xa8>
			break;
		if((cp = strtok(cmd, "\n\r\t    ")) == NULL) continue;
     780:	ce 01       	movw	r24, r28
     782:	01 96       	adiw	r24, 0x01	; 1
     784:	66 e3       	ldi	r22, 0x36	; 54
     786:	72 e0       	ldi	r23, 0x02	; 2
     788:	0e 94 65 05 	call	0xaca	; 0xaca <strtok>
     78c:	8c 01       	movw	r16, r24
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	09 f3       	breq	.-62     	; 0x754 <main+0x24>
		ap = strtok(NULL, "\n\r\t  ");
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	6e e3       	ldi	r22, 0x3E	; 62
     798:	72 e0       	ldi	r23, 0x02	; 2
     79a:	0e 94 65 05 	call	0xaca	; 0xaca <strtok>
     79e:	7c 01       	movw	r14, r24

		if(!strcmp(cmd, "prime")) app_prime(ap);
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	64 e4       	ldi	r22, 0x44	; 68
     7a6:	72 e0       	ldi	r23, 0x02	; 2
     7a8:	0e 94 6a 05 	call	0xad4	; 0xad4 <strcmp>
     7ac:	00 97       	sbiw	r24, 0x00	; 0
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <main+0x88>
     7b0:	c7 01       	movw	r24, r14
     7b2:	0e 94 4e 02 	call	0x49c	; 0x49c <app_prime>
     7b6:	ce cf       	rjmp	.-100    	; 0x754 <main+0x24>
		else if (!strcmp(cp, "list" )) app_list(ap);
     7b8:	c8 01       	movw	r24, r16
     7ba:	6a e4       	ldi	r22, 0x4A	; 74
     7bc:	72 e0       	ldi	r23, 0x02	; 2
     7be:	0e 94 6a 05 	call	0xad4	; 0xad4 <strcmp>
     7c2:	00 97       	sbiw	r24, 0x00	; 0
     7c4:	21 f4       	brne	.+8      	; 0x7ce <main+0x9e>
     7c6:	c7 01       	movw	r24, r14
     7c8:	0e 94 76 01 	call	0x2ec	; 0x2ec <app_list>
     7cc:	c3 cf       	rjmp	.-122    	; 0x754 <main+0x24>
		else						printf("Unknown command ...\n");
     7ce:	8f e4       	ldi	r24, 0x4F	; 79
     7d0:	92 e0       	ldi	r25, 0x02	; 2
     7d2:	0e 94 ef 05 	call	0xbde	; 0xbde <puts>
     7d6:	be cf       	rjmp	.-132    	; 0x754 <main+0x24>
	}
	printf( "logout, good bye !!!\n");
     7d8:	83 e6       	ldi	r24, 0x63	; 99
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	0e 94 ef 05 	call	0xbde	; 0xbde <puts>
     7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <main+0xb0>

000007e2 <__divmodhi4>:
     7e2:	97 fb       	bst	r25, 7
     7e4:	09 2e       	mov	r0, r25
     7e6:	07 26       	eor	r0, r23
     7e8:	0a d0       	rcall	.+20     	; 0x7fe <__divmodhi4_neg1>
     7ea:	77 fd       	sbrc	r23, 7
     7ec:	04 d0       	rcall	.+8      	; 0x7f6 <__divmodhi4_neg2>
     7ee:	0c d0       	rcall	.+24     	; 0x808 <__udivmodhi4>
     7f0:	06 d0       	rcall	.+12     	; 0x7fe <__divmodhi4_neg1>
     7f2:	00 20       	and	r0, r0
     7f4:	1a f4       	brpl	.+6      	; 0x7fc <__divmodhi4_exit>

000007f6 <__divmodhi4_neg2>:
     7f6:	70 95       	com	r23
     7f8:	61 95       	neg	r22
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255

000007fc <__divmodhi4_exit>:
     7fc:	08 95       	ret

000007fe <__divmodhi4_neg1>:
     7fe:	f6 f7       	brtc	.-4      	; 0x7fc <__divmodhi4_exit>
     800:	90 95       	com	r25
     802:	81 95       	neg	r24
     804:	9f 4f       	sbci	r25, 0xFF	; 255
     806:	08 95       	ret

00000808 <__udivmodhi4>:
     808:	aa 1b       	sub	r26, r26
     80a:	bb 1b       	sub	r27, r27
     80c:	51 e1       	ldi	r21, 0x11	; 17
     80e:	07 c0       	rjmp	.+14     	; 0x81e <__udivmodhi4_ep>

00000810 <__udivmodhi4_loop>:
     810:	aa 1f       	adc	r26, r26
     812:	bb 1f       	adc	r27, r27
     814:	a6 17       	cp	r26, r22
     816:	b7 07       	cpc	r27, r23
     818:	10 f0       	brcs	.+4      	; 0x81e <__udivmodhi4_ep>
     81a:	a6 1b       	sub	r26, r22
     81c:	b7 0b       	sbc	r27, r23

0000081e <__udivmodhi4_ep>:
     81e:	88 1f       	adc	r24, r24
     820:	99 1f       	adc	r25, r25
     822:	5a 95       	dec	r21
     824:	a9 f7       	brne	.-22     	; 0x810 <__udivmodhi4_loop>
     826:	80 95       	com	r24
     828:	90 95       	com	r25
     82a:	bc 01       	movw	r22, r24
     82c:	cd 01       	movw	r24, r26
     82e:	08 95       	ret

00000830 <malloc>:
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	ac 01       	movw	r20, r24
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	91 05       	cpc	r25, r1
     83a:	10 f4       	brcc	.+4      	; 0x840 <malloc+0x10>
     83c:	42 e0       	ldi	r20, 0x02	; 2
     83e:	50 e0       	ldi	r21, 0x00	; 0
     840:	e0 91 29 03 	lds	r30, 0x0329
     844:	f0 91 2a 03 	lds	r31, 0x032A
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	24 c0       	rjmp	.+72     	; 0x89a <malloc+0x6a>
     852:	80 81       	ld	r24, Z
     854:	91 81       	ldd	r25, Z+1	; 0x01
     856:	84 17       	cp	r24, r20
     858:	95 07       	cpc	r25, r21
     85a:	d0 f0       	brcs	.+52     	; 0x890 <malloc+0x60>
     85c:	84 17       	cp	r24, r20
     85e:	95 07       	cpc	r25, r21
     860:	71 f4       	brne	.+28     	; 0x87e <malloc+0x4e>
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	93 81       	ldd	r25, Z+3	; 0x03
     866:	10 97       	sbiw	r26, 0x00	; 0
     868:	29 f0       	breq	.+10     	; 0x874 <malloc+0x44>
     86a:	13 96       	adiw	r26, 0x03	; 3
     86c:	9c 93       	st	X, r25
     86e:	8e 93       	st	-X, r24
     870:	12 97       	sbiw	r26, 0x02	; 2
     872:	2c c0       	rjmp	.+88     	; 0x8cc <malloc+0x9c>
     874:	90 93 2a 03 	sts	0x032A, r25
     878:	80 93 29 03 	sts	0x0329, r24
     87c:	27 c0       	rjmp	.+78     	; 0x8cc <malloc+0x9c>
     87e:	21 15       	cp	r18, r1
     880:	31 05       	cpc	r19, r1
     882:	19 f0       	breq	.+6      	; 0x88a <malloc+0x5a>
     884:	82 17       	cp	r24, r18
     886:	93 07       	cpc	r25, r19
     888:	18 f4       	brcc	.+6      	; 0x890 <malloc+0x60>
     88a:	9c 01       	movw	r18, r24
     88c:	bd 01       	movw	r22, r26
     88e:	ef 01       	movw	r28, r30
     890:	92 81       	ldd	r25, Z+2	; 0x02
     892:	83 81       	ldd	r24, Z+3	; 0x03
     894:	df 01       	movw	r26, r30
     896:	e9 2f       	mov	r30, r25
     898:	f8 2f       	mov	r31, r24
     89a:	30 97       	sbiw	r30, 0x00	; 0
     89c:	d1 f6       	brne	.-76     	; 0x852 <malloc+0x22>
     89e:	21 15       	cp	r18, r1
     8a0:	31 05       	cpc	r19, r1
     8a2:	f9 f0       	breq	.+62     	; 0x8e2 <malloc+0xb2>
     8a4:	c9 01       	movw	r24, r18
     8a6:	84 1b       	sub	r24, r20
     8a8:	95 0b       	sbc	r25, r21
     8aa:	84 30       	cpi	r24, 0x04	; 4
     8ac:	91 05       	cpc	r25, r1
     8ae:	80 f4       	brcc	.+32     	; 0x8d0 <malloc+0xa0>
     8b0:	8a 81       	ldd	r24, Y+2	; 0x02
     8b2:	9b 81       	ldd	r25, Y+3	; 0x03
     8b4:	61 15       	cp	r22, r1
     8b6:	71 05       	cpc	r23, r1
     8b8:	21 f0       	breq	.+8      	; 0x8c2 <malloc+0x92>
     8ba:	fb 01       	movw	r30, r22
     8bc:	93 83       	std	Z+3, r25	; 0x03
     8be:	82 83       	std	Z+2, r24	; 0x02
     8c0:	04 c0       	rjmp	.+8      	; 0x8ca <malloc+0x9a>
     8c2:	90 93 2a 03 	sts	0x032A, r25
     8c6:	80 93 29 03 	sts	0x0329, r24
     8ca:	fe 01       	movw	r30, r28
     8cc:	32 96       	adiw	r30, 0x02	; 2
     8ce:	42 c0       	rjmp	.+132    	; 0x954 <malloc+0x124>
     8d0:	fe 01       	movw	r30, r28
     8d2:	e8 0f       	add	r30, r24
     8d4:	f9 1f       	adc	r31, r25
     8d6:	41 93       	st	Z+, r20
     8d8:	51 93       	st	Z+, r21
     8da:	02 97       	sbiw	r24, 0x02	; 2
     8dc:	99 83       	std	Y+1, r25	; 0x01
     8de:	88 83       	st	Y, r24
     8e0:	39 c0       	rjmp	.+114    	; 0x954 <malloc+0x124>
     8e2:	80 91 27 03 	lds	r24, 0x0327
     8e6:	90 91 28 03 	lds	r25, 0x0328
     8ea:	00 97       	sbiw	r24, 0x00	; 0
     8ec:	41 f4       	brne	.+16     	; 0x8fe <malloc+0xce>
     8ee:	80 91 96 02 	lds	r24, 0x0296
     8f2:	90 91 97 02 	lds	r25, 0x0297
     8f6:	90 93 28 03 	sts	0x0328, r25
     8fa:	80 93 27 03 	sts	0x0327, r24
     8fe:	20 91 94 02 	lds	r18, 0x0294
     902:	30 91 95 02 	lds	r19, 0x0295
     906:	21 15       	cp	r18, r1
     908:	31 05       	cpc	r19, r1
     90a:	41 f4       	brne	.+16     	; 0x91c <malloc+0xec>
     90c:	2d b7       	in	r18, 0x3d	; 61
     90e:	3e b7       	in	r19, 0x3e	; 62
     910:	80 91 98 02 	lds	r24, 0x0298
     914:	90 91 99 02 	lds	r25, 0x0299
     918:	28 1b       	sub	r18, r24
     91a:	39 0b       	sbc	r19, r25
     91c:	e0 91 27 03 	lds	r30, 0x0327
     920:	f0 91 28 03 	lds	r31, 0x0328
     924:	e2 17       	cp	r30, r18
     926:	f3 07       	cpc	r31, r19
     928:	98 f4       	brcc	.+38     	; 0x950 <malloc+0x120>
     92a:	2e 1b       	sub	r18, r30
     92c:	3f 0b       	sbc	r19, r31
     92e:	24 17       	cp	r18, r20
     930:	35 07       	cpc	r19, r21
     932:	70 f0       	brcs	.+28     	; 0x950 <malloc+0x120>
     934:	ca 01       	movw	r24, r20
     936:	02 96       	adiw	r24, 0x02	; 2
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	48 f0       	brcs	.+18     	; 0x950 <malloc+0x120>
     93e:	8e 0f       	add	r24, r30
     940:	9f 1f       	adc	r25, r31
     942:	90 93 28 03 	sts	0x0328, r25
     946:	80 93 27 03 	sts	0x0327, r24
     94a:	41 93       	st	Z+, r20
     94c:	51 93       	st	Z+, r21
     94e:	02 c0       	rjmp	.+4      	; 0x954 <malloc+0x124>
     950:	e0 e0       	ldi	r30, 0x00	; 0
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	cf 01       	movw	r24, r30
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <free>:
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	9c 01       	movw	r18, r24
     966:	00 97       	sbiw	r24, 0x00	; 0
     968:	09 f4       	brne	.+2      	; 0x96c <free+0x10>
     96a:	8c c0       	rjmp	.+280    	; 0xa84 <free+0x128>
     96c:	dc 01       	movw	r26, r24
     96e:	12 97       	sbiw	r26, 0x02	; 2
     970:	13 96       	adiw	r26, 0x03	; 3
     972:	1c 92       	st	X, r1
     974:	1e 92       	st	-X, r1
     976:	12 97       	sbiw	r26, 0x02	; 2
     978:	60 91 29 03 	lds	r22, 0x0329
     97c:	70 91 2a 03 	lds	r23, 0x032A
     980:	61 15       	cp	r22, r1
     982:	71 05       	cpc	r23, r1
     984:	89 f4       	brne	.+34     	; 0x9a8 <free+0x4c>
     986:	8d 91       	ld	r24, X+
     988:	9c 91       	ld	r25, X
     98a:	11 97       	sbiw	r26, 0x01	; 1
     98c:	82 0f       	add	r24, r18
     98e:	93 1f       	adc	r25, r19
     990:	20 91 27 03 	lds	r18, 0x0327
     994:	30 91 28 03 	lds	r19, 0x0328
     998:	28 17       	cp	r18, r24
     99a:	39 07       	cpc	r19, r25
     99c:	69 f5       	brne	.+90     	; 0x9f8 <free+0x9c>
     99e:	b0 93 28 03 	sts	0x0328, r27
     9a2:	a0 93 27 03 	sts	0x0327, r26
     9a6:	6e c0       	rjmp	.+220    	; 0xa84 <free+0x128>
     9a8:	fb 01       	movw	r30, r22
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	50 e0       	ldi	r21, 0x00	; 0
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <free+0x56>
     9b0:	fc 01       	movw	r30, r24
     9b2:	ea 17       	cp	r30, r26
     9b4:	fb 07       	cpc	r31, r27
     9b6:	30 f4       	brcc	.+12     	; 0x9c4 <free+0x68>
     9b8:	82 81       	ldd	r24, Z+2	; 0x02
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	af 01       	movw	r20, r30
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	b9 f7       	brne	.-18     	; 0x9b0 <free+0x54>
     9c2:	1f c0       	rjmp	.+62     	; 0xa02 <free+0xa6>
     9c4:	e9 01       	movw	r28, r18
     9c6:	22 97       	sbiw	r28, 0x02	; 2
     9c8:	fb 83       	std	Y+3, r31	; 0x03
     9ca:	ea 83       	std	Y+2, r30	; 0x02
     9cc:	08 81       	ld	r16, Y
     9ce:	19 81       	ldd	r17, Y+1	; 0x01
     9d0:	c9 01       	movw	r24, r18
     9d2:	80 0f       	add	r24, r16
     9d4:	91 1f       	adc	r25, r17
     9d6:	8e 17       	cp	r24, r30
     9d8:	9f 07       	cpc	r25, r31
     9da:	59 f4       	brne	.+22     	; 0x9f2 <free+0x96>
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	80 0f       	add	r24, r16
     9e2:	91 1f       	adc	r25, r17
     9e4:	02 96       	adiw	r24, 0x02	; 2
     9e6:	99 83       	std	Y+1, r25	; 0x01
     9e8:	88 83       	st	Y, r24
     9ea:	82 81       	ldd	r24, Z+2	; 0x02
     9ec:	93 81       	ldd	r25, Z+3	; 0x03
     9ee:	9b 83       	std	Y+3, r25	; 0x03
     9f0:	8a 83       	std	Y+2, r24	; 0x02
     9f2:	41 15       	cp	r20, r1
     9f4:	51 05       	cpc	r21, r1
     9f6:	29 f4       	brne	.+10     	; 0xa02 <free+0xa6>
     9f8:	b0 93 2a 03 	sts	0x032A, r27
     9fc:	a0 93 29 03 	sts	0x0329, r26
     a00:	41 c0       	rjmp	.+130    	; 0xa84 <free+0x128>
     a02:	fa 01       	movw	r30, r20
     a04:	b3 83       	std	Z+3, r27	; 0x03
     a06:	a2 83       	std	Z+2, r26	; 0x02
     a08:	c1 91       	ld	r28, Z+
     a0a:	d1 91       	ld	r29, Z+
     a0c:	ec 0f       	add	r30, r28
     a0e:	fd 1f       	adc	r31, r29
     a10:	ae 17       	cp	r26, r30
     a12:	bf 07       	cpc	r27, r31
     a14:	81 f4       	brne	.+32     	; 0xa36 <free+0xda>
     a16:	f9 01       	movw	r30, r18
     a18:	92 91       	ld	r25, -Z
     a1a:	82 91       	ld	r24, -Z
     a1c:	8c 0f       	add	r24, r28
     a1e:	9d 1f       	adc	r25, r29
     a20:	02 96       	adiw	r24, 0x02	; 2
     a22:	da 01       	movw	r26, r20
     a24:	11 96       	adiw	r26, 0x01	; 1
     a26:	9c 93       	st	X, r25
     a28:	8e 93       	st	-X, r24
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	93 81       	ldd	r25, Z+3	; 0x03
     a2e:	13 96       	adiw	r26, 0x03	; 3
     a30:	9c 93       	st	X, r25
     a32:	8e 93       	st	-X, r24
     a34:	12 97       	sbiw	r26, 0x02	; 2
     a36:	e0 e0       	ldi	r30, 0x00	; 0
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <free+0xe4>
     a3c:	fb 01       	movw	r30, r22
     a3e:	bc 01       	movw	r22, r24
     a40:	db 01       	movw	r26, r22
     a42:	12 96       	adiw	r26, 0x02	; 2
     a44:	8d 91       	ld	r24, X+
     a46:	9c 91       	ld	r25, X
     a48:	13 97       	sbiw	r26, 0x03	; 3
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	b9 f7       	brne	.-18     	; 0xa3c <free+0xe0>
     a4e:	cb 01       	movw	r24, r22
     a50:	02 96       	adiw	r24, 0x02	; 2
     a52:	2d 91       	ld	r18, X+
     a54:	3c 91       	ld	r19, X
     a56:	11 97       	sbiw	r26, 0x01	; 1
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	20 91 27 03 	lds	r18, 0x0327
     a60:	30 91 28 03 	lds	r19, 0x0328
     a64:	28 17       	cp	r18, r24
     a66:	39 07       	cpc	r19, r25
     a68:	69 f4       	brne	.+26     	; 0xa84 <free+0x128>
     a6a:	30 97       	sbiw	r30, 0x00	; 0
     a6c:	29 f4       	brne	.+10     	; 0xa78 <free+0x11c>
     a6e:	10 92 2a 03 	sts	0x032A, r1
     a72:	10 92 29 03 	sts	0x0329, r1
     a76:	02 c0       	rjmp	.+4      	; 0xa7c <free+0x120>
     a78:	13 82       	std	Z+3, r1	; 0x03
     a7a:	12 82       	std	Z+2, r1	; 0x02
     a7c:	70 93 28 03 	sts	0x0328, r23
     a80:	60 93 27 03 	sts	0x0327, r22
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <atoi>:
     a8e:	fc 01       	movw	r30, r24
     a90:	88 27       	eor	r24, r24
     a92:	99 27       	eor	r25, r25
     a94:	e8 94       	clt
     a96:	21 91       	ld	r18, Z+
     a98:	20 32       	cpi	r18, 0x20	; 32
     a9a:	e9 f3       	breq	.-6      	; 0xa96 <atoi+0x8>
     a9c:	29 30       	cpi	r18, 0x09	; 9
     a9e:	10 f0       	brcs	.+4      	; 0xaa4 <atoi+0x16>
     aa0:	2e 30       	cpi	r18, 0x0E	; 14
     aa2:	c8 f3       	brcs	.-14     	; 0xa96 <atoi+0x8>
     aa4:	2b 32       	cpi	r18, 0x2B	; 43
     aa6:	41 f0       	breq	.+16     	; 0xab8 <atoi+0x2a>
     aa8:	2d 32       	cpi	r18, 0x2D	; 45
     aaa:	39 f4       	brne	.+14     	; 0xaba <atoi+0x2c>
     aac:	68 94       	set
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <atoi+0x2a>
     ab0:	0e 94 9a 05 	call	0xb34	; 0xb34 <__mulhi_const_10>
     ab4:	82 0f       	add	r24, r18
     ab6:	91 1d       	adc	r25, r1
     ab8:	21 91       	ld	r18, Z+
     aba:	20 53       	subi	r18, 0x30	; 48
     abc:	2a 30       	cpi	r18, 0x0A	; 10
     abe:	c0 f3       	brcs	.-16     	; 0xab0 <atoi+0x22>
     ac0:	1e f4       	brtc	.+6      	; 0xac8 <atoi+0x3a>
     ac2:	90 95       	com	r25
     ac4:	81 95       	neg	r24
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	08 95       	ret

00000aca <strtok>:
     aca:	4c e9       	ldi	r20, 0x9C	; 156
     acc:	52 e0       	ldi	r21, 0x02	; 2
     ace:	0e 94 73 05 	call	0xae6	; 0xae6 <strtok_r>
     ad2:	08 95       	ret

00000ad4 <strcmp>:
     ad4:	fb 01       	movw	r30, r22
     ad6:	dc 01       	movw	r26, r24
     ad8:	8d 91       	ld	r24, X+
     ada:	01 90       	ld	r0, Z+
     adc:	80 19       	sub	r24, r0
     ade:	01 10       	cpse	r0, r1
     ae0:	d9 f3       	breq	.-10     	; 0xad8 <strcmp+0x4>
     ae2:	99 0b       	sbc	r25, r25
     ae4:	08 95       	ret

00000ae6 <strtok_r>:
     ae6:	fa 01       	movw	r30, r20
     ae8:	a1 91       	ld	r26, Z+
     aea:	b0 81       	ld	r27, Z
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	19 f4       	brne	.+6      	; 0xaf6 <strtok_r+0x10>
     af0:	10 97       	sbiw	r26, 0x00	; 0
     af2:	e1 f0       	breq	.+56     	; 0xb2c <strtok_r+0x46>
     af4:	cd 01       	movw	r24, r26
     af6:	dc 01       	movw	r26, r24
     af8:	cd 01       	movw	r24, r26
     afa:	0d 90       	ld	r0, X+
     afc:	00 20       	and	r0, r0
     afe:	11 f4       	brne	.+4      	; 0xb04 <strtok_r+0x1e>
     b00:	c0 01       	movw	r24, r0
     b02:	13 c0       	rjmp	.+38     	; 0xb2a <strtok_r+0x44>
     b04:	fb 01       	movw	r30, r22
     b06:	21 91       	ld	r18, Z+
     b08:	22 23       	and	r18, r18
     b0a:	19 f0       	breq	.+6      	; 0xb12 <strtok_r+0x2c>
     b0c:	20 15       	cp	r18, r0
     b0e:	d9 f7       	brne	.-10     	; 0xb06 <strtok_r+0x20>
     b10:	f3 cf       	rjmp	.-26     	; 0xaf8 <strtok_r+0x12>
     b12:	fb 01       	movw	r30, r22
     b14:	21 91       	ld	r18, Z+
     b16:	20 15       	cp	r18, r0
     b18:	19 f4       	brne	.+6      	; 0xb20 <strtok_r+0x3a>
     b1a:	1e 92       	st	-X, r1
     b1c:	11 96       	adiw	r26, 0x01	; 1
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <strtok_r+0x46>
     b20:	22 23       	and	r18, r18
     b22:	c1 f7       	brne	.-16     	; 0xb14 <strtok_r+0x2e>
     b24:	0d 90       	ld	r0, X+
     b26:	00 20       	and	r0, r0
     b28:	a1 f7       	brne	.-24     	; 0xb12 <strtok_r+0x2c>
     b2a:	d0 01       	movw	r26, r0
     b2c:	fa 01       	movw	r30, r20
     b2e:	a1 93       	st	Z+, r26
     b30:	b0 83       	st	Z, r27
     b32:	08 95       	ret

00000b34 <__mulhi_const_10>:
     b34:	7a e0       	ldi	r23, 0x0A	; 10
     b36:	97 9f       	mul	r25, r23
     b38:	90 2d       	mov	r25, r0
     b3a:	87 9f       	mul	r24, r23
     b3c:	80 2d       	mov	r24, r0
     b3e:	91 0d       	add	r25, r1
     b40:	11 24       	eor	r1, r1
     b42:	08 95       	ret

00000b44 <fgets>:
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	8c 01       	movw	r16, r24
     b56:	6a 01       	movw	r12, r20
     b58:	fa 01       	movw	r30, r20
     b5a:	83 81       	ldd	r24, Z+3	; 0x03
     b5c:	80 ff       	sbrs	r24, 0
     b5e:	1a c0       	rjmp	.+52     	; 0xb94 <fgets+0x50>
     b60:	16 16       	cp	r1, r22
     b62:	17 06       	cpc	r1, r23
     b64:	bc f4       	brge	.+46     	; 0xb94 <fgets+0x50>
     b66:	7b 01       	movw	r14, r22
     b68:	e8 01       	movw	r28, r16
     b6a:	0e c0       	rjmp	.+28     	; 0xb88 <fgets+0x44>
     b6c:	c6 01       	movw	r24, r12
     b6e:	0e 94 3a 08 	call	0x1074	; 0x1074 <fgetc>
     b72:	ff ef       	ldi	r31, 0xFF	; 255
     b74:	8f 3f       	cpi	r24, 0xFF	; 255
     b76:	9f 07       	cpc	r25, r31
     b78:	69 f0       	breq	.+26     	; 0xb94 <fgets+0x50>
     b7a:	89 93       	st	Y+, r24
     b7c:	08 94       	sec
     b7e:	e1 08       	sbc	r14, r1
     b80:	f1 08       	sbc	r15, r1
     b82:	8a 30       	cpi	r24, 0x0A	; 10
     b84:	91 05       	cpc	r25, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <fgets+0x4c>
     b88:	21 e0       	ldi	r18, 0x01	; 1
     b8a:	e2 16       	cp	r14, r18
     b8c:	f1 04       	cpc	r15, r1
     b8e:	71 f7       	brne	.-36     	; 0xb6c <fgets+0x28>
     b90:	18 82       	st	Y, r1
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <fgets+0x54>
     b94:	00 e0       	ldi	r16, 0x00	; 0
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	c8 01       	movw	r24, r16
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	08 95       	ret

00000bac <printf>:
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	fe 01       	movw	r30, r28
     bb6:	36 96       	adiw	r30, 0x06	; 6
     bb8:	61 91       	ld	r22, Z+
     bba:	71 91       	ld	r23, Z+
     bbc:	80 91 2d 03 	lds	r24, 0x032D
     bc0:	90 91 2e 03 	lds	r25, 0x032E
     bc4:	af 01       	movw	r20, r30
     bc6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <vfprintf>
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <putchar>:
     bd0:	60 91 2d 03 	lds	r22, 0x032D
     bd4:	70 91 2e 03 	lds	r23, 0x032E
     bd8:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     bdc:	08 95       	ret

00000bde <puts>:
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	8c 01       	movw	r16, r24
     be8:	e0 91 2d 03 	lds	r30, 0x032D
     bec:	f0 91 2e 03 	lds	r31, 0x032E
     bf0:	83 81       	ldd	r24, Z+3	; 0x03
     bf2:	81 ff       	sbrs	r24, 1
     bf4:	1a c0       	rjmp	.+52     	; 0xc2a <puts+0x4c>
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
     bfa:	05 c0       	rjmp	.+10     	; 0xc06 <puts+0x28>
     bfc:	19 95       	eicall
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	11 f0       	breq	.+4      	; 0xc06 <puts+0x28>
     c02:	cf ef       	ldi	r28, 0xFF	; 255
     c04:	df ef       	ldi	r29, 0xFF	; 255
     c06:	f8 01       	movw	r30, r16
     c08:	81 91       	ld	r24, Z+
     c0a:	8f 01       	movw	r16, r30
     c0c:	60 91 2d 03 	lds	r22, 0x032D
     c10:	70 91 2e 03 	lds	r23, 0x032E
     c14:	db 01       	movw	r26, r22
     c16:	18 96       	adiw	r26, 0x08	; 8
     c18:	ed 91       	ld	r30, X+
     c1a:	fc 91       	ld	r31, X
     c1c:	19 97       	sbiw	r26, 0x09	; 9
     c1e:	88 23       	and	r24, r24
     c20:	69 f7       	brne	.-38     	; 0xbfc <puts+0x1e>
     c22:	8a e0       	ldi	r24, 0x0A	; 10
     c24:	19 95       	eicall
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	11 f0       	breq	.+4      	; 0xc2e <puts+0x50>
     c2a:	cf ef       	ldi	r28, 0xFF	; 255
     c2c:	df ef       	ldi	r29, 0xFF	; 255
     c2e:	ce 01       	movw	r24, r28
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	08 95       	ret

00000c3a <vfprintf>:
     c3a:	2f 92       	push	r2
     c3c:	3f 92       	push	r3
     c3e:	4f 92       	push	r4
     c40:	5f 92       	push	r5
     c42:	6f 92       	push	r6
     c44:	7f 92       	push	r7
     c46:	8f 92       	push	r8
     c48:	9f 92       	push	r9
     c4a:	af 92       	push	r10
     c4c:	bf 92       	push	r11
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	2d 97       	sbiw	r28, 0x0d	; 13
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	3c 01       	movw	r6, r24
     c70:	7d 87       	std	Y+13, r23	; 0x0d
     c72:	6c 87       	std	Y+12, r22	; 0x0c
     c74:	5a 01       	movw	r10, r20
     c76:	fc 01       	movw	r30, r24
     c78:	17 82       	std	Z+7, r1	; 0x07
     c7a:	16 82       	std	Z+6, r1	; 0x06
     c7c:	83 81       	ldd	r24, Z+3	; 0x03
     c7e:	81 ff       	sbrs	r24, 1
     c80:	c8 c1       	rjmp	.+912    	; 0x1012 <vfprintf+0x3d8>
     c82:	2e 01       	movw	r4, r28
     c84:	08 94       	sec
     c86:	41 1c       	adc	r4, r1
     c88:	51 1c       	adc	r5, r1
     c8a:	f3 01       	movw	r30, r6
     c8c:	93 81       	ldd	r25, Z+3	; 0x03
     c8e:	ec 85       	ldd	r30, Y+12	; 0x0c
     c90:	fd 85       	ldd	r31, Y+13	; 0x0d
     c92:	93 fd       	sbrc	r25, 3
     c94:	85 91       	lpm	r24, Z+
     c96:	93 ff       	sbrs	r25, 3
     c98:	81 91       	ld	r24, Z+
     c9a:	fd 87       	std	Y+13, r31	; 0x0d
     c9c:	ec 87       	std	Y+12, r30	; 0x0c
     c9e:	88 23       	and	r24, r24
     ca0:	09 f4       	brne	.+2      	; 0xca4 <vfprintf+0x6a>
     ca2:	b3 c1       	rjmp	.+870    	; 0x100a <vfprintf+0x3d0>
     ca4:	85 32       	cpi	r24, 0x25	; 37
     ca6:	41 f4       	brne	.+16     	; 0xcb8 <vfprintf+0x7e>
     ca8:	93 fd       	sbrc	r25, 3
     caa:	85 91       	lpm	r24, Z+
     cac:	93 ff       	sbrs	r25, 3
     cae:	81 91       	ld	r24, Z+
     cb0:	fd 87       	std	Y+13, r31	; 0x0d
     cb2:	ec 87       	std	Y+12, r30	; 0x0c
     cb4:	85 32       	cpi	r24, 0x25	; 37
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <vfprintf+0x88>
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	b3 01       	movw	r22, r6
     cbc:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     cc0:	e4 cf       	rjmp	.-56     	; 0xc8a <vfprintf+0x50>
     cc2:	ff 24       	eor	r15, r15
     cc4:	ee 24       	eor	r14, r14
     cc6:	10 e0       	ldi	r17, 0x00	; 0
     cc8:	10 32       	cpi	r17, 0x20	; 32
     cca:	b0 f4       	brcc	.+44     	; 0xcf8 <vfprintf+0xbe>
     ccc:	8b 32       	cpi	r24, 0x2B	; 43
     cce:	69 f0       	breq	.+26     	; 0xcea <vfprintf+0xb0>
     cd0:	8c 32       	cpi	r24, 0x2C	; 44
     cd2:	28 f4       	brcc	.+10     	; 0xcde <vfprintf+0xa4>
     cd4:	80 32       	cpi	r24, 0x20	; 32
     cd6:	51 f0       	breq	.+20     	; 0xcec <vfprintf+0xb2>
     cd8:	83 32       	cpi	r24, 0x23	; 35
     cda:	71 f4       	brne	.+28     	; 0xcf8 <vfprintf+0xbe>
     cdc:	0b c0       	rjmp	.+22     	; 0xcf4 <vfprintf+0xba>
     cde:	8d 32       	cpi	r24, 0x2D	; 45
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <vfprintf+0xb6>
     ce2:	80 33       	cpi	r24, 0x30	; 48
     ce4:	49 f4       	brne	.+18     	; 0xcf8 <vfprintf+0xbe>
     ce6:	11 60       	ori	r17, 0x01	; 1
     ce8:	2c c0       	rjmp	.+88     	; 0xd42 <vfprintf+0x108>
     cea:	12 60       	ori	r17, 0x02	; 2
     cec:	14 60       	ori	r17, 0x04	; 4
     cee:	29 c0       	rjmp	.+82     	; 0xd42 <vfprintf+0x108>
     cf0:	18 60       	ori	r17, 0x08	; 8
     cf2:	27 c0       	rjmp	.+78     	; 0xd42 <vfprintf+0x108>
     cf4:	10 61       	ori	r17, 0x10	; 16
     cf6:	25 c0       	rjmp	.+74     	; 0xd42 <vfprintf+0x108>
     cf8:	17 fd       	sbrc	r17, 7
     cfa:	2e c0       	rjmp	.+92     	; 0xd58 <vfprintf+0x11e>
     cfc:	28 2f       	mov	r18, r24
     cfe:	20 53       	subi	r18, 0x30	; 48
     d00:	2a 30       	cpi	r18, 0x0A	; 10
     d02:	98 f4       	brcc	.+38     	; 0xd2a <vfprintf+0xf0>
     d04:	16 ff       	sbrs	r17, 6
     d06:	08 c0       	rjmp	.+16     	; 0xd18 <vfprintf+0xde>
     d08:	8f 2d       	mov	r24, r15
     d0a:	88 0f       	add	r24, r24
     d0c:	f8 2e       	mov	r15, r24
     d0e:	ff 0c       	add	r15, r15
     d10:	ff 0c       	add	r15, r15
     d12:	f8 0e       	add	r15, r24
     d14:	f2 0e       	add	r15, r18
     d16:	15 c0       	rjmp	.+42     	; 0xd42 <vfprintf+0x108>
     d18:	8e 2d       	mov	r24, r14
     d1a:	88 0f       	add	r24, r24
     d1c:	e8 2e       	mov	r14, r24
     d1e:	ee 0c       	add	r14, r14
     d20:	ee 0c       	add	r14, r14
     d22:	e8 0e       	add	r14, r24
     d24:	e2 0e       	add	r14, r18
     d26:	10 62       	ori	r17, 0x20	; 32
     d28:	0c c0       	rjmp	.+24     	; 0xd42 <vfprintf+0x108>
     d2a:	8e 32       	cpi	r24, 0x2E	; 46
     d2c:	21 f4       	brne	.+8      	; 0xd36 <vfprintf+0xfc>
     d2e:	16 fd       	sbrc	r17, 6
     d30:	6c c1       	rjmp	.+728    	; 0x100a <vfprintf+0x3d0>
     d32:	10 64       	ori	r17, 0x40	; 64
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <vfprintf+0x108>
     d36:	8c 36       	cpi	r24, 0x6C	; 108
     d38:	11 f4       	brne	.+4      	; 0xd3e <vfprintf+0x104>
     d3a:	10 68       	ori	r17, 0x80	; 128
     d3c:	02 c0       	rjmp	.+4      	; 0xd42 <vfprintf+0x108>
     d3e:	88 36       	cpi	r24, 0x68	; 104
     d40:	59 f4       	brne	.+22     	; 0xd58 <vfprintf+0x11e>
     d42:	ec 85       	ldd	r30, Y+12	; 0x0c
     d44:	fd 85       	ldd	r31, Y+13	; 0x0d
     d46:	93 fd       	sbrc	r25, 3
     d48:	85 91       	lpm	r24, Z+
     d4a:	93 ff       	sbrs	r25, 3
     d4c:	81 91       	ld	r24, Z+
     d4e:	fd 87       	std	Y+13, r31	; 0x0d
     d50:	ec 87       	std	Y+12, r30	; 0x0c
     d52:	88 23       	and	r24, r24
     d54:	09 f0       	breq	.+2      	; 0xd58 <vfprintf+0x11e>
     d56:	b8 cf       	rjmp	.-144    	; 0xcc8 <vfprintf+0x8e>
     d58:	98 2f       	mov	r25, r24
     d5a:	95 54       	subi	r25, 0x45	; 69
     d5c:	93 30       	cpi	r25, 0x03	; 3
     d5e:	18 f0       	brcs	.+6      	; 0xd66 <vfprintf+0x12c>
     d60:	90 52       	subi	r25, 0x20	; 32
     d62:	93 30       	cpi	r25, 0x03	; 3
     d64:	38 f4       	brcc	.+14     	; 0xd74 <vfprintf+0x13a>
     d66:	24 e0       	ldi	r18, 0x04	; 4
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	a2 0e       	add	r10, r18
     d6c:	b3 1e       	adc	r11, r19
     d6e:	3f e3       	ldi	r19, 0x3F	; 63
     d70:	39 83       	std	Y+1, r19	; 0x01
     d72:	0f c0       	rjmp	.+30     	; 0xd92 <vfprintf+0x158>
     d74:	83 36       	cpi	r24, 0x63	; 99
     d76:	31 f0       	breq	.+12     	; 0xd84 <vfprintf+0x14a>
     d78:	83 37       	cpi	r24, 0x73	; 115
     d7a:	81 f0       	breq	.+32     	; 0xd9c <vfprintf+0x162>
     d7c:	83 35       	cpi	r24, 0x53	; 83
     d7e:	09 f0       	breq	.+2      	; 0xd82 <vfprintf+0x148>
     d80:	5a c0       	rjmp	.+180    	; 0xe36 <vfprintf+0x1fc>
     d82:	22 c0       	rjmp	.+68     	; 0xdc8 <vfprintf+0x18e>
     d84:	f5 01       	movw	r30, r10
     d86:	80 81       	ld	r24, Z
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	22 e0       	ldi	r18, 0x02	; 2
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	a2 0e       	add	r10, r18
     d90:	b3 1e       	adc	r11, r19
     d92:	21 e0       	ldi	r18, 0x01	; 1
     d94:	c2 2e       	mov	r12, r18
     d96:	d1 2c       	mov	r13, r1
     d98:	42 01       	movw	r8, r4
     d9a:	14 c0       	rjmp	.+40     	; 0xdc4 <vfprintf+0x18a>
     d9c:	92 e0       	ldi	r25, 0x02	; 2
     d9e:	29 2e       	mov	r2, r25
     da0:	31 2c       	mov	r3, r1
     da2:	2a 0c       	add	r2, r10
     da4:	3b 1c       	adc	r3, r11
     da6:	f5 01       	movw	r30, r10
     da8:	80 80       	ld	r8, Z
     daa:	91 80       	ldd	r9, Z+1	; 0x01
     dac:	16 ff       	sbrs	r17, 6
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <vfprintf+0x17c>
     db0:	6f 2d       	mov	r22, r15
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	02 c0       	rjmp	.+4      	; 0xdba <vfprintf+0x180>
     db6:	6f ef       	ldi	r22, 0xFF	; 255
     db8:	7f ef       	ldi	r23, 0xFF	; 255
     dba:	c4 01       	movw	r24, r8
     dbc:	0e 94 2f 08 	call	0x105e	; 0x105e <strnlen>
     dc0:	6c 01       	movw	r12, r24
     dc2:	51 01       	movw	r10, r2
     dc4:	1f 77       	andi	r17, 0x7F	; 127
     dc6:	15 c0       	rjmp	.+42     	; 0xdf2 <vfprintf+0x1b8>
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	28 2e       	mov	r2, r24
     dcc:	31 2c       	mov	r3, r1
     dce:	2a 0c       	add	r2, r10
     dd0:	3b 1c       	adc	r3, r11
     dd2:	f5 01       	movw	r30, r10
     dd4:	80 80       	ld	r8, Z
     dd6:	91 80       	ldd	r9, Z+1	; 0x01
     dd8:	16 ff       	sbrs	r17, 6
     dda:	03 c0       	rjmp	.+6      	; 0xde2 <vfprintf+0x1a8>
     ddc:	6f 2d       	mov	r22, r15
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <vfprintf+0x1ac>
     de2:	6f ef       	ldi	r22, 0xFF	; 255
     de4:	7f ef       	ldi	r23, 0xFF	; 255
     de6:	c4 01       	movw	r24, r8
     de8:	0e 94 24 08 	call	0x1048	; 0x1048 <strnlen_P>
     dec:	6c 01       	movw	r12, r24
     dee:	10 68       	ori	r17, 0x80	; 128
     df0:	51 01       	movw	r10, r2
     df2:	13 fd       	sbrc	r17, 3
     df4:	1c c0       	rjmp	.+56     	; 0xe2e <vfprintf+0x1f4>
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0x1ca>
     df8:	80 e2       	ldi	r24, 0x20	; 32
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	b3 01       	movw	r22, r6
     dfe:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     e02:	ea 94       	dec	r14
     e04:	8e 2d       	mov	r24, r14
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	c8 16       	cp	r12, r24
     e0a:	d9 06       	cpc	r13, r25
     e0c:	a8 f3       	brcs	.-22     	; 0xdf8 <vfprintf+0x1be>
     e0e:	0f c0       	rjmp	.+30     	; 0xe2e <vfprintf+0x1f4>
     e10:	f4 01       	movw	r30, r8
     e12:	17 fd       	sbrc	r17, 7
     e14:	85 91       	lpm	r24, Z+
     e16:	17 ff       	sbrs	r17, 7
     e18:	81 91       	ld	r24, Z+
     e1a:	4f 01       	movw	r8, r30
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	b3 01       	movw	r22, r6
     e20:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     e24:	e1 10       	cpse	r14, r1
     e26:	ea 94       	dec	r14
     e28:	08 94       	sec
     e2a:	c1 08       	sbc	r12, r1
     e2c:	d1 08       	sbc	r13, r1
     e2e:	c1 14       	cp	r12, r1
     e30:	d1 04       	cpc	r13, r1
     e32:	71 f7       	brne	.-36     	; 0xe10 <vfprintf+0x1d6>
     e34:	e7 c0       	rjmp	.+462    	; 0x1004 <vfprintf+0x3ca>
     e36:	84 36       	cpi	r24, 0x64	; 100
     e38:	11 f0       	breq	.+4      	; 0xe3e <vfprintf+0x204>
     e3a:	89 36       	cpi	r24, 0x69	; 105
     e3c:	51 f5       	brne	.+84     	; 0xe92 <vfprintf+0x258>
     e3e:	f5 01       	movw	r30, r10
     e40:	17 ff       	sbrs	r17, 7
     e42:	07 c0       	rjmp	.+14     	; 0xe52 <vfprintf+0x218>
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	a2 81       	ldd	r26, Z+2	; 0x02
     e4a:	b3 81       	ldd	r27, Z+3	; 0x03
     e4c:	24 e0       	ldi	r18, 0x04	; 4
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <vfprintf+0x228>
     e52:	80 81       	ld	r24, Z
     e54:	91 81       	ldd	r25, Z+1	; 0x01
     e56:	aa 27       	eor	r26, r26
     e58:	97 fd       	sbrc	r25, 7
     e5a:	a0 95       	com	r26
     e5c:	ba 2f       	mov	r27, r26
     e5e:	22 e0       	ldi	r18, 0x02	; 2
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	a2 0e       	add	r10, r18
     e64:	b3 1e       	adc	r11, r19
     e66:	01 2f       	mov	r16, r17
     e68:	0f 76       	andi	r16, 0x6F	; 111
     e6a:	b7 ff       	sbrs	r27, 7
     e6c:	08 c0       	rjmp	.+16     	; 0xe7e <vfprintf+0x244>
     e6e:	b0 95       	com	r27
     e70:	a0 95       	com	r26
     e72:	90 95       	com	r25
     e74:	81 95       	neg	r24
     e76:	9f 4f       	sbci	r25, 0xFF	; 255
     e78:	af 4f       	sbci	r26, 0xFF	; 255
     e7a:	bf 4f       	sbci	r27, 0xFF	; 255
     e7c:	00 68       	ori	r16, 0x80	; 128
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	a2 01       	movw	r20, r4
     e84:	2a e0       	ldi	r18, 0x0A	; 10
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	0e 94 a6 08 	call	0x114c	; 0x114c <__ultoa_invert>
     e8c:	d8 2e       	mov	r13, r24
     e8e:	d4 18       	sub	r13, r4
     e90:	3f c0       	rjmp	.+126    	; 0xf10 <vfprintf+0x2d6>
     e92:	85 37       	cpi	r24, 0x75	; 117
     e94:	21 f4       	brne	.+8      	; 0xe9e <vfprintf+0x264>
     e96:	1f 7e       	andi	r17, 0xEF	; 239
     e98:	2a e0       	ldi	r18, 0x0A	; 10
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	20 c0       	rjmp	.+64     	; 0xede <vfprintf+0x2a4>
     e9e:	19 7f       	andi	r17, 0xF9	; 249
     ea0:	8f 36       	cpi	r24, 0x6F	; 111
     ea2:	a9 f0       	breq	.+42     	; 0xece <vfprintf+0x294>
     ea4:	80 37       	cpi	r24, 0x70	; 112
     ea6:	20 f4       	brcc	.+8      	; 0xeb0 <vfprintf+0x276>
     ea8:	88 35       	cpi	r24, 0x58	; 88
     eaa:	09 f0       	breq	.+2      	; 0xeae <vfprintf+0x274>
     eac:	ae c0       	rjmp	.+348    	; 0x100a <vfprintf+0x3d0>
     eae:	0b c0       	rjmp	.+22     	; 0xec6 <vfprintf+0x28c>
     eb0:	80 37       	cpi	r24, 0x70	; 112
     eb2:	21 f0       	breq	.+8      	; 0xebc <vfprintf+0x282>
     eb4:	88 37       	cpi	r24, 0x78	; 120
     eb6:	09 f0       	breq	.+2      	; 0xeba <vfprintf+0x280>
     eb8:	a8 c0       	rjmp	.+336    	; 0x100a <vfprintf+0x3d0>
     eba:	01 c0       	rjmp	.+2      	; 0xebe <vfprintf+0x284>
     ebc:	10 61       	ori	r17, 0x10	; 16
     ebe:	14 ff       	sbrs	r17, 4
     ec0:	09 c0       	rjmp	.+18     	; 0xed4 <vfprintf+0x29a>
     ec2:	14 60       	ori	r17, 0x04	; 4
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <vfprintf+0x29a>
     ec6:	14 ff       	sbrs	r17, 4
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <vfprintf+0x2a0>
     eca:	16 60       	ori	r17, 0x06	; 6
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <vfprintf+0x2a0>
     ece:	28 e0       	ldi	r18, 0x08	; 8
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	05 c0       	rjmp	.+10     	; 0xede <vfprintf+0x2a4>
     ed4:	20 e1       	ldi	r18, 0x10	; 16
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	02 c0       	rjmp	.+4      	; 0xede <vfprintf+0x2a4>
     eda:	20 e1       	ldi	r18, 0x10	; 16
     edc:	32 e0       	ldi	r19, 0x02	; 2
     ede:	f5 01       	movw	r30, r10
     ee0:	17 ff       	sbrs	r17, 7
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <vfprintf+0x2b8>
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	44 e0       	ldi	r20, 0x04	; 4
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <vfprintf+0x2c4>
     ef2:	60 81       	ld	r22, Z
     ef4:	71 81       	ldd	r23, Z+1	; 0x01
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	42 e0       	ldi	r20, 0x02	; 2
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	a4 0e       	add	r10, r20
     f00:	b5 1e       	adc	r11, r21
     f02:	a2 01       	movw	r20, r4
     f04:	0e 94 a6 08 	call	0x114c	; 0x114c <__ultoa_invert>
     f08:	d8 2e       	mov	r13, r24
     f0a:	d4 18       	sub	r13, r4
     f0c:	01 2f       	mov	r16, r17
     f0e:	0f 77       	andi	r16, 0x7F	; 127
     f10:	06 ff       	sbrs	r16, 6
     f12:	09 c0       	rjmp	.+18     	; 0xf26 <vfprintf+0x2ec>
     f14:	0e 7f       	andi	r16, 0xFE	; 254
     f16:	df 14       	cp	r13, r15
     f18:	30 f4       	brcc	.+12     	; 0xf26 <vfprintf+0x2ec>
     f1a:	04 ff       	sbrs	r16, 4
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <vfprintf+0x2f0>
     f1e:	02 fd       	sbrc	r16, 2
     f20:	04 c0       	rjmp	.+8      	; 0xf2a <vfprintf+0x2f0>
     f22:	0f 7e       	andi	r16, 0xEF	; 239
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <vfprintf+0x2f0>
     f26:	1d 2d       	mov	r17, r13
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <vfprintf+0x2f2>
     f2a:	1f 2d       	mov	r17, r15
     f2c:	80 2f       	mov	r24, r16
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	04 ff       	sbrs	r16, 4
     f32:	0c c0       	rjmp	.+24     	; 0xf4c <vfprintf+0x312>
     f34:	fe 01       	movw	r30, r28
     f36:	ed 0d       	add	r30, r13
     f38:	f1 1d       	adc	r31, r1
     f3a:	20 81       	ld	r18, Z
     f3c:	20 33       	cpi	r18, 0x30	; 48
     f3e:	11 f4       	brne	.+4      	; 0xf44 <vfprintf+0x30a>
     f40:	09 7e       	andi	r16, 0xE9	; 233
     f42:	09 c0       	rjmp	.+18     	; 0xf56 <vfprintf+0x31c>
     f44:	02 ff       	sbrs	r16, 2
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <vfprintf+0x31a>
     f48:	1e 5f       	subi	r17, 0xFE	; 254
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <vfprintf+0x31c>
     f4c:	86 78       	andi	r24, 0x86	; 134
     f4e:	90 70       	andi	r25, 0x00	; 0
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	09 f0       	breq	.+2      	; 0xf56 <vfprintf+0x31c>
     f54:	1f 5f       	subi	r17, 0xFF	; 255
     f56:	80 2e       	mov	r8, r16
     f58:	99 24       	eor	r9, r9
     f5a:	03 fd       	sbrc	r16, 3
     f5c:	12 c0       	rjmp	.+36     	; 0xf82 <vfprintf+0x348>
     f5e:	00 ff       	sbrs	r16, 0
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <vfprintf+0x342>
     f62:	fd 2c       	mov	r15, r13
     f64:	1e 15       	cp	r17, r14
     f66:	50 f4       	brcc	.+20     	; 0xf7c <vfprintf+0x342>
     f68:	fe 0c       	add	r15, r14
     f6a:	f1 1a       	sub	r15, r17
     f6c:	1e 2d       	mov	r17, r14
     f6e:	06 c0       	rjmp	.+12     	; 0xf7c <vfprintf+0x342>
     f70:	80 e2       	ldi	r24, 0x20	; 32
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	b3 01       	movw	r22, r6
     f76:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     f7a:	1f 5f       	subi	r17, 0xFF	; 255
     f7c:	1e 15       	cp	r17, r14
     f7e:	c0 f3       	brcs	.-16     	; 0xf70 <vfprintf+0x336>
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <vfprintf+0x350>
     f82:	1e 15       	cp	r17, r14
     f84:	10 f4       	brcc	.+4      	; 0xf8a <vfprintf+0x350>
     f86:	e1 1a       	sub	r14, r17
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <vfprintf+0x352>
     f8a:	ee 24       	eor	r14, r14
     f8c:	84 fe       	sbrs	r8, 4
     f8e:	0f c0       	rjmp	.+30     	; 0xfae <vfprintf+0x374>
     f90:	80 e3       	ldi	r24, 0x30	; 48
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	b3 01       	movw	r22, r6
     f96:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     f9a:	82 fe       	sbrs	r8, 2
     f9c:	1f c0       	rjmp	.+62     	; 0xfdc <vfprintf+0x3a2>
     f9e:	81 fe       	sbrs	r8, 1
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <vfprintf+0x36e>
     fa2:	88 e5       	ldi	r24, 0x58	; 88
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	10 c0       	rjmp	.+32     	; 0xfc8 <vfprintf+0x38e>
     fa8:	88 e7       	ldi	r24, 0x78	; 120
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <vfprintf+0x38e>
     fae:	c4 01       	movw	r24, r8
     fb0:	86 78       	andi	r24, 0x86	; 134
     fb2:	90 70       	andi	r25, 0x00	; 0
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	91 f0       	breq	.+36     	; 0xfdc <vfprintf+0x3a2>
     fb8:	81 fc       	sbrc	r8, 1
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0x386>
     fbc:	80 e2       	ldi	r24, 0x20	; 32
     fbe:	01 c0       	rjmp	.+2      	; 0xfc2 <vfprintf+0x388>
     fc0:	8b e2       	ldi	r24, 0x2B	; 43
     fc2:	07 fd       	sbrc	r16, 7
     fc4:	8d e2       	ldi	r24, 0x2D	; 45
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	b3 01       	movw	r22, r6
     fca:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <vfprintf+0x3a2>
     fd0:	80 e3       	ldi	r24, 0x30	; 48
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	b3 01       	movw	r22, r6
     fd6:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     fda:	fa 94       	dec	r15
     fdc:	df 14       	cp	r13, r15
     fde:	c0 f3       	brcs	.-16     	; 0xfd0 <vfprintf+0x396>
     fe0:	da 94       	dec	r13
     fe2:	f2 01       	movw	r30, r4
     fe4:	ed 0d       	add	r30, r13
     fe6:	f1 1d       	adc	r31, r1
     fe8:	80 81       	ld	r24, Z
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	b3 01       	movw	r22, r6
     fee:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
     ff2:	dd 20       	and	r13, r13
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <vfprintf+0x3a6>
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0x3ca>
     ff8:	80 e2       	ldi	r24, 0x20	; 32
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	b3 01       	movw	r22, r6
     ffe:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <fputc>
    1002:	ea 94       	dec	r14
    1004:	ee 20       	and	r14, r14
    1006:	c1 f7       	brne	.-16     	; 0xff8 <vfprintf+0x3be>
    1008:	40 ce       	rjmp	.-896    	; 0xc8a <vfprintf+0x50>
    100a:	f3 01       	movw	r30, r6
    100c:	86 81       	ldd	r24, Z+6	; 0x06
    100e:	97 81       	ldd	r25, Z+7	; 0x07
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <vfprintf+0x3dc>
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	9f ef       	ldi	r25, 0xFF	; 255
    1016:	2d 96       	adiw	r28, 0x0d	; 13
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	bf 90       	pop	r11
    1034:	af 90       	pop	r10
    1036:	9f 90       	pop	r9
    1038:	8f 90       	pop	r8
    103a:	7f 90       	pop	r7
    103c:	6f 90       	pop	r6
    103e:	5f 90       	pop	r5
    1040:	4f 90       	pop	r4
    1042:	3f 90       	pop	r3
    1044:	2f 90       	pop	r2
    1046:	08 95       	ret

00001048 <strnlen_P>:
    1048:	fc 01       	movw	r30, r24
    104a:	05 90       	lpm	r0, Z+
    104c:	61 50       	subi	r22, 0x01	; 1
    104e:	70 40       	sbci	r23, 0x00	; 0
    1050:	01 10       	cpse	r0, r1
    1052:	d8 f7       	brcc	.-10     	; 0x104a <strnlen_P+0x2>
    1054:	80 95       	com	r24
    1056:	90 95       	com	r25
    1058:	8e 0f       	add	r24, r30
    105a:	9f 1f       	adc	r25, r31
    105c:	08 95       	ret

0000105e <strnlen>:
    105e:	fc 01       	movw	r30, r24
    1060:	61 50       	subi	r22, 0x01	; 1
    1062:	70 40       	sbci	r23, 0x00	; 0
    1064:	01 90       	ld	r0, Z+
    1066:	01 10       	cpse	r0, r1
    1068:	d8 f7       	brcc	.-10     	; 0x1060 <strnlen+0x2>
    106a:	80 95       	com	r24
    106c:	90 95       	com	r25
    106e:	8e 0f       	add	r24, r30
    1070:	9f 1f       	adc	r25, r31
    1072:	08 95       	ret

00001074 <fgetc>:
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	ec 01       	movw	r28, r24
    107a:	2b 81       	ldd	r18, Y+3	; 0x03
    107c:	20 ff       	sbrs	r18, 0
    107e:	35 c0       	rjmp	.+106    	; 0x10ea <fgetc+0x76>
    1080:	26 ff       	sbrs	r18, 6
    1082:	09 c0       	rjmp	.+18     	; 0x1096 <fgetc+0x22>
    1084:	2f 7b       	andi	r18, 0xBF	; 191
    1086:	2b 83       	std	Y+3, r18	; 0x03
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	9f 83       	std	Y+7, r25	; 0x07
    1090:	8e 83       	std	Y+6, r24	; 0x06
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	28 c0       	rjmp	.+80     	; 0x10e6 <fgetc+0x72>
    1096:	22 ff       	sbrs	r18, 2
    1098:	0f c0       	rjmp	.+30     	; 0x10b8 <fgetc+0x44>
    109a:	e8 81       	ld	r30, Y
    109c:	f9 81       	ldd	r31, Y+1	; 0x01
    109e:	80 81       	ld	r24, Z
    10a0:	99 27       	eor	r25, r25
    10a2:	87 fd       	sbrc	r24, 7
    10a4:	90 95       	com	r25
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	19 f4       	brne	.+6      	; 0x10b0 <fgetc+0x3c>
    10aa:	20 62       	ori	r18, 0x20	; 32
    10ac:	2b 83       	std	Y+3, r18	; 0x03
    10ae:	1d c0       	rjmp	.+58     	; 0x10ea <fgetc+0x76>
    10b0:	31 96       	adiw	r30, 0x01	; 1
    10b2:	f9 83       	std	Y+1, r31	; 0x01
    10b4:	e8 83       	st	Y, r30
    10b6:	11 c0       	rjmp	.+34     	; 0x10da <fgetc+0x66>
    10b8:	ea 85       	ldd	r30, Y+10	; 0x0a
    10ba:	fb 85       	ldd	r31, Y+11	; 0x0b
    10bc:	ce 01       	movw	r24, r28
    10be:	19 95       	eicall
    10c0:	97 ff       	sbrs	r25, 7
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <fgetc+0x66>
    10c4:	2b 81       	ldd	r18, Y+3	; 0x03
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ca:	93 07       	cpc	r25, r19
    10cc:	11 f4       	brne	.+4      	; 0x10d2 <fgetc+0x5e>
    10ce:	80 e1       	ldi	r24, 0x10	; 16
    10d0:	01 c0       	rjmp	.+2      	; 0x10d4 <fgetc+0x60>
    10d2:	80 e2       	ldi	r24, 0x20	; 32
    10d4:	82 2b       	or	r24, r18
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <fgetc+0x76>
    10da:	2e 81       	ldd	r18, Y+6	; 0x06
    10dc:	3f 81       	ldd	r19, Y+7	; 0x07
    10de:	2f 5f       	subi	r18, 0xFF	; 255
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
    10e2:	3f 83       	std	Y+7, r19	; 0x07
    10e4:	2e 83       	std	Y+6, r18	; 0x06
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <fgetc+0x7a>
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	9f ef       	ldi	r25, 0xFF	; 255
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	08 95       	ret

000010f4 <fputc>:
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	8c 01       	movw	r16, r24
    10fe:	eb 01       	movw	r28, r22
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	81 ff       	sbrs	r24, 1
    1104:	1b c0       	rjmp	.+54     	; 0x113c <fputc+0x48>
    1106:	82 ff       	sbrs	r24, 2
    1108:	0d c0       	rjmp	.+26     	; 0x1124 <fputc+0x30>
    110a:	2e 81       	ldd	r18, Y+6	; 0x06
    110c:	3f 81       	ldd	r19, Y+7	; 0x07
    110e:	8c 81       	ldd	r24, Y+4	; 0x04
    1110:	9d 81       	ldd	r25, Y+5	; 0x05
    1112:	28 17       	cp	r18, r24
    1114:	39 07       	cpc	r19, r25
    1116:	64 f4       	brge	.+24     	; 0x1130 <fputc+0x3c>
    1118:	e8 81       	ld	r30, Y
    111a:	f9 81       	ldd	r31, Y+1	; 0x01
    111c:	01 93       	st	Z+, r16
    111e:	f9 83       	std	Y+1, r31	; 0x01
    1120:	e8 83       	st	Y, r30
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <fputc+0x3c>
    1124:	e8 85       	ldd	r30, Y+8	; 0x08
    1126:	f9 85       	ldd	r31, Y+9	; 0x09
    1128:	80 2f       	mov	r24, r16
    112a:	19 95       	eicall
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	31 f4       	brne	.+12     	; 0x113c <fputc+0x48>
    1130:	8e 81       	ldd	r24, Y+6	; 0x06
    1132:	9f 81       	ldd	r25, Y+7	; 0x07
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	9f 83       	std	Y+7, r25	; 0x07
    1138:	8e 83       	std	Y+6, r24	; 0x06
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <fputc+0x4c>
    113c:	0f ef       	ldi	r16, 0xFF	; 255
    113e:	1f ef       	ldi	r17, 0xFF	; 255
    1140:	c8 01       	movw	r24, r16
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	08 95       	ret

0000114c <__ultoa_invert>:
    114c:	fa 01       	movw	r30, r20
    114e:	aa 27       	eor	r26, r26
    1150:	28 30       	cpi	r18, 0x08	; 8
    1152:	51 f1       	breq	.+84     	; 0x11a8 <__ultoa_invert+0x5c>
    1154:	20 31       	cpi	r18, 0x10	; 16
    1156:	81 f1       	breq	.+96     	; 0x11b8 <__ultoa_invert+0x6c>
    1158:	e8 94       	clt
    115a:	6f 93       	push	r22
    115c:	6e 7f       	andi	r22, 0xFE	; 254
    115e:	6e 5f       	subi	r22, 0xFE	; 254
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	8f 4f       	sbci	r24, 0xFF	; 255
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	af 4f       	sbci	r26, 0xFF	; 255
    1168:	b1 e0       	ldi	r27, 0x01	; 1
    116a:	3e d0       	rcall	.+124    	; 0x11e8 <__ultoa_invert+0x9c>
    116c:	b4 e0       	ldi	r27, 0x04	; 4
    116e:	3c d0       	rcall	.+120    	; 0x11e8 <__ultoa_invert+0x9c>
    1170:	67 0f       	add	r22, r23
    1172:	78 1f       	adc	r23, r24
    1174:	89 1f       	adc	r24, r25
    1176:	9a 1f       	adc	r25, r26
    1178:	a1 1d       	adc	r26, r1
    117a:	68 0f       	add	r22, r24
    117c:	79 1f       	adc	r23, r25
    117e:	8a 1f       	adc	r24, r26
    1180:	91 1d       	adc	r25, r1
    1182:	a1 1d       	adc	r26, r1
    1184:	6a 0f       	add	r22, r26
    1186:	71 1d       	adc	r23, r1
    1188:	81 1d       	adc	r24, r1
    118a:	91 1d       	adc	r25, r1
    118c:	a1 1d       	adc	r26, r1
    118e:	20 d0       	rcall	.+64     	; 0x11d0 <__ultoa_invert+0x84>
    1190:	09 f4       	brne	.+2      	; 0x1194 <__ultoa_invert+0x48>
    1192:	68 94       	set
    1194:	3f 91       	pop	r19
    1196:	2a e0       	ldi	r18, 0x0A	; 10
    1198:	26 9f       	mul	r18, r22
    119a:	11 24       	eor	r1, r1
    119c:	30 19       	sub	r19, r0
    119e:	30 5d       	subi	r19, 0xD0	; 208
    11a0:	31 93       	st	Z+, r19
    11a2:	de f6       	brtc	.-74     	; 0x115a <__ultoa_invert+0xe>
    11a4:	cf 01       	movw	r24, r30
    11a6:	08 95       	ret
    11a8:	46 2f       	mov	r20, r22
    11aa:	47 70       	andi	r20, 0x07	; 7
    11ac:	40 5d       	subi	r20, 0xD0	; 208
    11ae:	41 93       	st	Z+, r20
    11b0:	b3 e0       	ldi	r27, 0x03	; 3
    11b2:	0f d0       	rcall	.+30     	; 0x11d2 <__ultoa_invert+0x86>
    11b4:	c9 f7       	brne	.-14     	; 0x11a8 <__ultoa_invert+0x5c>
    11b6:	f6 cf       	rjmp	.-20     	; 0x11a4 <__ultoa_invert+0x58>
    11b8:	46 2f       	mov	r20, r22
    11ba:	4f 70       	andi	r20, 0x0F	; 15
    11bc:	40 5d       	subi	r20, 0xD0	; 208
    11be:	4a 33       	cpi	r20, 0x3A	; 58
    11c0:	18 f0       	brcs	.+6      	; 0x11c8 <__ultoa_invert+0x7c>
    11c2:	49 5d       	subi	r20, 0xD9	; 217
    11c4:	31 fd       	sbrc	r19, 1
    11c6:	40 52       	subi	r20, 0x20	; 32
    11c8:	41 93       	st	Z+, r20
    11ca:	02 d0       	rcall	.+4      	; 0x11d0 <__ultoa_invert+0x84>
    11cc:	a9 f7       	brne	.-22     	; 0x11b8 <__ultoa_invert+0x6c>
    11ce:	ea cf       	rjmp	.-44     	; 0x11a4 <__ultoa_invert+0x58>
    11d0:	b4 e0       	ldi	r27, 0x04	; 4
    11d2:	a6 95       	lsr	r26
    11d4:	97 95       	ror	r25
    11d6:	87 95       	ror	r24
    11d8:	77 95       	ror	r23
    11da:	67 95       	ror	r22
    11dc:	ba 95       	dec	r27
    11de:	c9 f7       	brne	.-14     	; 0x11d2 <__ultoa_invert+0x86>
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	61 05       	cpc	r22, r1
    11e4:	71 05       	cpc	r23, r1
    11e6:	08 95       	ret
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	0a 2e       	mov	r0, r26
    11ee:	06 94       	lsr	r0
    11f0:	57 95       	ror	r21
    11f2:	47 95       	ror	r20
    11f4:	37 95       	ror	r19
    11f6:	27 95       	ror	r18
    11f8:	ba 95       	dec	r27
    11fa:	c9 f7       	brne	.-14     	; 0x11ee <__ultoa_invert+0xa2>
    11fc:	62 0f       	add	r22, r18
    11fe:	73 1f       	adc	r23, r19
    1200:	84 1f       	adc	r24, r20
    1202:	95 1f       	adc	r25, r21
    1204:	a0 1d       	adc	r26, r0
    1206:	08 95       	ret

00001208 <_exit>:
    1208:	f8 94       	cli

0000120a <__stop_program>:
    120a:	ff cf       	rjmp	.-2      	; 0x120a <__stop_program>
